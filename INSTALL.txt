=======================
Madagascar Installation
=======================

Prerequisites
=============

   0. Development environment: X Windows

      MS Windows installation: you will require the cygwin environment, 
	available. Binary downloads of recommended components are available 
	through cygwin unless otherwise noted.

	http://www.cygwin.com

	You will also need an X Windows client. We use Xming successfully.
	It is available from:

	http://sourceforge.net/projects/xming

	NOTE: If you use XMing, you need to ensure that your DISPLAY environment
	variable is set to :0 when you run Madagascar. 

	Additional installs are needed for Windows, available through cygwin:

		Devel:		gcc
				libnetpbm-devel	
				swig

		Libs: 		sunrpc

		Interpreters: 	numpy
				python

	see http://rsf.sourceforge.net/Windows

      Mac OS X installation: you will need to have installed the developer
	tools. 
	
	http://developer.apple.com/tools/xcode/

	XWindows installation is optional from the point of view of the Apple
	developer but is required from the point of view of Madagascar. If you
	have already installed the developer tools you will need to go back to 
	the install process and add the optional X Windows install.

      Linux: most Linux systems run X Windows as standard practice. 

   1. C compiler. ANSI-compliant compiler such as GCC should work. 

	Linux: GCC usually comes pre-installed on Linux machines. 
	OS X: GCC is included as part of the developer toolkit for OS X. 
	MS Windows: download from cygwin as described above. 

   2. Python interpreter. Python is an interpretable programming
	language. Any version from 2.2 onward is supported, with the exception of
	Python 3, which is not yet available pending updates of dependencies.
	Python is used by RSF in installation scripts and project
	management scripts. 

	Python is pre-installed on some versions of Linux. 
	Python is pre-installed on recent versions of Mac OS X. 
	Python must be downloaded for Windows.

	Source and binary installs may be obtained from

	http://python.org

	and Windows binaries may be alternatively be installed through cygwin 
	as described above.

   3. SCons. A standard Madagascar installation will install the SCons build
	management system on which much of Madagascar relies. If you have a
	pre-existing SCons installation which you would prefer to keep using,
	remove or rename the following files in /usr/local/rsf/bin :

		scons
		scons-<version>
		scons-time
		scons-time-<version>
		sconsign
		sconsign-<version>

	where "<version>" represents a version string such as "0.98.3"


Environmental variables
=======================

   1.  Set the RSFROOT environmental variable to the directory where
you want RSF installed.

   2. Set the PYTHONPATH environmental variable to include
$RSFROOT/lib.

   3. Add $RSFROOT/bin to your PATH environmental variable.

   4. Set DATAPATH to the directory for temporary data files.

Once you have verified your enviornment variables, you will want to alter
your shell-specific user configuration file.

If you do not know which shell you are using, type the following at the
command line:

	echo $SHELL

If you do not know how to find and/or edit your configuration file, you should
learn this. In brief, 

	ls -a

will show you hidden files. Most likely the file you are looking for is called

	.cshrc

or

	.bash_profile

or something like that. In most cases appending the following text will work:

Example configuration for csh and tcsh:
=======================================

setenv RSFROOT /usr/local/rsf
if ($?PYTHONPATH) then
   setenv PYTHONPATH ${PYTHONPATH}:$RSFROOT/lib
else
   setenv PYTHONPATH $RSFROOT/lib
endif
set path = ($path $RSFROOT/bin)
setenv DATAPATH /var/tmp/

Example configuration for bash (including cygwin):
===================================================

export RSFROOT=/usr/local/rsf
if [ -n "$PYTHONPATH" ]; then
   export PYTHONPATH=${PYTHONPATH}:$RSFROOT/lib
else
   export PYTHONPATH=$RSFROOT/lib
fi
export PATH=$PATH:$RSFROOT/bin
export DATAPATH=/var/tmp/

Notice the slash at the end of the DATAPATH variable.

Software construction
=====================

   1. Configuration.

      Change to the top RSF source directory and run

      ./configure

      You can examine the config.py file that this command
generates. Additional options are available. You can obtain a full
list of customizable variables by running "scons -h". For example, to
install C++ and Fortran-90 API bindings in addition to the basic
package, run

      ./configure API=c++,fortran-90

   2. Building and installing the package.

      Run "make install" or the following two commands in succession:

      make 
      make install

      If you need "root" privileges for installing under $RSFROOT,
you may need to run

      make
      su
      make install

      or

      make
      sudo make install

   3. Cleaning.

      To clean all intermediate files generated by SCons, run

      make clean

      To clean all intermediate files and all installed files, run

      make distclean

Testing Your Installation
=========================

ere are a few simple tests and and a brief introduction to Madagascar:

Typing any Madagascar command in a terminal window without parameters should
generate a brief documentation on that command. Try one of the following:

	sfin
	sfattr
	sfspike
	sfbandpass
	sfwiggle

If you get an error like "Command not found", you may not have your
PATH environment variable set correctly, or you may need to
issue the rehash command.

Now try making a simple Madagascar data file:

	sfspike n1=1000 k1=300 > spike.rsf

This command generates a one dimensional list of 1000 numbers, all zero except
for a spike equal to one at position 300. If this generates an error like

	Cannot write to data file /path/spike.rsf@: Bad file descriptor

you may need to create the directory pointed to by your DATAPATH
environment variable.

The file spike.rsf is a text header.  The actual data are stored in
the binary file pointed to by the in parameter in the header.  You
can look at the header file directly with more, or better, examine
the file properties with

	sfin spike.rsf

You can learn more about the contents of spike.rsf with

	sfattr < spike.rsf


The following command applies a bandpass filter to spike.rsf and puts
the result in filter.rsf:

	sfbandpass fhi=2 phase=1 < spike.rsf > filter.rsf

The following command makes a graphics file from filter.rsf:

	sfwiggle clip=0.02 title="Welcome to Madagascar" < filter.rsf > filter.vpl

If you have an X11 display program running, and your DISPLAY
environment variable is set correctly, you can display the graphics file with:

	xtpen < filter.vpl

You can pipe Madagascar commands together and do the whole thing at once like
this:

	sfspike n1=1000 k1=300 | sfbandpass fhi=2 phase=1 | \
	sfwiggle clip=0.02 title="Welcome to Madagascar" | xtpen

If you have SCons installed, you can use it to automate Madagascar processing.
Here is a simple SConstruct file to make filter.rsf and filter.vpl :

####################################
#
# Setting up
#
from rsfproj import *

#
# Make filter.rsf
#
Flow('filter',None,
     'spike n1=1000 k1=300 | bandpass fhi=2 phase=1')

#
# Make filter.vpl
#
Result('filter',
       'wiggle clip=0.02 title="Welcome to Madagascar"')

End()
####################################

Put the file in an empty directory, give it the name SConstruct,
cd to that directory, and issue the command:

	scons

The graphics file is now stored in the Fig subdirectory.  You can
view it manually with:

	xtpen Fig/filter.vpl

... or you can use:

	scons view

When an SConstruct file makes more than one graphics file, the  

	scons view 

command will display all of them in sequence. 

Now edit the SConstruct file: change the title string on the
Result line to "Hello World!", save the file, and rerun the scons
command. 

You will see that scons has figured out that the file
filter.rsf does not need to be rebuilt because nothing that affects
it has changed. Only the file filter.vpl is rebuilt.

Bugs
====

Please report all problems encountered during software construction to
the RSF-user mailing list

https://lists.sourceforge.net/lists/listinfo/rsf-user

Suggestions for improvement of this document may also be sent to that list.

