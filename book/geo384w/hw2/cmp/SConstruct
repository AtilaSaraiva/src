from rsf.proj import *
from rsf.prog import RSFROOT

# Program compilation
#####################

proj = Project()

# COMMENT THE NEXT LINE FOR FORTRAN OR PYTHON
prog = proj.Program('traveltime.c')

# UNCOMMENT BELOW IF YOU WANT TO USE FORTRAN
#prog = proj.Program('traveltime.f90',
#                   F90PATH=os.path.join(RSFROOT,'include'),
#                   LIBS=['rsff90']+proj.get('LIBS'))

# UNCOMMENT BELOW IF YOU WANT TO USE PYTHON
#prog = proj.Command('traveltime.exe','traveltime.py',
#                    'cp $SOURCE $TARGET')
#AddPostAction(prog,Chmod(prog,0o755))

exe = str(prog[0])

# Donwload data
Fetch('midpts.hh','midpts')

# Select a CMP gather, mute
Flow('cmp','midpts.hh',
     '''
     window n3=1 | dd form=native | 
     mutter half=n v0=1.5 |
     put label1=Time unit1=s label2=Offset unit2=km
     ''')
Plot('cmp','grey title="Common Midpoint Gather" ')

# Velocity scan
Flow('vscan','cmp',
     'vscan half=n v0=1.4 nv=111 dv=0.01 semblance=y')
Plot('vscan','grey color=j allpos=y title="Semblance Scan" ')
Flow('top-mut','vscan','math output=1 | pad beg1=20 | mutter t0=0 x0=1.4 inner=y v0=1|  math output="10*input*x2*x2"')
Flow('bot-mut','vscan','math output=1 |pad beg1=20 | mutter t0=0 x0=1.4 inner=n v0=0.4 | math output="10*input*(3-x2)*(3-x2)"')
Flow('vscan-mn','vscan top-mut bot-mut',
   '''
   scale dscale=10 | pad beg1=20 | math output="10*exp(-1*input*input)"| cut max1=0.2 |add ${SOURCES[1]} | add ${SOURCES[2]}
   ''')
Flow('vscan-pk','vscan-mn',
    '''
    pathmin   
    k=10 g=.001 knots=501 lr=.1 niter=5000 aniso=.001
    srad=3 nsmooth=1 kink=1 eps=.01 damp=.75 
    ''')
#    math output="input"
o1 = .2
o2 =1.4+0.01
l1 = 0.004*900
l2 = 0.01 * 109

Plot('vscan-pk',
   '''
   graph transp=y min2=%g max2=%g max1=%g min1=%g 
   label2= unit2= n2tic=0 n1tic=0 title= scalebar=y plotfat=8 plotcol=4 dash=1 barlabel="Objective Function Value"
   '''%(o2,o2+l2,o1,o1+l1))
Plot('vscan-mn','vscan-mn',' grey color=j title= allpos=y min1=%g max1=%g min2=%g max2=%g '%(o1,o1+l1,o2,o2+l2))
Plot('vscan-s','vscan',
   ''' 
   grey color=j title="Path Through Objective Function" 
   allpos=y min1=%g max1=%g min2=%g max2=%g  scalebar=y barlabel="Objective Function Value"
   '''%(o1,o1+l1,o2,o2+l2))
Result('outs','vscan-s vscan-pk ','Overlay')

##############################
grad = 0.25 # Velocity gradient
##############################

cmps = []
for iv in range(21):
    vmax = 1.5+0.2*grad*iv

    # Interval velocity
    vint = 'vint%d' % iv

    Flow(vint,None,
         '''
         math n1=1000 d1=0.004 
         label1=Time unit1=s 
         output="1.5+%g*x1" | clip clip=%g 
         ''' % (grad,vmax))
    Plot(vint,
         '''
         graph yreverse=y transp=y pad=n plotfat=15 
         title="Interval Velocity" min2=1.4 max2=%g 
         wheretitle=b wherexlabel=t
         label2=Velocity unit2=km/s 
         ''' % (1.6+4*grad))

    # Traveltimes
    time = 'time%d' % iv
    Flow(time,[vint,exe],
         '''
         ./${SOURCES[1]} nr=5 r=285,509,648,728,906
         nh=24 dh=0.134 h0=0.264 type=hyperbolic
         ''')
    Plot(time+'g',time,
         '''
         graph yreverse=y pad=n min2=0 max2=3.996
         wantaxis=n wanttitle=n plotfat=10
         ''')
    Plot(time,['cmp',time+'g'],'Overlay')

    # RMS velocity
    vrms = 'vrms%d' % iv

    Flow(vrms,vint,
         '''
         add mode=p $SOURCE | causint | 
         math output="sqrt(input*0.004/(x1+0.004))" 
         ''')
    Plot(vrms+'w',vrms,
         '''
         graph yreverse=y transp=y pad=n 
         wanttitle=n wantaxis=n min2=1.4 max2=2.5 
         plotcol=7 plotfat=15
         ''')
    Plot(vrms+'b',vrms,
         '''
         graph yreverse=y transp=y pad=n 
         wanttitle=n wantaxis=n min2=1.4 max2=2.5 
         plotcol=0 plotfat=3
         ''')
    Plot(vrms,['vscan',vrms+'w',vrms+'b'],'Overlay')

    # Normal moveout
    nmo = 'nmo%d' % iv

    Flow(nmo,['cmp',vrms],'nmo velocity=${SOURCES[1]} half=n')
    Plot(nmo,
         '''
         grey title="Normal Moveout"
         grid2=y gridcol=6 gridfat=10
         ''')

    # Display it together
    allp = 'cmp%d' % iv
    Plot(allp,[time,vint,vrms,nmo],
         'SideBySideAniso',vppen='txscale=1.5')

    cmps.append(allp)
Plot('cmps',cmps,'Movie',view=1)

###############################
frame = 15
###############################
Result('cmp','cmp%d' % frame,'Overlay')

Flow('time',['vint%d' % frame,exe],
     '''
     ./${SOURCES[1]} nr=1 r=500
     nh=1001 dh=0.01 h0=0 type=hyperbolic
     ''')
Result('time',
       '''
       graph title=Traveltime
       label2=Time unit2=s yreverse=y
       label1=Offset unit1=km
       ''')

End()
