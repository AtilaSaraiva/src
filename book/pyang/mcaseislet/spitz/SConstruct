from rsf.proj import *

nt=401
ns=25

def grey(title):
    return '''
    window f1=225 | reverse which=2 |
    grey grid2=y gridcol=5 gridfat=3 title="\F2 %s" 
    labelsz=10 titlesz=12.5 label2="\F2 Offset" label1="\F2 Time"
    parallel2=n format2="%%3.2f"
    ''' % title

# Generate data
###############

Flow('primary',None,
     '''
     spike
     n1=401 d1=0.002
     n2=42 o2=0.06 d2=0.01
     k1=301 label2=Offset |
     ricker1 frequency=35 |
     reverse which=2 |pad n2=64
     ''')
Flow('multiple','primary','nmostretch inv=y v0=1 half=n')
Flow('data','primary multiple','add ${SOURCES[1]}')
Result('data',grey('Data'))

# Generate muliple model
########################

Flow('model','primary','nmostretch inv=y v0=1.2 half=n')
Result('model',grey('Multiple model'))


Flow('pq','data',
	'''
	twodip2 order=2 eps=6 lam=2 verb=y gauss=n niter=10
	''')
Flow('dip1','pq','window n3=1')
Flow('dip2','pq','window f3=1')

Plot('dip1','dip1','%s pclip=100 scalebar=y color=j' % grey('First Dip'))
Plot('dip2','dip2','%s pclip=100 scalebar=y color=j' % grey('Second Dip'))
Result('dips','dip1 dip2','SideBySideIso')


# Seislet-based MCA separation:
Flow('rec1 rec2','data dip1 dip2',
     	'''
     	mcaseislet dip1=${SOURCES[1]} dip2=${SOURCES[2]} comp2=${TARGETS[1]} 
	verb=y order=2 type=b eps=0.01 niter=20 pclip=3 pscale=50 
     	''')
# ... smth1=y smth2=y rect1=2 rect2=4

Flow('rec','rec1 rec2','add scale=1,1 ${SOURCES[1]}')
Plot('rec1','window n2=42 | grey title=rec1')
Plot('rec2','window n2=42 | grey title=rec2')
Plot('rec','window n2=42 | grey title=rec1+rec2')

Result('rec','rec1 rec2','TwoColumns')


End()

