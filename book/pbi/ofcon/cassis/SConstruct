###########################################################################
# STANDARD HEADER
###########################################################################
import sys, os

root = os.environ.get('RSFROOT')
sys.path.append(os.path.join(root,'lib'))

from rsfproj import *
Book()
###########################################################################

datdir  = 'ftp://begpc132.beg.utexas.edu/data/cassis'
Fetch('datacassisAll.su.poscdp',datdir)

Flow(['all','head'],all,
     'segyread tape=$SOURCE tfile=${TARGETS[1]} su=1 endian=0',
     stdin=0)
Flow(['cassis','junk1','junk2'],['all','head'],
     '''intbin head=${SOURCES[1]} > ${TARGETS[0]};
     window < ${TARGETS[0]} f2=196 > ${TARGETS[1]};
     window < ${TARGETS[0]} n2=196 > ${TARGETS[2]};
     cat axis=2 ${TARGETS[1]} ${TARGETS[2]} > ${TARGETS[0]};
     echo o3=0 d3=0.0125 label3=offset >> ${TARGETS[0]};
     echo o2=0.5 d2=0.025 label2=shot >> ${TARGETS[0]}',
     stdout=-1)
Flow('cmp','cassis','transp plane=23 memsize=500 | shot2cmp')

mutter = 'slope0=1.3 tp=0.5'
mutter0 = 'slope0=1.5 x0=1 abs=n tp=0.5'

Flow('vscan','cmp',
     'mutter %s | vscan semblance=y v0=1.5 nv=100 dv=0.02' % mutter)
Flow('vrms','vscan','blindpick2 eps=10 lam=10')
Result('vrms','vrms',
       '''window max1=3 min3=2.75 max3=5.5125 |
       grey color=j allpos=y wantscalebar=y wanttitle=n
       barlabel="NMO velocity (km/s)"
       label1="Time (s)" label2="Midpoint (km)"
       bias=1''')

Flow('nmo',['cmp','vrms'],
     'mutter %s | nmo velocity=${SOURCES[1]} | window max1=3' % mutter)
Flow('nmo0',['cmp','vrms'],
     'nmo velocity=${SOURCES[1]} | window max1=3 | mutter %s' % mutter0)
Flow('stack','nmo','stack')
Result('stack','stack',
       '''window min2=2.75 max2=5.5125 |
       grey title="NMO Stack" label1="Time (s)" label2="Midpoint (km)"
       ''')

Flow('strd','nmo','window f1=50 | stretch rule=L')
Flow('fftd','strd','fft1 | transp plane=13 memsize=500')
Flow('dmod','fftd','finstack')
Flow('dstack','dmod',
     '''transp | fft1 inv=y | window n1=701 |
     stretch rule=L inv=y | pad beg1=50''')
Result('dstack','dstack',
       '''window min2=2.75 max2=5.5125 |
       grey title="DMO Stack" label1="Time (s)" label2="Midpoint (km)"
       ''')

Flow('snmo','nmo0','cmp2shot | window min3=0.5 n3=201 n2=181')
Flow('sfft','snmo',
     '''window f1=50 | stretch rule=L | fft1 |
     transp memsize=500 | transp plane=23 memsize=500''')
Flow('sparse','sfft','window j2=2')
Flow('sback','sparse','infill')
Flow('sdense','sfft','infill eps=0.3')
Flow('snmo2','sback',
     '''transp transp plane=23 memsize=500 | transp memsize=500 |
     fft1 inv=1 | window n1=701 | stretch inv=1 rule=L | pad beg1=50''')
Flow('snmo1','sdense',
     '''transp transp plane=23 memsize=500 | transp memsize=500 |
     fft1 inv=1 | window n1=701 | stretch inv=1 rule=L | pad beg1=50''')

Flow(['simp','one','two'],'sparse',
     '''window n2=100 f2=1 > ${TARGETS[1]};
     window n2=100 < $SOURCE |
     add ${TARGETS[1]} scale=0.5,0.5 |
     pad n2=101 > ${TARGETS[2]};
     interleave axis=2 $SOURCE ${TARGETS[2]} |
     window n2=201
     ''')
Flow('snmo0','simp',
     '''transp transp plane=23 memsize=500 | transp memsize=500 |
     fft1 inv=1 | window n1=701 | stretch inv=1 rule=L | pad beg1=50''')

Flow('diff2',['snmo2','snmo'],'add scale=1,-1 ${SOURCES[1]}')
Flow('diff0',['snmo0','snmo'],'add scale=1,-1 ${SOURCES[1]}')

def shotplot(slice,clip=0.003):
    return '''window n3=1 f3=%d max1=2.25 min1=0.25 |
    grey label1="Time (s)" label2="Offset (km)" title="Shot%d" clip=%g
    ''' % (slice,slice+1,clip)

for shot in [59,69,79,99,109]:
    shots = []
    for slice in range(shot-1,shot+2):
        shoti = 'shot%d' % slice
        shots.append(shoti)
        Plot(shoti,'snmo',shotplot(slice))
    shoti = 'shot%d' % shot
    Combine(shoti,shots,'SideBySideAniso',result=1)

    shotin = 'shotin%d' % shot
    shoterr = 'shoterr%d' % shot
    simperr = 'simperr%d' % shot
    Plot(shotin,'snmo2',
         shotplot(shot) + ' title="Shot%d Interpolated" ' % (shot+1))
    Plot(shoterr,'diff2',
         shotplot(shot) + ' title="Interpolation Error" ')
    Plot(simperr,'diff0',
         shotplot(shot) +
         ' title="(Shot%d+Shot%d)/2-Shot%d" ' % (shot,shot+2,shot+1))
    Combine(shotin,[shotin,shoterr,simperr],'SideBySideAniso',result=1)

Flow('sparsecmp','cassis',
     'window j2=2 | transp plane=23 memsize=500 | shot2cmp')
Flow('backcmp',['snmo2','vrms'],
     'shot2cmp | pad n1=1251 | inmo velocity=${SOURCES[1]}')
Flow('denscmp',['snmo1','vrms'],
     'shot2cmp | pad n1=1251 | inmo velocity=${SOURCES[1]}')

def window(slice):
    return '''
    window n3=1 min3=%g max1=3
    ''' % slice    

clip = 0.0025
cmpplot = 'grey label1="Time (s)" label2="Offset (km)" clip=%g' % clip

for cmp in [4]:
    cmpi = 'cmp%g' % cmp
    for case in ['','back','sparse','dens']:
        Flow(case+cmpi,case+'cmp',window(cmp))
    Plot(cmpi,cmpi,cmpplot + '  title="CMP at %g km" ' % cmp)
    Plot('sparse'+cmpi,'sparse'+cmpi,cmpplot + '  title=Decimated')
    Plot('back'+cmpi,'back'+cmpi,cmpplot + '  title=Restored')
    Plot('dens'+cmpi,'dens'+cmpi,cmpplot + '  title=Interpolated')
    Plot('err'+cmpi,['back'+cmpi,cmpi],
         'add scale=1,-1 ${SOURCES[1]} | ' + cmpplot + '  title=Error')
    Combine(cmpi,[cmpi,'sparse'+cmpi],'SideBySideAniso',result=1)
    Combine('err'+cmpi,['back'+cmpi,'err'+cmpi],'SideBySideAniso',result=1)
    Combine('dens'+cmpi,[cmpi,'dens'+cmpi],'SideBySideAniso',result=1)

###########################################################################
End()
