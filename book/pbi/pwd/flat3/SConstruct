from rsfproj import *
import string

def cubeplot(title,clip='',extra=''):
    return '''
    byte gainpanel=all %s |
    grey3 frame1=100 frame2=60 frame3=50 flat=y point1=0.6 point2=0.6
    title="%s" %s
    ''' % (clip,title,extra)

Flow('qdome',None,
     '''
     qdome n1=200 n2=150 n3=100 d1=0.01 d2=0.01 d3=0.01 o1=0 o2=0.4 o3=-0.06 |
     smooth rect1=3 diff1=1 | smooth rect1=4
     ''')
Result('qdome',cubeplot('Input'))

Flow('dip','qdome',
     'dip w1=200 w2=100 w3=75 p1=1 p2=2 p3=2 rect1=5 rect2=5 rect3=5 order=3')
Flow('dip1','dip','window n4=1')
Flow('dip2','dip','window f4=1')

Result('dip1',cubeplot('Inline dip','allpos=y bar=bar.rsf',
                       '''
                       color=j scalebar=y bar=bar.rsf bartype=v wanttitle=n
                       barlabel="Inline Dip"
                       '''))
Result('dip2',cubeplot('Crossline dip','allpos=y bar=bar.rsf',
                       '''
                       color=j scalebar=y bar=bar.rsf bartype=h wanttitle=n
                       barlabel="Crossline Dip"
                       '''))

Flow('cost','dip','stack axis=1 rms=y norm=n')
Plot('cost1','cost',
     '''
     window n3=1 |
     grey color=j scalebar=y bartype=h allpos=y
     title="West-East cost" transp=n yreverse=n
     ''')
Plot('cost2','cost',
     '''
     window f3=1 |
     grey color=j scalebar=y bartype=h allpos=y
     title="South-North cost" transp=n yreverse=n
     ''')
Result('cost','cost1 cost2','SideBySideAniso')

paths = [3*[25,50,75,100,125],5*[25]+5*[50]+5*[75]]
pnames = map(lambda x,y: 'path%d-%d' % (x,y),paths[0],paths[1])

Flow(['time']+pnames,'cost',
     '''
     dijkstra ref1=100 ref2=50
     nf=%d paths=%s fin1=%s fin2=%s
     ''' % (len(pnames),
            string.join(map(lambda x: '${TARGETS[%d]}' % x,
                            range(1,len(pnames)+1)),':'),
            string.join(map(str,paths[0]),','),
            string.join(map(str,paths[1]),',')))
Plot('time',
     '''
     grey color=j scalebar=y allpos=y
     title="Minimum Time" transp=n yreverse=n
     ''')

def plotpath(col,fat):
    return '''
    dd type=complex | window |
    graph plotcol=%d plotfat=%d min1=0 max1=149 min2=0 max2=99
    wantaxis=n wanttitle=n scalebar=y
    ''' % (col,fat)

for path in pnames:
    Plot('w'+path,path,plotpath(7,1))
    Plot('b'+path,path,plotpath(0,6))
    Plot(path,['b'+path,'w'+path],'Overlay')
    
Result('qtime',['time']+ pnames,'Overlay')

Flow('flat','qdome dip1 dip2',
     'flat3 idip=${SOURCES[1]} xdip=${SOURCES[2]} ref2=100 ref3=50')
Result('flat3','flat',cubeplot('Flattened'))

End()
