from rsfproj import *
from rsfproj import *
import random

random.seed(2005)

nr = 0

def rnd(x):
    global nr
    r = str(random.randint(1,nr))
    return r

private = {'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
           'server':os.environ.get('BEG_SERVER')}

Fetch('elf0.H','elf',private)

Flow('elf','elf0.H',
     '''
     dd form=native | cut n3=1 n2=1 n1=300 f3=663 f2=67 |
     bandpass flo=5 fhi=60
     ''')

Flow('cmp','elf','window n2=128 n3=1 f3=500')

data='cmp'
n1=800
d1=0.004
n2=128          # data dimensions
o2=50
d2=12.5         # lateral scale
clip=5          # clip percentile
eps=0.1         # regularization
nsp=200         # number of spikes
np = 101
v0 = 1400
dv = 25
nv = 120


Plot(data,'grey unit1=s unit2=m  title=Input')

dips = []
for iv in range(nv):
    dip = 'dip%d' % iv
    v = v0 + iv*dv
    Flow(dip,data,'math output="%g*x2/(x1+0.001)" | clip clip=3' % (4*d2/(v*v*d1)))
    dips.append(dip)
Flow('dips',dips,'cat axis=3 ${SOURCES[1:%d]}' % nv)

dipl = data+'dipl'
Flow(dipl,[data,'dips'],'diplet eps=%g adj=y inv=y dips=${SOURCES[1]}' % eps)

wsort = data+'wsort'
dsort = data+'dsort'
Flow(wsort,dipl,'window n3=1 | put n2=1 n1=%d | sort' % (n1*n2))
Plot(wsort,'scale axis=1 | graph wanttitle=n')

Flow(dsort,dipl,'put n2=1 n3=1 n1=%d | sort' % (n1*n2*np))
Plot(dsort,'scale axis=1 | graph wanttitle=n')

pclip=5.0

thr = data+'thr'
Flow(thr,dipl,'threshold pclip=%g' % pclip)

nr = n1
k1 = string.join(map(rnd,range(nsp)),',')
nr = n2
k2 = string.join(map(rnd,range(nsp)),',')
nr = np
k3 = string.join(map(rnd,range(nsp)),',')

imps = data+'imps'
Flow(imps,[thr,'dips'],
     '''
     spike nsp=%d k1=%s k2=%s k3=%s
     n1=%d n2=%d n3=%d o2=%g d2=%g label2="Half offset" |
     diplet eps=%g dips=${SOURCES[1]} 
     ''' % (nsp,k1,k2,k3,n1,n2,nv,o2,d2,eps),stdin=0)
Plot(imps,'grey unit1=s unit2=m title="Seislet Frame Members" ')

rec = data+'rec'
Flow(rec,[thr,'dips'],'diplet eps=%g dips=${SOURCES[1]}' % eps)
Plot(rec,
     '''
     mutter v0=1300 |
     grey unit1=s unit2=m  title="Inverse Seislet Frame (%g%%)"
     ''' % pclip)

Result(data,[data,imps,rec],'SideBySideAniso')

End()
