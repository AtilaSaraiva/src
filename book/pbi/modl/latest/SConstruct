#
# Forward seismic modeling for a deep-water channel model
#
# Paul Sava & James W. Jennings
# 
# Bureau of Economic Geology
# John A. and Katherine G. Jackson School of Geosciences
# University of Texas at Austin
# University Station, Box X
# Austin, TX 78713-8924
# 
# 512-471-1534 (voice)
# 512-471-0140 (fax)
# mailto:jim.jennings@beg.utexas.edu
# http://www.beg.utexas.edu/staffinfo/jennings01.htm
# 
# August 2005
#
# $Id: SConstruct 1348 2005-08-25 06:22:40Z jennings $
#

from rsfproj import *
import channels
import zomig, spmig

# Index of result names

titles =  {'t'  : 'convolution (depth refl)',       # data results in time
           'tt' : 'convolution (time refl)',
           'f'  : 'exploding reflector (depth refl)',
           'ft' : 'exploding reflector (time refl)',
           'c'  : 'shot record',
           
           'm'  : 'convolution (depth refl)',       # image results in depth
           'mt' : 'convolution (time refl)',
           'i'  : 'exploding reflector (depth refl)',
           'it' : 'exploding reflector (time refl)',
           'j'  : 'shot record'}

# Lists of results to generate

#
# Fast collection:
#   three frequencies
#   2D & 3D convolution
#   2D exploding reflector
#   2D shot record
#

# frq_list = [20,30,40]                           # frequency list
# 
# time_list_2D  = ['t','tt','f','ft','c']         # 2D data in time
# depth_list_2D = ['m','mt','i','it','j']         # 2D images in depth
# 
# time_list_3D  = ['t','tt']                      # 3D data in time
# depth_list_3D = ['m','mt']                      # 3D images in depth
# 
# time_list_3D_slice  = []                        # 2D slices from 3D time data
# depth_list_3D_slice = []                        # 2D slices from 3D depth images

#
# Overnight collection:
#   one frequency
#   2D & 3D convolution
#   2D & 3D exploding reflector
#   2D & 3D shot record
#

frq_list = [20,30,40]                           # frequency list

time_list_2D  = ['t','tt','f','ft','c']         # 2D data in time
depth_list_2D = ['m','mt','i','it','j']         # 2D images in depth

time_list_3D  = ['t','tt','ft']                 # 3D data in time
depth_list_3D = ['m','mt','it']                 # 3D images in depth

time_list_3D_slice  = ['ft']                    # 2D slices from 3D time data
depth_list_3D_slice = ['it']                    # 2D slices from 3D depth images

# Authentication for the private data server

private = { 'server'   : os.environ.get('BEG_SERVER'),
            'login'    : os.environ.get('BEG_LOGIN'),
            'password' : os.environ.get('BEG_PASSWORD')}
            
# Grid parameters

grid_par = {'nx':360, 'dx':15, 'ox':0,      # common x & y grid parameters
            'ny':200, 'dy':15, 'oy':0,
            'xy_pad':40}

res_grid_par = grid_par.copy()              # reservoir z grid parameters
res_grid_par['nz'] = 200
res_grid_par['dz'] =   1
res_grid_par['oz'] = -45

ovr_grid_par = grid_par.copy()              # overburden z grid parameters
ovr_grid_par['nz'] =  50
ovr_grid_par['dz'] =  40
ovr_grid_par['oz'] = 130

# Channel geometrical properties

geo_par = {}

# Amalgamated sand geometrical properties 

# width at channel bottom, fraction of channel top width
geo_par['as_width']   = 0.8

# lateral shift at abs(skew)=1 (channel max bend), fraction of channel top width
geo_par['as_shift']   = 0.8

# height at skew=0 (channel inflection), fraction of channel depth
geo_par['as_height0'] = 0.5

# height at abs(skew)=1 (channel max bend), fraction of channel depth
geo_par['as_height1'] = 0.8

# cross-section shape factor, =1 parabolic, >1 more blunt, <1 more pointy
geo_par['as_shape']   = 1.2   

# Bypass drape geometrical properties 

# bypass drape profile depth, fraction of basic channel depth
# geo_par['bd_depth']  =  0.80    # 1x drape base case

# bypass drape profile z shift, fraction of basic channel depth, positive is down
# geo_par['bd_zshift'] = -0.15    # 1x drape base case

# Margin drape geometrical properties 

# margin drape profile depth, fraction of basic channel depth
# geo_par['md_depth']  =  1.2     # 1x drape base case

# margin drape profile z shift, fraction of basic channel depth, positive is down
# geo_par['md_zshift'] =  0.1     # 1x drape base case

# no drape case
# geo_par['bd_depth']  =  1.00        # bypass drape profile depth
# geo_par['bd_zshift'] =  0.00        # bypass drape profile z shift
# geo_par['md_depth']  =  1.0         # margin drape profile depth
# geo_par['md_zshift'] =  0.0         # margin drape profile z shift

# 1x drape base case
geo_par['bd_depth']  =  0.80        # bypass drape profile depth
geo_par['bd_zshift'] = -0.15        # bypass drape profile z shift
geo_par['md_depth']  =  1.2         # margin drape profile depth
geo_par['md_zshift'] =  0.1         # margin drape profile z shift

# 2x drape case
# geo_par['bd_depth']  =  0.75        # bypass drape profile depth
# geo_par['bd_zshift'] = -0.15        # bypass drape profile z shift
# geo_par['md_depth']  =  1.3         # margin drape profile depth
# geo_par['md_zshift'] =  0.2         # margin drape profile z shift

# 3x drape case
# geo_par['bd_depth']  =  0.70        # bypass drape profile depth
# geo_par['bd_zshift'] = -0.15        # bypass drape profile z shift
# geo_par['md_depth']  =  1.4         # margin drape profile depth
# geo_par['md_zshift'] =  0.3         # margin drape profile z shift

# Sand fraction parameters 

sand_par = {}

# sand fraction in the bypass drape
sand_par['bd_sand'] = 0.3

# sand fraction in the margin drape
sand_par['md_sand'] = 0.2

# sand fraction in the amalgamated sand
sand_par['as_sand'] = 1.0

# sand fraction in non-amalgamated sand at channel top
sand_par['na_sand0'] = 0.4

# sand fraction in non-amalgamated sand just outside the amalgamated sand
sand_par['na_sand1'] = 0.9

# Porosity noise parameters

# Background noise parameters
bk_noise_par = {'taper_switch':1,       # covariance taper switch
                'std_dev': 0.03,        # porosity noise standard devietion
                'alpha':1,              # covariance shape parameter
                'oriu':[1,0,0],         # covariance range orientation vectors
                'oriv':[0,1,0], 
                'oriw':[0,0,1],
                'ru':1000,              # covariance range parameters
                'rv':1000,   
                'rw':   1}

# Amalgamated and non-amalgamated sand noise parameters
sd_noise_par = {'taper_switch':1,       # covariance taper switch
                'std_dev':0.01,         # porosity noise standard devietion
                'alpha':1,              # covariance shape parameter
                'oriu':[1,0,0],         # covariance range orientation vectors
                'oriv':[0,1,0], 
                'oriw':[0,0,1],
                'ru':200,               # covariance range parameters
                'rv':200,   
                'rw':  1}

# Top & bottom taper parameters

# Reservoir taper parameters
res_taper_par = { 'top_h'    :    0,      # thickness (m)
                  'top_phi'  :    0.3500, # porosity (fraction)
                  'top_rho'  :    1.6865, # density (gm/cc)
                  'top_vp'   : 1964.5730, # Vp (m/s)
                  'top_vs'   :  509.7961, # Vs (m/s)
                  'bot_h'    :   20,      # thickness (m)
                  'bot_phi'  :    0.1554, # porosity (fraction)
                  'bot_rho'  :    2.3431, # density (gm/cc)
                  'bot_vp'   : 2429.1460, # Vp (m/s)
                  'bot_vs'   : 1019.5922} # Vs (m/s)

# Overburden taper parameters
ovr_taper_par = { 'top_h'    : 2000,      # thickness (m)
                  'top_phi'  :    0.3500, # porosity (fraction)
                  'top_rho'  :    1.6865, # density (gm/cc)
                  'top_vp'   : 1964.5730, # Vp (m/s)
                  'top_vs'   :  509.7961, # Vs (m/s)
                  'bot_h'    :    0,      # thickness (m)
                  'bot_phi'  :    0.1554, # porosity (fraction)
                  'bot_rho'  :    2.3431, # density (gm/cc)
                  'bot_vp'   : 2429.1460, # Vp (m/s)
                  'bot_vs'   : 1019.5922} # Vs (m/s)

# Available memory size setting for transpose operations (Mb)

memsize = 512

# End of user adjustable settings

# ------------------------------------------------------------
# Make channel model

channels.make_reservoir (   memsize, private,
                            res_grid_par, geo_par,
                            sand_par, bk_noise_par, sd_noise_par,
                            res_taper_par)

channels.make_overburden (memsize, ovr_grid_par, bk_noise_par, ovr_taper_par)

# ------------------------------------------------------------
# Plotting functions

def tplot2d(par,custom=""):
    return '''
    window |
    grey scalebar=y labelrot=n pclip=100
    label1=t label2=x %s
    ''' % (custom)    

def zplot2d(par,custom=""):
    return '''
    window |
    transp |
    grey scalebar=y labelrot=n pclip=100
    label1=z label2=x %s
    ''' % (custom)

# set a t slice 0.2 seconds below the top of the window
t_slice = 0.2

def tplot3d(par,custom1="",custom2=""):
    return '''
    transp memsize=%d plane=13 |
    byte bar=bar.rsf gainpanel=all pclip=99 %s |
    grey3 scalebar=y bartype=h wanttitle=n labelrot=n flat=y
    wherebarlabel=t
    frame1=%d frame2=%d frame3=%d
    point1=0.85 point2=0.90 screenratio=0.7 screenht=9
    label1=y label2=x label3=t %s
    ''' % (par['memsize'],custom1,par['ypad'],par['xpad'],
           t_slice/par['dt_conv'],custom2)

# set a z slice 10 meters up from the bottom of the channels
z_slice = res_grid_par['dz']*res_grid_par['nz']+res_grid_par['oz']-10

def zplot3d(par,custom1="",custom2=""):
    return '''
    byte bar=bar.rsf gainpanel=all pclip=99 %s |
    grey3 scalebar=y bartype=h wanttitle=n labelrot=n flat=y
    wherebarlabel=t
    frame1=%d frame2=%d frame3=%d
    point1=0.85 point2=0.90 screenratio=0.7 screenht=9
    label1=y label2=x label3=z %s
    ''' % (custom1,par['ypad'],par['xpad'],
           z_slice/res_grid_par['dz'],custom2)

# ------------------------------------------------------------
# Seiemic modeling parameters

par = {
        'nt':1000, 'ot':0, 'dt':0.005, 'kt':20,             # time
        'nw':501,  'ow':0,                                  # frequency
        
        'nx':res_grid_par['nx']+2*res_grid_par['xy_pad'],   # array sizes
        'ny':res_grid_par['ny']+2*res_grid_par['xy_pad'], 
        'nz':res_grid_par['nz'],      

        'dx':res_grid_par['dx'],                            # cell sizes
        'dy':res_grid_par['dy'],
        'dz':res_grid_par['dz'],

        'ox':0, 'oy':0, 'oz':0,                             # grid origin
        
        'x_smo':750, 'y_smo':750, 'z_smo':120,              # smoothing
        
        'verb':'y','eps':0.01,'nrmax':1,'dtmax':0.00005,    # migration
        'tmx':16,'tmy':16,'pmx':0,'pmy':0,'misc':'incore=y',
        
        'memsize':memsize                                   # memory size
      }

par['dw']      = 1.0/(par['nt']*par['dt'])
par['ft']      = par['kt']*par['dt']
par['dt_conv'] = par['dt']/2.0

# min & max coordinates
par['xmin'] = par['ox']
par['xmax'] = par['ox'] + (par['nx']-1) * par['dx']
par['ymin'] = par['oy']
par['ymax'] = par['oy'] + (par['ny']-1) * par['dy']
par['zmin'] = par['oz']
par['zmax'] = par['oz'] + (par['nz']-1) * par['dz']

# source coordinates
par['xpad'] = par['nx']/2.0
par['ypad'] = par['ny']/2.0

par['xsou'] = par['ox'] + par['xpad'] * par['dx']
par['ysou'] = par['oy'] + par['ypad'] * par['dy']

# smoothing parameters
par['x_rect'] = par['x_smo']/par['dx']
par['y_rect'] = par['y_smo']/par['dy']
par['z_res_rect'] = par['z_smo']/res_grid_par['dz']
par['z_ovr_rect'] = par['z_smo']/ovr_grid_par['dz']

# ------------------------------------------------------------

def flip():
    return '''
    transp memsize=%(memsize)d plane=23 |
    transp memsize=%(memsize)d plane=12 |
    reverse which=1 opt=i |
    put label1=z label2=x label3=y
    ''' % (par)

# ------------------------------------------------------------
# Density and velocity

# '0' = reservoir
# '1' = overburden

Flow('vp0','res_vp_noise_taper',flip() )
Flow('vp1','ovr_vp_noise_taper',flip() )

Flow('ro0','res_rho_noise_taper',flip() )
Flow('ro1','ovr_rho_noise_taper',flip() )

# density
Flow  ('den','ro0','window n1=%(nz)d | put o1=0' % par)
Result('den','den',
       'transp memsize=%(memsize)d plane=13 |' % par
       + zplot3d(par,'pclip=100 bias=2.1 allpos=y',
                 'barlabel="density" color=j'))
Result('dens','den',
         'transp memsize=%(memsize)d plane=12 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,'bias=2.1 allpos=y title="density" color=j'))

# reservoir velocity
Flow(  'vel','vp0', 'window n1=%(nz)d | put o1=0 o3=0' % par)
Result('vel','vel',
       'transp memsize=%(memsize)d plane=13 |' % par
       + zplot3d(par,'pclip=100 bias=2297 allpos=y',
                 'barlabel="velocity" color=j'))
Result('vels','vel',
         'transp memsize=%(memsize)d plane=12 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,'bias=2297 allpos=y title="velocity" color=j'))

# overburden velocity (can reduce n1=??? for speed)
Flow(  'ovb','vp1', 'window n1=%(nz)d | put o1=0 o3=0' % ovr_grid_par)
Result('ovb','ovb',
       'transp memsize=%(memsize)d plane=13 |' % par
       + zplot3d(par,'pclip=100 bias=1950 allpos=y',
                     'barlabel="overburden velocity" frame3=%(nz)d color=j' 
                     % ovr_grid_par))
Result('ovbs','ovb',
         'transp memsize=%(memsize)d plane=12 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,
         'bias=1950 allpos=y title="overburden velocity" color=j'))

# ------------------------------------------------------------
# Slowness

# reservoir slowness (true)
Flow('slo','vel',
     '''
     math "output=1/input" |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 |
     put label1=x label2=y label3=z
     ''')
Result('slo','slo',
       'transp memsize=%(memsize)d plane=12 |' % par
       + zplot3d(par,'pclip=100 bias=0.0004',
                     'barlabel="slowness" color=j'))
Result('slos','slo',
         'transp memsize=%(memsize)d plane=23 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,'bias=0.0004 title="slowness" color=j'))

# reservoir slowness (smooth)
Flow('slo-s','slo',
     'smooth rect1=%(x_rect)d rect2=%(y_rect)d rect3=%(z_res_rect)d' % (par))
Result('slo-s','slo-s',
       'transp memsize=%(memsize)d plane=12 |' % par
       + zplot3d(par,'pclip=100 bias=0.0004',
                     'barlabel="smoothed slowness" color=j'))
Result('slos-s','slo-s',
         'transp memsize=%(memsize)d plane=23 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,'bias=0.0004 title="smoothed slowness" color=j'))


# overburden slowness (true)
Flow('ovs','ovb',
     '''
     math "output=1/input" |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 |
     put label1=x label2=y label3=z
     ''')
Result('ovs','ovs',
       'transp memsize=%(memsize)d plane=12 |' % par
       + zplot3d(par,'pclip=100 bias=0.00039 allpos=y',
                     'barlabel="overburden slowness" frame3=%(nz)d color=j' 
                     % ovr_grid_par))
Result('ovss','ovs',
         'transp memsize=%(memsize)d plane=23 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,
         'bias=0.00034 allpos=y title="overburden slowness" color=j'))

# overburden slowness (smooth)
Flow('ovs-s','ovs',
     'smooth rect1=%(x_rect)d rect2=%(y_rect)d rect3=%(z_ovr_rect)d' % (par))
Result('ovs-s','ovs-s',
       'transp memsize=%(memsize)d plane=12 |' % par
       + zplot3d(par,'pclip=100 bias=0.00039 allpos=y',
                     '''
                     barlabel="smoothed overburden slowness"
                     frame3=%(nz)d color=j
                     ''' % ovr_grid_par))
Result('ovss-s','ovs-s',
         'transp memsize=%(memsize)d plane=23 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,
         'bias=0.00034 allpos=y title="smoothed overburden slowness" color=j'))
                     
# ------------------------------------------------------------
# Acoustic impedance

# impedance and reflectivity time image parameters
t_window = 0.16
t_frame  = 0.12/par['dt_conv']

# acoustic impedance (depth)
Flow('aim','vel den','math v=${SOURCES[1]} d=${SOURCES[1]} output=v*d', stdin=0)
Result('aim','aim',
       'transp memsize=%(memsize)d plane=13 |' % par
       + zplot3d(par,'pclip=100 bias=4.44 allpos=y',
                     'barlabel="acoustic impedance" color=j'))
Result('aims','aim',
         'transp memsize=%(memsize)d plane=12 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,
         'bias=4.44 allpos=y title="acoustic impedance" color=j'))

# acoustic impedance (time)
Flow('ait',['aim','vel'],
     '''
     depth2time velocity=${SOURCES[1]} dt=%(dt_conv)g nt=%(nt)d | 
     put label1=t
     ''' % par )
Result('ait','ait',
       'window max1=%g |' % (t_window) 
       + tplot3d(par,'pclip=100 bias=4.44 allpos=y',
                     'barlabel="acoustic impedance" color=j frame3=%d' % (t_frame)))
Result('aits','ait',
         'window max1=%g |' % (t_window) 
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + tplot2d(par,
         'bias=4.44 allpos=y title="acoustic impedance" color=j'))

# reflectivity (depth)
Flow('ref','aim','ai2refl')
Result('ref','ref',
       'transp memsize=%(memsize)d plane=13 |' % par
       + zplot3d(par,'','barlabel="reflectivity"'))
Result('refs','ref',
         'transp memsize=%(memsize)d plane=12 |' % par
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + zplot2d(par,'title="reflectivity"'))

# reflectivity (time)
Flow('ret','ait','ai2refl')
Result('ret','ret',
       'window max1=%g |' % (t_window) 
       + tplot3d(par,'',
                 'barlabel="reflectivity" frame3=%d' % (t_frame)))
Result('rets','ret',
         'window max1=%g |' % (t_window) 
       + 'window squeeze=n n3=1 f3=%(ypad)d |' % par
       + tplot2d(par,'title="reflectivity"'))

# ------------------------------------------------------------

# reflectivity (depth)
Flow('r2d','ref','''
                 window squeeze=n n3=1 f3=%(ypad)d | 
                 transp memsize=%(memsize)d plane=12 | 
                 transp memsize=%(memsize)d plane=23
                 ''' % (par) )
Flow('r3d','ref','''
                 window | 
                 transp memsize=%(memsize)d plane=12 | 
                 transp memsize=%(memsize)d plane=23
                 ''' % (par) )

# reflectivity (time)
Flow('rt2d','ret','window squeeze=n n3=1 f3=%(ypad)d' % par)
Flow('rt3d','ret','window')

# velocity
Flow('v2d','vel','window squeeze=n n3=1 f3=%(ypad)d' % par)
Flow('v3d','vel','window')

# overburden slowness
Flow('o2d'  ,'ovs'  ,'window squeeze=n n2=1 f2=%(ypad)d' % par)
Flow('o3d'  ,'ovs'  ,'window')
Flow('o2d-s','ovs-s','window squeeze=n n2=1 f2=%(ypad)d' % par)
Flow('o3d-s','ovs-s','window')

# reservoir slowness
Flow('s2d'  ,'slo'  ,'window squeeze=n n2=1 f2=%(ypad)d' % par)
Flow('s3d'  ,'slo'  ,'window')
Flow('s2d-s','slo-s','window squeeze=n n2=1 f2=%(ypad)d' % par)
Flow('s3d-s','slo-s','window')

# ------------------------------------------------------------
# Wavelet

for frq in frq_list:
    Flow('wav_%d' % (frq),None,
         '''
         spike nsp=1 mag=1 k1=%d
         n1=%d d1=%g o1=0
         n2=1  d2=%g o2=%g
         n3=1  d3=%g o3=%g |
         ricker1 frequency=%s |
         put label1=t label2=x label3=y
         ''' % (par['kt'],par['nt'],par['dt'],
                par['dx'],par['xsou'],par['dy'],par['ysou'],frq) )
#     Result('wav_%d' % (frq),'wav_%d' % (frq),
#            'window n1=50 | graph title="wavelet %dHz"' % (frq))

# ------------------------------------------------------------
# 1-D convolution
# ------------------------------------------------------------

for frq in frq_list:

    # data from reflectivity in depth
    Flow('t2d_%d' % (frq),['r2d','v2d'],
         '''
         transp memsize=%d plane=23 |
         transp memsize=%d plane=12 |
         depth2time velocity=${SOURCES[1]} dt=%g nt=%d |
         ricker1 frequency=%g | put label1=t
         ''' % (memsize,memsize,par['dt_conv'],par['nt'],frq) )
         
    Flow('t3d_%d' % (frq),['r3d','v3d'],
         '''
         transp memsize=%d plane=23 |
         transp memsize=%d plane=12 |
         depth2time velocity=${SOURCES[1]} dt=%g nt=%d |
         ricker1 frequency=%g | put label1=t
         ''' % (memsize,memsize,par['dt_conv'],par['nt'],frq) )
         
    # data from reflectivity in time
    Flow('tt2d_%d' % (frq),'rt2d','ricker1 frequency=%d | put label1=t' % frq )
    Flow('tt3d_%d' % (frq),'rt3d','ricker1 frequency=%d | put label1=t' % frq )
    
    # image from reflectivity in depth
    Flow('m2d_%d' % (frq),['t2d_%d' % (frq),'v2d'],
         '''
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=%(memsize)d plane=12 |
         transp memsize=%(memsize)d plane=23 |
         put label1=z
         ''' % (par) )
    
    Flow('m3d_%d' % (frq),['t3d_%d' % (frq),'v3d'],
         '''
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=%(memsize)d plane=12 |
         transp memsize=%(memsize)d plane=23 |
         put label1=z
         ''' % (par) )
    
    # image from reflectivity in time
    Flow('mt2d_%d' % (frq),['tt2d_%d' % (frq),'v2d'],
         '''
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=%(memsize)d plane=12 |
         transp memsize=%(memsize)d plane=23 |
         put label1=z
         ''' % (par) )
    
    Flow('mt3d_%d' % (frq),['tt3d_%d' % (frq),'v3d'],
         '''
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=%(memsize)d plane=12 |
         transp memsize=%(memsize)d plane=23 |
         put label1=z
         ''' % (par) )

# ------------------------------------------------------------
# SHOT-RECORD
# ------------------------------------------------------------
# The wavelet is embedded in the source wavefield.
# The reflectivity is made of delta functions.

for frq in frq_list:

    # Shot-record modeling/migration (2-D)
    
    # source wavelet (frequency domain)
    Flow('u2d_%d' % (frq),'wav_%d' % (frq),
         '''
         fft1 |
         window squeeze=n n1=%(nw)d min1=%(ow)g |
         pad beg2=%(xpad)d n2out=%(nx)d |
         put label1=w label2=x label3=y |
         transp memsize=250 plane=12 |
         transp memsize=250 plane=23 
         ''' % par)
    
    # C dt one = causal datuming one-way traveltime
    zomig.Cdtone('u2do_%d' % (frq),'u2d_%d' % (frq),'o2d',par)        # source wavefield down through overburden
    spmig.model('e2do_%d' % (frq),'s2d','u2do_%d' % (frq),'r2d',par)  # shot-record modeling in reservoir
    zomig.Cdtone('e2d_%d' % (frq),'e2do_%d' % (frq),'o2d',par)        # receiver wavefield up through overburden
    
    # modeled data from frequency to time
    Flow('c2d_%d' % (frq),'e2d_%d' % (frq),
         '''
         window | transp memsize=250 |
         pad n1out=1001 | fft1 inv=y |
         window min1=%(ft)g | pad n1out=2000 |
         put o1=0 label1=t
         ''' % par)                             # time-domain shot record
                                                
    # migration
    zomig.Cdtone('u2do-s_%d' % (frq),'u2d_%d' % (frq),'o2d-s',par)            # source datuming (causal) in smooth overburden
    zomig.Adtone('e2do-s_%d' % (frq),'e2d_%d' % (frq),'o2d-s',par)            # receiver datuming (anticausal) in smooth overburden
    spmig.image('j2d_%d' % (frq),'s2d-s','u2do-s_%d' % (frq),'e2do-s_%d' % (frq),par)    # shot-record migration in smooth slowness
    
    # Shot-record modeling/migration (3-D)
    
    # source wavelet (frequency domain)
    Flow('u3d_%d' % (frq),'wav_%d' % (frq),
         '''
         fft1 |
         window squeeze=n n1=%(nw)d min1=%(ow)g |
         pad beg2=%(xpad)d n2out=%(nx)d |
         pad beg3=%(ypad)d n3out=%(ny)d |
         put label1=w label2=x label3=y |
         transp memsize=250 plane=12 |
         transp memsize=250 plane=23 
         ''' % par)
    
    # C dt one = causal datuming one-way
    zomig.Cdtone('u3do_%d' % (frq),'u3d_%d' % (frq),'o3d',par)        # source wavefield down through overburden
    spmig.model('e3do_%d' % (frq),'s3d','u3do_%d' % (frq),'r3d',par)  # shot-record modeling in reservoir
    zomig.Cdtone('e3d_%d' % (frq),'e3do_%d' % (frq),'o3d',par)        # receiver wavefield up through overburden
    
    # modeled data from frequency to time
    Flow('c3d_%d' % (frq),'e3d_%d' % (frq),
         '''
         transp memsize=250 plane=23 |
         transp memsize=250 plane=12 |
         pad n1out=1001 | fft1 inv=y |
         window min1=%(ft)g | pad n1out=2000 |
         put o1=0 label1=t
         ''' % par)                             # time-domain shot record
    
    # migration
    zomig.Cdtone('u3do-s_%d' % (frq),'u3d_%d' % (frq),'o3d-s',par)            # source datuming (causal) in smooth overburden
    zomig.Adtone('e3do-s_%d' % (frq),'e3d_%d' % (frq),'o3d-s',par)            # receiver datuming (anticausal) in smooth overburden
    spmig.image('j3d_%d' % (frq),'s3d-s','u3do-s_%d' % (frq),'e3do-s_%d' % (frq),par)    # shot-record migration in smooth slowness

# ------------------------------------------------------------
# EXPLODING REFLECTOR
# ------------------------------------------------------------

for frq in frq_list:

    # Exploding reflector modeling/migration (2-D)
    zomig.model('d2do_%d'  % (frq),'s2d','m2d_%d'  % (frq),par)     # modeling in the reservoir
    zomig.model('dt2do_%d' % (frq),'s2d','mt2d_%d' % (frq),par)     # modeling in the reservoir
    # C dt two = causal datuming (up) two-way traveltime
    zomig.Cdttwo('d2d_%d'  % (frq),'d2do_%d'  % (frq),'o2d',par)    # upward continuation in overburden
    zomig.Cdttwo('dt2d_%d' % (frq),'dt2do_%d' % (frq),'o2d',par)    # upward continuation in overburden
    
    # modeled exploding reflector data from frequency to time
    Flow('f2d_%d' % (frq),'d2d_%d' % (frq),
         '''
         window | transp memsize=250 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )
    Flow('ft2d_%d' % (frq),'dt2d_%d' % (frq),
         '''
         window | transp memsize=250 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )
    
    # migration
    zomig.Adttwo('d2do-s_%d' % (frq),'d2d_%d' % (frq), 'o2d-s',par)   # downward continuation in (smooth) overburden
    zomig.image('i2d_%d'  % (frq),'s2d-s','d2do-s_%d' % (frq), par)
    zomig.image('it2d_%d' % (frq),'s2d-s','dt2do_%d'  % (frq), par)
    
    
    # Exploding reflector modeling/migration (3-D)
    zomig.model('d3do_%d'  % (frq),'s3d','m3d_%d'  % (frq),par)     # modeling in the reservoir
    zomig.model('dt3do_%d' % (frq),'s3d','mt3d_%d' % (frq),par)     # modeling in the reservoir
    # C dt two = causal datuming (up) two-way traveltime
    zomig.Cdttwo('d3d_%d'  % (frq),'d3do_%d'  % (frq),'o3d',par)    # upward continuation in overburden
    zomig.Cdttwo('dt3d_%d' % (frq),'dt3do_%d' % (frq),'o3d',par)    # upward continuation in overburden
    
    # modeled exploding reflector data from frequency to time
    Flow('f3d_%d' % (frq),'d3d_%d' % (frq),
         '''
         transp memsize=250 plane=23 |
         transp memsize=250 plane=12 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )
    Flow('ft3d_%d' % (frq),'dt3d_%d' % (frq),
         '''
         transp memsize=250 plane=23 |
         transp memsize=250 plane=12 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )
    
    # migration
    zomig.Adttwo('d3do-s_%d' % (frq),'d3d_%d' % (frq), 'o3d-s',par)   # downward continuation in (smooth) overburden
    zomig.image('i3d_%d'  % (frq),'s3d-s','d3do-s_%d' % (frq), par)
    zomig.image('it3d_%d' % (frq),'s3d-s','dt3do_%d'  % (frq), par)

# ------------------------------------------------------------
# Results

t_pad = 1.8/par['dt_conv']

windows = {'t'  : 'pad beg1=%d | put o1=0 | window min1=1.7 max1=2.5 |' % t_pad,
           'tt' : 'pad beg1=%d | put o1=0 | window min1=1.7 max1=2.5 |' % t_pad,
           'f'  : '                         window min1=1.7 max1=2.5 |',
           'ft' : '                         window min1=1.7 max1=2.5 |',
           'c'  : '                         window min1=1.7 max1=2.5 |'}

# 2D results in time
for i in time_list_2D:
    for frq in frq_list:
        Result ('%s2d_%d' % (i,frq),'%s2d_%d' % (i,frq),
                windows[i] 
                + tplot2d(par,'title="%s %dHz"' % (titles[i],frq) ))

# 2D results in depth
for i in depth_list_2D:
    for frq in frq_list:
        Result ('%s2d_%d' % (i,frq),'%s2d_%d' % (i,frq),
                zplot2d(par,'title="%s %dHz"' % (titles[i],frq) ))

# 3D slices in time
for i in time_list_3D_slice:
    for frq in frq_list:
        Result ('%s3ds_%d' % (i,frq),'%s3d_%d' % (i,frq),
                'window squeeze=n n3=1 f3=%(ypad)d |' % (par) + windows[i] 
                + tplot2d(par,'title="3D %s %dHz"' % (titles[i],frq) ))

# 3D slices in depth
for i in depth_list_3D_slice:
    for frq in frq_list:
        Result ('%s3ds_%d' % (i,frq),'%s3d_%d' % (i,frq),
                'window squeeze=n n2=1 f2=%(ypad)d |' % (par)
                + zplot2d(par,'title="3D %s %dHz"' % (titles[i],frq) ))

# 3D results in time
for i in time_list_3D:
    for frq in frq_list:
        Result ('%s3d_%d' % (i,frq),'%s3d_%d' % (i,frq),
                windows[i] 
                + tplot3d(par,'','title="%s %dHz"' % (titles[i],frq) ))

# 3D results in depth
for i in depth_list_3D:
    for frq in frq_list:
        Result ('%s3d_%d' % (i,frq),'%s3d_%d' % (i,frq),
                'transp plane=12 |'
                + zplot3d(par,'','title="%s %dHz"' % (titles[i],frq) ))

# ------------------------------------------------------------

End()

