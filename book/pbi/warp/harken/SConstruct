from rsfproj import *

import os
private = {'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
           'server':os.environ.get('BEG_SERVER')}


###########################################################################
#
# Data
#
###########################################################################
for case in (1,2):
    title = ['Fast','Slow'][case-1]
    output = 's%d' % case
    input = output + '_mig.sgy'
    cube = output + 'cube'
    line = output + 'line'
    Fetch(input,'harken',private)
    Flow([output,'./'+output+'hhead','./'+output+'bhead',output+'head'],input,
         '''segyread tape=$SOURCE
         hfile=${TARGETS[1]} bfile=${TARGETS[2]} tfile=${TARGETS[3]}
         fldr=216 tracf=220
         ''',stdin=0)
    Flow(cube,output,'intbin')
    Result(cube,
           '''byte gainpanel=all |
           grey3 flat=n frame3=40 frame2=40 frame1=500 title=%s
           point1=0.75 point2=0.75
           label1="Time (s)" label2="In-line" label3="Cross-line"
           ''' % title)
    #    Flow(line,cube,'window n3=1 f3=40')
    Flow(line,cube,'window n2=1 f2=50')
    Plot(line,line,
         'grey title=%s lanel1="Time (s)" label2="In-line" ' % title)
Result('sline','s1line s2line','SideBySideAniso')

###########################################################################
#
# Line Processing
#
###########################################################################

def warpscan(ng,g0,gmax,rect1=1,rect2=1,rect3=1,rect4=1):
    dg = (gmax-g0)/(ng-1)
    return '''
    warpscan other=${SOURCES[1]} niter=20
    ng=%d dg=%g g0=%g rect1=%d rect2=%d rect3=%d rect4=%d |
    math output='(1+input)^4' |
    window''' % (ng,dg,g0,rect1,rect2,rect3,rect4)

Flow('scan2','s2line s1line',warpscan(51,1.00,1.05,20,1,3))

def scanplot3(frame3):
    return '''
    byte gainpanel=all allpos=y |
    grey3 frame1=500 frame2=%d frame3=40 color=j flat=n
    label1="Time (s)" label3="In-line" label2="Relative Gamma"
    title="Gamma Scan"
    ''' % frame3

Result('scan2',scanplot3(16))

def blindpick2(rect1=10,rect2=10):
    return '''
    blindpick rect1=%d rect2=%d | window |
    math T=${SOURCES[1]} output="(input-1)*T"
    ''' % (rect1,rect2)

Flow('mask2',None,'spike n2=81 n1=501 | pad n1=1001 beg1=250')

Flow('time2',None,
     'math o1=0 d1=0.004 n1=1001 o2=20 d2=1 n2=81 output=x1')

Flow('pick2','scan2 time2',blindpick2(100,10))

###################################################################
# WARPING
###################################################################

def warp1(niter,rect1=1,rect2=1,rect3=1):
    return '''warp1 other=${SOURCES[1]} warpin=${SOURCES[2]}
    warpout=${TARGETS[1]}
    verb=1 nliter=%d noamp=1 rect1=%d rect2=%d rect3=%d
    ''' % (niter,rect1,rect2,rect3)

Flow(['wline','warp2'],
     ['s2line','s1line','pick2'],
     warp1(20,50,100))

####################################################################
# GAMMA SCAN
####################################################################

Flow('scan22','wline s1line',warpscan(31,0.985,1.015,20,1,3))
Result('scan22','scan22',scanplot3(15))
Flow('pick22',['scan22','time2','mask2'],blindpick2(100,10))

###################################################################
# FINAL WARPING
###################################################################

Flow(['wline2','warp22'],
     ['wline','s1line','pick22'],
     warp1(20,50,100))
Flow('Warp','warp2 warp22','warpadd add=${SOURCES[1]}')

for file in Split('s1line s2line wline2'):
    Flow([file+'-2',file+'0'],file,
         '''
         pad end2=1 > ${TARGETS[1]} &&
         pad < $SOURCE beg2=1 | add ${TARGETS[1]} |
         window f2=1 j2=2 min1=1.6 max1=2.4
         ''')

def interleave(title):
    return '''
     interleave axis=2 ${SOURCES[1]} |
     wiggle poly=y transp=y yreverse=y
     title="Interleaved (%s)" label1="Time (s)" label2="In-line"
     ''' % title

Plot('inter0','s1line-2 s2line-2',interleave('Before'))
Plot('inter2','s1line-2 wline2-2',interleave('After'))
Result('hinter','inter0 inter2','OverUnderAniso')

Result('hinter0','s1line-2 s2line-2',interleave('Before'))
Result('hinter2','s1line-2 wline2-2',interleave('After'))

#############################################################################
#
# Cube processing
#
#############################################################################

Flow('Wwarp3','Warp','spray axis=3 n=81 o=20 d=1')
Flow('wcube0',['s2cube','s1cube','Wwarp3'],
     'warp1 other=${SOURCES[1]} warpin=${SOURCES[2]} verb=1 nliter=0')

####################################################################
# GAMMA SCAN
####################################################################

Flow('s2cube2','s2cube','window j2=2 j3=2')
Flow('s1cube2','s1cube','window j2=2 j3=2')

Flow('scan3','s2cube2 s1cube2',warpscan(8,1,1.03,20,1,1,1))

Flow('time3','time2','spray axis=3 n=81 o=20 d=1')

## def blindpick3(rect1=10,rect2=10,rect3=10):
##     return '''
##     blindpick rect1=%g rect2=%g rect3=%g |
##     math output=input-1 |
##     spline o1=1 d1=0.004 n1=501 |
##     window |
##     pad n1=1001 beg1=250 |
##     miss3 eps=0 mask=${SOURCES[2]} niter=50 rect1=100 rect2=10 rect3=10 |
##     math T=${SOURCES[1]} output="input*T"
##     ''' % (rect1,rect2,rect3)

## Flow('pick3',['scan3','time3','mask3'],
##      'transp plane=24 | %s | transp plane=23' %
##      blindpick3(2,8,8))

def blindpick3(rect1=10,rect2=10,rect3=10):
    return '''
    blindpick rect1=%d rect2=%d rect3=%d | window |
    transp          | spline n1=81 d1=1 o1=20 | transp          |
    transp plane=13 | spline n1=81 d1=1 o1=20 | transp plane=13 |
    math T=${SOURCES[1]} output="(input-1)*T"
    ''' % (rect1,rect2,rect3)

Flow('pick3','scan3 time3',blindpick3(100,5,5))

###################################################################
# WARPING
###################################################################

Flow(['wcube','warp3'],
     ['wcube0','s1cube','pick3'],
     warp1(2,50,100,100))
Flow('wwarp','warp3 Wwarp3','warpadd add=${SOURCES[1]}')

Flow('frac','wwarp',
     '''
     smoothder |
     math output="0.5*((input+1)*(input+1)-1)" 
     ''')
Result('frac',
       '''
       window min1=1.7 max1=2.1 |
       byte |
       grey3 flat=n frame3=40 frame2=40 frame1=40
       title="Fracture Intensity Attribute"
       point1=0.5 point2=0.5 color=j 
       label1="Time (s)" label2="In-line" label3="Cross-line"
       ''')

def plot3(title):
    return '''
    byte |
    grey3 flat=y frame3=40 frame2=40 frame1=500 title="%s"
    point1=0.5 point2=0.5
    label1="Time (s)" label2="In-line" label3="Cross-line"
    ''' % title

Result('s1cube',plot3('Fast'))
Result('s2cube',plot3('Slow'))
Result('wcube',plot3('Warped Slow'))

#Result('before','s1cube s2cube','SideBySideAniso')
#Result('after','s1cube wcube','SideBySideAniso')

###########################################################################
End()
