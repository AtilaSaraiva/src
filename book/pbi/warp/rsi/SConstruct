from rsfproj import *
import string, math

private = {'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
           'server':os.environ.get('BEG_SERVER')}

# input data

dat = {
    'ps': 'crop_resamp_EI_PS_mig.sgy',
    'pz': 'crop_EI_PZ_mig.sgy'
    }

for case in dat.keys(): # loop over ('ps','pz')
    Fetch(dat[case],'rsi',private)
    
    # convert to RSF format

    # "nvs" will be col no. (crossline)
    # "nhs" will be row no. (inline)
    Flow([case,'t'+case,'a.'+case,'b.'+case],dat[case],
         '''
         segyread tape=$SOURCE
         tfile=${TARGETS[1]} hfile=${TARGETS[2]} bfile=${TARGETS[3]}
         nvs=188 nhs=190
         ''',stdin=0)

    # put in a cube
    Flow(case+'cube',case,
         '''
         intbin yk=nvs xk=nhs |
         put label1=Time unit1=s label2=In-line label3=Cross-line
         ''')

    # cube display
    Result(case,case+'cube',
       '''
       byte gainpanel=50 |
       grey3 title="%s" point1=0.8 point2=0.8
       frame3=50 frame2=200 frame1=%d 
       ''' % (string.upper(case),(1750,1000)[case=='pz']))

# table of PP time versus PS time
nails = Split('''
2.236 4.460
''')

#3.540 6.680
#3.656 6.968
#3.944 7.436

for tpp in xrange (3600,4000,50):
    tps = 5727*math.log(tpp)-40018 # Tury's formula
    nails.append(str(0.001*tpp))
    nails.append(str(0.001*tps))

# Display nails
Flow('nails.asc',None,
     'echo %s n1=2 n2=%d in=$TARGET data_format=ascii_float' %
     (string.join(nails,' '),len(nails)/2))
Flow('nails','nails.asc','dd form=native')
Flow('nreal','nails','window n1=1')
Flow('nimag','nails','window f1=1')
Plot('nails','nreal nimag',
     '''
     cmplx ${SOURCES[:2]} |
     graph min1=0 max1=6 min2=0 max2=8 symbol='o' wanttitle=n
     label1="PP time (s)" label2="PS time (s)" plotcol=5
     symbolsz=15
     ''',stdin=0)

# Window PZ in time to 6 seconds 
Flow('pzcube2','pzcube','window max1=6 | costaper nw1=200')


# Fit a line to nails

Flow('fit','nails pzcube2','linefit pattern=${SOURCES[1]}')


# Plot a line with nails

Plot('fit','graph min1=0 max1=6 min2=0 max2=8 title="Line Fit" ')
Result('nails','fit nails','Overlay')

# Expand initial warp function to a cube
Flow('fit0','fit',
     '''
     math output=input-x1 |
     spray axis=2 n=401 d=1 o=710 |
     spray axis=3 n=101 d=1 o=2320 
     ''')

# load the warp package
import sys
sys.path.append('/raid1/rsf-test/src/book/packages')
import warp

warp.warp3('sei',    # naming prefix
           'pzcube2',# PP cube
           'pscube', # PS cube
           'fit0',   # initial warping function
           nx=401,   # cube inline dimensions 
           ny=101,   # cube crossline dimensions 
           j2=8,     # inline subsampling for gamma scan
           j3=8,     # crossline subsampling for gamma scan
           an=1,
           tmin=0,   # min time
           tmax=6,   # max time
           inter=2,   # partial stacking for interlace
           trace=910, # example inline
           line=2370, # example crossline
           o2=710,    # first inline
           o3=2320,   # first crossline
           dt=0.004,  # time sampling
           g0=0.95, # min residual gamma for scan
           gmin=1.5,  # min vp/vs (for display)
           gmax=3.5,  # max vp/vs (for display)
           pmax=1.005, # min allowed residual gamma
           ng=51,   # number of residual gammas to scan
           rect1=50, # smoothing radius in time
           rect2=25, # smoothing radius inline
           rect3=25, # smoothing radius crossline
           fmin=10, # min frequency (for display)
           fmax=50, # max frequency (for display)
           frect=10, # smoothing radius for frequencies
           frame1=1000, # time slice (for display)
           iter=2,  # number of iterations
           clip=6.5 # data clip for display
           )

End()
