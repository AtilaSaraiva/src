import sys, os, string

sys.path.append(os.path.join(os.environ.get('RSFROOT'),'lib'))
from rsfproj import *
###########################################################################
Book()

sizes = (10,100,1000)

graph = "graph plotfat=10 label1='Time (s)' wanttitle=n labelsz=10 label2=%s"

def vgraph(min1,max1,min2,max2):
    return '''
    graph wanttitle=n min1=%g max1=%g min2=%g max2=%g
    wherexlabel=t wheretitle=b crowd1=0.8 labelsz=10
    ''' % (min1,max1,min2,max2)

grey2 = '''grey transp=n label1=' ' wherexlabel=b wheretitle=t
labelsz=20 titlesz=20 wantaxis2=n crowd1=0.9'''

difplot = '''
add scale=1,-1 ${SOURCES[1]} |
cat ${SOURCES[0]} ${SOURCES[1]} axis=2 |
dots gaineach=0 Xscreenwd=9.225 Xscreenht=5.2 Xyyscale=0.8
labels="Difference:PS warped:PP" label1="Time (s)"
'''
reshape = '''
reshape in2=${SOURCES[1]}
ma=${SOURCES[2]} ma2=${SOURCES[3]} out2=${TARGETS[1]} |
stack norm=no
'''
warp0 = '''
warp1 other=${SOURCES[1]} warpin=${SOURCES[2]} 
verb=1 nliter=0
'''

def warp1(niter,rect):
    return '''warp1 other=${SOURCES[1]} warpin=${SOURCES[2]}
    warpout=${TARGETS[2]} amplout=${TARGETS[3]} noamp=1
    verb=1 nliter=%d rect1=%d > ${TARGETS[1]};
    warpadd < ${SOURCES[3]} add=${TARGETS[2]}''' % (niter,rect)

def warpscan(ng,gmin):
    return '''warpscan other=${SOURCES[1]}
    ng=%d g0=%g dg=0.01 nw=20 w=200 |
    math output='(1+input)^4' | window''' % (ng,gmin)

def blindpick(eps=1):
    return 'blindpick2 eps=%g | spline pattern=${SOURCES[1]}' % eps

rick = 'spectra | ricker niter=1000 ma=$TARGET m=20'

def greyscan(min,max):
    return '''grey title="Warping Scan" min2=%g max2=%g allpos=y min1=0 max1=1
    color=j pclip=100 label1="Time (s)" label2="Gamma"
    wanttitle=n label1='Time' label2="Gamma"''' % (min,max)

def pickplot(min,max):
    return '''graph transp=y min2=%g max2=%g min1=0 max1=1
    yreverse=y plotcol=7
    wantaxis=n wanttitle=n''' % (min,max)

warp2gamma = '''
headermath warp=0 output="warp+T" | smoothder |
headermath gamma=0 output="2*gamma-1"
'''

all = ['pp','ps'] #,'ss']

Flow('time',None,'spike n1=1101 d1=0.001')

Flow('cswrp', 'time',"headermath output='T*0.5'")
Flow('cswrp1','time',"headermath output='T*0.75'")
Flow('cswrp2','cswrp','window n1=2 j1=550 | remap1 pattern=$SOURCE')

Flow('sswrp1','cswrp','cp $SOURCE $TARGET',stdin=0,stdout=0)
Flow('sswrp2','sswrp','window n1=3 j1=550 | spline pattern=$SOURCE')

Flow('sswrp',['time','sswrp0'],
          '''
          headermath output='sin(4.*acos(-1.)*T)/(40.*acos(-1.))' |
          add ${SOURCES[1]}
          ''')

Flow('hswrp','time',"headermath output='log(1+25*T/6)-T/2'")
#Flow('hswrp0','time',
#          "headermath output='T*(2.361817 - 1.2195896*T)'")
#          "headermath output='T*(3.666666-T*(4.213101 - 1.688662*T))'")
#Flow('hswrp1','hswrp',
#          'window n1=3 j1=550 | spline par=hswrp.rsf')
htable = '''
0 0
0.45 0.8311
1.1 1.17
'''
Flow('htable',None,
     'echo %s n1=2 n2=3 in=$TARGET data_format=ascii_float' %
     string.join(Split(htable),' '))
Flow('hswrp1',['htable','hswrp'],
          'dd data_format=native_float | spline pattern=${SOURCES[1]}')
Flow('hswrp2','hswrp',
     'window n1=4 j1=366 | spline pattern=${SOURCES[1]}')

gmin = {'c':[0.6,0.6,0.8],'s':[0.8,0.8,0.8],'h':[0.65,0.93,0.95]}
ng = {'c':[61,61,41],'s':[41,41,41],'h':[41,51,41]}
gmax = {'c':[1.2,1.2,1.2],'s':[1.2,1.2,1.2],'h':[1.05,1.4,1.35]}
eps = {'c':[1,1,1],'s':[0.1,0.1,0.1],'h':[0.8,0.05,0.1]}
ppmax = {'c':1.1,'s':1.1,'h':1.1}
psmax = {'c':1.65,'s':1.65,'h':2.3}
ssmax = {'c':2.2,'s':2.2, 'h':3.5}
vmax = {'c':3,'s':3,'h':10}

Flow('zero3',None,'spike n1=2 mag=0')
Flow('ones3',None,'spike n1=2')
for mode in ['pp','ps']:
    if mode == 'pp':
        max = ppmax['h']
        pick = 0.45
    else:
        max = psmax['h']
        pick = 1.2811
    nail = mode+'nail'
    Flow(nail,None,
         'echo 0 %g n1=2 data_format=ascii_float in=$TARGET' % pick)
    Plot([nail,mode+'real',mode+'zero',mode+'ones'],
         [nail,'zero3','ones3'],
         '''dd data_format=native_float > ${TARGETS[1]};
         cmplx ${TARGETS[1]} ${SOURCES[1]} > ${TARGETS[2]};
         cmplx ${TARGETS[1]} ${SOURCES[2]} > ${TARGETS[3]};
         cat axis=2 ${TARGETS[2]} ${TARGETS[3]} | transp |
         graph min1=0 max1=%g plotcol=6 plotfat=10 crowd1=0.9
         wantaxis=n wanttitle=n
         ''' % max)

window1 = 'window1 nw=4 w=400'

for f in ['h']: # ['h']: # ['c','s']: # ['h']
    graph2 = vgraph(0,1,1,vmax[f])
  
    for x in ['']+map(str,range(3)):
        Flow(f+'spps'+x,f+'swrp'+x,warp2gamma)
        Plot(f+'spps'+x,f+'spps'+x,graph2)

    for size in [1000]: # sizes:
        def sized(name):
            return "%s%s%d" % (f,name,size)
    
        synth = sized("synth")
        vpvs = sized("vpvs")
        Flow([synth,vpvs],None,
                  "randrefl nr=%d vpvs=${TARGETS[1]} func=%s" % (size,f))
        Flow(sized("pp"),synth,"window n2=1 f2=0 max1=%g" % ppmax[f])
        Flow(sized("ps"),synth,"window n2=1 f2=1 max1=%g" % psmax[f])
        Flow(sized("ss"),synth,"window n2=1 f2=2 max1=%g" % ssmax[f])
        
        env = sized("env")
        Flow(env,synth,"envelope")
        Flow(sized("epp"),env,"window n2=1 f2=0 max1=%g" % ppmax[f])
        Flow(sized("eps"),env,"window n2=1 f2=1 max1=%g" % psmax[f])
        Flow(sized("ess"),env,"window n2=1 f2=2 max1=%g" % ssmax[f])
        
        ####################################################################
        # GRAPH PLOT
        ####################################################################
        def plusenv(name):
            return string.join(map (sized, [name,'e' + name]),' ')
        # [pp,ps,ss] = map(plusenv,all)
        [pp,ps] = map(plusenv,all)
        Plot(sized("pp"),pp,
                  "cat axis=2 $SOURCE | " + graph % 'PP',stdin=0)
        Plot(sized("ps"),ps,
                  "cat axis=2 $SOURCE | " + graph % 'PS',stdin=0)
        # Plot(sized("ss"),ss,
        #           "cat axis=2 $SOURCE | " + graph % 'SS',stdin=0)
        Combine(synth,map(sized,all),'OverUnderAniso',result=1,
                     pstexpen='color=y fat=1 fatmult=1.5 invras=n')
        Flow([vpvs+'0',vpvs+'1',vpvs+'2'],[synth,vpvs],
                  '''
                  window n2=1 f2=0 < ${SOURCES[1]} > ${TARGETS[1]};
                  window n2=1 f2=1 < ${SOURCES[1]} > ${TARGETS[2]};
                  cmplx ${TARGETS[1]} ${TARGETS[2]}
                  ''',stdin=0)
        Plot(vpvs,vpvs+'0',
              '''
              graph symbol='*' label1='Time (s)' label2='Vp/Vs'
              wanttitle=n wherexlabel=t wheretitle=b crowd1=0.8 labelsz=10 
              min1=0 max1=1 min2=1 max2=%d symbolsz=8 plotcol=5
              ''' % vmax[f])

        ##################################################################
        # GREYSCALE PLOT
        ##################################################################
        for x in all:
            grey = grey2 + ' title=%s'
            if x == 'ss': grey = grey + ' label1="Time (s)"'
            Plot(sized('g' + x),sized(x),grey % string.upper(x))
            Combine(sized('g-' + x),[sized('g' + x),x + 'nail'],'Overlay')
        Combine(sized('bot'),map(lambda x: sized('g-' + x),all),
                     'OverUnderAniso')
        Combine(vpvs,[vpvs,sized('bot')],'OverUnderAniso',result=1,
                     pstexpen='color=n fat=1 fatmult=1.5 invras=y')

        ##################################################################
        # EXACT WARPING
        ##################################################################
        pp = sized('pp')
        morph = sized('morph')
        Flow(morph,[sized('ps'),pp,f+'swrp'],warp0)

        Plot(sized('morph-bot'),f + 'swrp',
                  '''math output=0 |
                  graph plotcol=2
                  label1=' ' label2='Time Error (s)'
                  wanttitle=n wherexlabel=t wheretitle=b 
                  min1=0 max1=1 crowd=0.8 labelsz=10
                  title="Traveltime Error (s)"
                  ''')
        Combine(sized('morph-top'),[vpvs,f + 'spps'],'Overlay')
        Combine(morph,map(lambda x: sized('morph-'+x),['top','bot']),
                     'OverUnderAniso',result=1)
        
        Result(sized('morphs'),[morph,pp],difplot,pstexpen='color=y')

        ##################################################################
        # STATIONARY SPECTRAL BALANCING
        ##################################################################
        prick = sized('pricks')
        srick = sized('sricks')
        Flow(prick,pp,rick,stdout=0)
        Flow(srick,morph,rick,stdout=0)

        pwin = pp
        swin = morph
        
        pp = sized('pmorphs')
        morph = sized('smorphs')
        Flow([pp,morph],[pwin,swin,prick,srick],reshape)        
        Result(sized('morphss'),[morph,pp],difplot)
        
        ##################################################################
        # NON-STATIONARY SPECTRAL BALANCING
        ##################################################################
        pwin = sized('pwin')
        swin = sized('swin')
        prick = sized('prick')
        srick = sized('srick')
        Flow(pwin,pp,window1)
        Flow(swin,morph,window1)
        Flow(prick,pwin,rick,stdout=0)
        Flow(srick,swin,rick,stdout=0)
        
        pp = sized('pmorph')
        morph = sized('smorph')
        resh = sized('resh')
        Flow([pp,resh],[pwin,swin,prick,srick],reshape)
        Flow(morph,sized('resh'),"stack norm=no")

        Result(sized('morphsss'),[morph,pp],difplot)
#
#        Combine(sized('morph1-'),map(sized,["morph-top","morph1-bot"]),
#                     'OverUnderAniso',result=1)
        
        ####################################################################
        # GAMMA SCAN
        ####################################################################
        scan = sized('scan')
        Flow(scan,[morph,pp],warpscan(41,0.8))
        Plot(scan,scan,greyscan(0.8,1.2))

        ####################################################################
        # GAMMA PICK
        ####################################################################
        pick = sized('pick')
        Flow(pick + '0',[scan,pp],blindpick(1))
        Flow(pick,pick + '0','headermath g=0 output="(g-1)*T"')
        Plot(pick,pick + '0',pickplot(0.8,1.2))
        Combine(scan,[scan,pick],'Overlay',result=1,
                     pstexpen='color=y fat=1 fatmult=1.5 invras=y')

        ####################################################################
        # ADDITIONAL WARPING
        ####################################################################
        warp = sized('warp1-')
        morph1 = sized('morph1-')
        Flow([warp,morph1,'varp6','ampl6'],[morph,pp,pick,f+'swrp'],
                  warp1(2,350))
        Plot(warp,warp,warp2gamma + ' | ' + graph2)
        Combine(sized('morph2-top'),[vpvs,warp],'Overlay')
        def botplot(min,max):
            return '''add scale=1,-1 ${SOURCES[1]} | scale dscale=1000 |
            graph plotcol=2
            label1=' ' label2='Time Error (ms)'
            wanttitle=n wherexlabel=t wheretitle=b
            crowd=0.8 labelsz=10
            min1=0 max1=1 min2=%g max2=%g
            title="Traveltime Error (s)"
            ''' % (min,max)
        Plot(sized('morph2-bot'),[warp,f + 'swrp'],botplot(-4,4))
        Combine(sized('morph2-'),
                     map(lambda x: sized('morph2-'+x),['top','bot']),
                     'OverUnderAniso',result=1)
        
        Result(sized('morph2-s'),[morph1,pp],difplot)
 

        for st in [1]: # [1,2]: # range(3):
            def start(name):
                return sized(name) + str(st)
            swrp = '%sswrp%d' % (f,st)
            spps = '%sspps%d' % (f,st)
            
            # WRONG START
            pp = sized('pp')
            morph = start('morphl')
            Flow(morph,[sized('ps'),pp,swrp],warp0)

            Plot(start('morphl-bot'),[swrp,f + 'swrp'],botplot(-100,100))
                      
            Combine(start('morphl-top'),[vpvs,spps],'Overlay')
            Combine(morph,map(lambda x: start('morphl-'+x),['top','bot']),
                         'OverUnderAniso',result=1)

            Result(start('morphls'),[morph,pp],difplot)
        
            # SPECTRAL BALANCING
            pwin = start('pwinl')
            swin = start('swinl')
            prick = start('prickl')
            srick = start('srickl')
            Flow(pwin,pp,window1)
            Flow(swin,morph,window1)
            Flow(prick,pwin,rick,stdout=0)
            Flow(srick,swin,rick,stdout=0)
        
            pp = start('pmorphl')
            morph = start('smorphl')
            resh = start('reshl')
            Flow([pp,resh],[pwin,swin,prick,srick],reshape)
            Flow(morph,resh,"stack norm=no")
            Result(start('morphl1-'),[morph,pp],difplot)

            # GAMMA SCAN
            scan = start('scanl')
            Flow(scan,[morph,pp],warpscan(ng[f][st],gmin[f][st]))
            Plot(scan,scan,greyscan(gmin[f][st],gmax[f][st]))

            # GAMMA PICK
            pick = start('pickl')
            Flow(pick + '0',[scan,pp],blindpick(eps=eps[f][st]))
            Flow(pick,pick + '0','headermath g=0 output="(g-1)*T"')
            Plot(pick,pick + '0',pickplot(gmin[f][st],gmax[f][st]))
            Combine(scan,[scan,pick],'Overlay',result=1,
                         pstexpen='color=y fat=1 fatmult=1.5 invras=y')

            # WARPING CORRECTION
            warp = start('warpl1-')
            morph1 = start('morphl1-')
            Flow([warp,morph1,'varp7','ampl7'],[morph,pp,pick,swrp],
                 warp1(1,500))
            Plot(warp,warp,warp2gamma + '| ' + graph2)
            Combine(start('morphl2-top'),[vpvs,warp],'Overlay')

            Plot(start('morphl2-bot'),[warp,f + 'swrp'],botplot(-20,20))
            
            Combine(start('morphl2-'),
                         map(lambda x: start('morphl2-'+x),['top','bot']),
                         'OverUnderAniso',result=1)

            Result(start('morphl2s'),[morph1,pp],difplot)

            # MOVE CLOSER
            pp = sized('pp')
            morph = start('morphr')
            Flow(morph,[sized('ps'),pp,warp],warp0)
            Plot(start('morphr-bot'),[morph,pp],difplot)
            Combine(morph,map(start, ['morphl2-top','morphr-bot']),
                         'OverUnderAniso',result=1)

            # SPECTRAL BALANCING
            pwin = start('pwinr')
            swin = start('swinr')
            prick = start('prickr')
            srick = start('srickr')
            Flow(pwin,pp,window1)
            Flow(swin,morph,window1)
            Flow(prick,pwin,rick,stdout=0)
            Flow(srick,swin,rick,stdout=0)
            
            pp = start('pmorphr')
            morph = start('smorphr')
            resh = start('reshr')
            Flow([pp,resh],[pwin,swin,prick,srick],reshape)
            Flow(morph,resh,"stack norm=no")
            Plot(start('morphr1-bot'),[morph,pp],difplot)
            Combine(start('morphr1-'),
                     map(start,["morphl2-top","morphr1-bot"]),
                     'OverUnderAniso',result=1)

            # GAMMA SCAN
            scan = start('scanr')
            Flow(scan,[morph,pp],warpscan(41,0.8))
            Plot(scan,scan,greyscan(0.8,1.2))

            # GAMMA PICK
            pick = start('pickr')
            Flow(pick + '0',[scan,pp],blindpick(eps=eps[f][st]/2))
            Flow(pick,pick + '0','headermath g=0 output="(g-1)*T"')
            Plot(pick,pick + '0',pickplot(0.8,1.2))
            Combine(scan,[scan,pick],'Overlay',result=1,
                         pstexpen='color=y fat=1 fatmult=1.5 invras=y')

            # WARPING CORRECTION 2
            init = warp
            warp = start('warpr1-')
            morph1 = start('morphr1-')
            Flow([warp,morph1,'varp8','ampl8'],[morph,pp,pick,init],
                 warp1(2,500))
            Plot(warp,warp,warp2gamma + ' | ' + graph2)
            Combine(start('morphr2-top'),[vpvs,warp],'Overlay')
            Plot(start('morphr2-bot'),[morph1,pp],difplot)
            Combine(start('morphr2-'),
                         map(lambda x: start('morphr2-'+x),['top','bot']),
                         'OverUnderAniso',result=1)

            # MOVE CLOSER
            pp = sized('pp')
            morph = start('morphq')
            Flow(morph,[sized('ps'),pp,warp],warp0)
            Plot(start('morphq-bot'),[morph,pp],difplot)
            Combine(morph,map(start, ['morphr2-top','morphq-bot']),
                         'OverUnderAniso',result=1)
        
            # SPECTRAL BALANCING
            pwin = start('pwinq')
            swin = start('swinq')
            prick = start('prickq')
            srick = start('srickq')
            Flow(pwin,pp,window1)
            Flow(swin,morph,window1)
            Flow(prick,pwin,rick,stdout=0)
            Flow(srick,swin,rick,stdout=0)

            pp = start('pmorphq')
            morph = start('smorphq')
            resh = start('reshq')
            Flow([pp,resh],[pwin,swin,prick,srick],reshape)
            Flow(morph,resh,"stack norm=no")
            Plot(start('morphq1-bot'),[morph,pp],difplot)
            Combine(start('morphq1-'),
                         map(start,['morphr2-top','morphq1-bot']),
                         'OverUnderAniso',result=1)
        
            # GAMMA SCAN
            scan = start('scanq')
            Flow(scan,[morph,pp],warpscan(41,0.8))
            Plot(scan,scan,greyscan(0.8,1.2))

            # GAMMA PICK
            pick = start('pickq')
            Flow(pick + '0',[scan,pp],blindpick(eps=eps[f][st]/4))
            Flow(pick,pick + '0','headermath g=0 output="(g-1)*T"')
            Plot(pick,pick + '0',pickplot(0.8,1.2))
            Combine(scan,[scan,pick],'Overlay',result=1)

            # WARPING CORRECTION 3
            init = warp
            warp = start('warpq1-')
            morph1 = start('morphq1-')
            Flow([warp,morph1,'varp9','ampl9'],[morph,pp,pick,init],
                      warp1(2,500))
            Plot(warp,warp,warp2gamma + ' | ' + graph2)

            Plot(start('morphq2-bot'),[warp,f + 'swrp'],botplot(-5,5))
             
            Combine(start('morphq2-top'),[vpvs,warp],'Overlay')
            Combine(start('morphq2-'),
                         map(lambda x: start('morphq2-'+x),['top','bot']),
                         'OverUnderAniso',result=1)

            Result(start('morphq2s'),[morph1,pp],difplot)
    
## ###########################################################################
End()
