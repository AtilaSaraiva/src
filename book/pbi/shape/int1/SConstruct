###########################################################################
import sys, os

sys.path.append(os.path.join(os.environ.get('RSFROOT'),'lib'))

##########################################################################

from rsfproj import *

Book()

Flow('time',None,
     "spike n1=200 d1=1 o1=1 label1=' ' | headermath output='N*0.4'")
Flow('head','time',"window n1=41 | math output='exp(0.25*input)+11'")
Flow('ideal','time',"math output='sin(input)*0.5'")
Flow('alias','head',"math output='sin(input)*0.5'")

doty = 'dots dots=0 connect=0 gaineach=0 constsep=1 strings=0 clip=1.2'

Flow('data',['alias','head'],'bin1 head=${SOURCES[1]} nx=200 dx=0.4 x0=0')
Plot('data','data',doty + ' strings=1 d1=1 o1=1')
Plot('ideal','ideal',doty + ' connect=1')
Plot('both','data ideal','Overlay')
Result('data','both data','SideBySideAniso')

doty += ' yreverse=y connect=1 d1=1 o1=1'

name = 'ifs'
title = ['Regularization','Preconditioning','Shaping']
for prec in range(3):
    iters = []
    res = name[prec] + 'm'
    labels = ''
    for niter in [1,3,5,7,300]:
        iter = res + str(niter)
        iters.append(iter)
        if name[prec] == 's':
            Flow(iter,['alias','head'],
                 '''shapebin1 head=${SOURCES[1]} nx=200 dx=0.4 x0=0
                 filter=5 pef=0 gauss=1 niter=%d''' % niter)
        else:
            Flow(iter,['alias','head'],
                 '''invbin1 head=${SOURCES[1]} nx=200 dx=0.4 x0=0
                 filter=1 prec=%d niter=%d''' % (prec,niter))
        labels = labels + 'iter=%d:' % niter
    Plot(res,iters,
         '''
         cat axis=2 ${SOURCES[1:%d]} | %s connect=1 overlap=2
         title=%s labels=%s labelsz=10 label1='Sample' 
         ''' % (len(iters),doty,title[prec],labels))
Result('if',['im','fm'],'SideBySideAniso')

Flow('sm','sm300','%s $SOURCE $TARGET; echo d1=1 >> $TARGET' %
     WhereIs('cp'),stdin=0,stdout=-1)
Flow('spec','sm','spectra')
Flow('spec2','spec','monof ma=/dev/null | scale axis=1')
Plot('spec','spec spec2',
       '''
       cat axis=2 ${SOURCES[1]} |
       graph title="Spectrum Shaping"
       label1="Frequency (cycles)" max1=0.3 dash=0,1
       ''')
Result('spec',['sm','spec'],'SideBySideAniso')

Flow('ss',['alias','head'],
     '''shapebin1 head=${SOURCES[1]} nx=200 dx=0.4 x0=0
     filter=4 pef=1 gauss=1 niter=200''')
Plot('ss','ss',doty)
Result('ss',['data','ss'],'Overlay')

###########################################################################

End()
