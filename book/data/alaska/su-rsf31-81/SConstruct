import rsf.proj as rsf
import rsf.suproj as su

def cat_su_rsf_diff(out,sufile,rsffile):
    rsf.Flow(out+"temp",   [sufile,rsffile],
            '''
	    segyread su=y endian=n tfile=t${TARGETS}.rsf
            | add scale=-1 
            | add ${SOURCES[1]}
            ''')
    rsf.Flow(out,[sufile,rsffile,out+"temp"],
             '''
             segyread su=y endian=n tfile=t${TARGETS}.rsf
             | cat ${SOURCES[1]} ${SOURCES[2]} axis=2
	     ''')


segyread = '''
segyread bfile=${TARGETS[1]} hfile=${TARGETS[2]}
tape=$SOURCE endian=%d |
segyclean
''' % (1-su.little_endian())

rawsegy=['L23535','L23536','L23537']
for file in rawsegy  :
    su.Flow(['su'+file, 'su'+file+'.bin',  'su'+file+'.asc'],
         '../line31-81/'+file+'.SGY',segyread,stdin=0)
    rsf.Flow(['rsf'+file,'t'+'rsf'+file,'rsf'+file+'.bin','rsf'+file+'.asc'],
         '../line31-81/'+file+'.SGY',
         'segyread tfile=${TARGETS[1]} bfile=${TARGETS[2]} hfile=${TARGETS[3]}')

# concatinate the input files
su.Flow ('suline', map(lambda x: 'su'+x, rawsegy),
     'cat ${SOURCES}',stdin=0)

rsf.Flow('rsfline' ,map(lambda x: 'rsf'+x, rawsegy),'cat ${SOURCES[1:3]} axis=2')
rsf.Flow('trsfline',map(lambda x: 'trsf'+x, rawsegy),'cat ${SOURCES[1:3]} axis=2') 

rsf.Flow('rsflinewind','rsfline','window n2=3000')

su.Flow('sulinewind','suline','suwind count=3000')

#Use a function to compute the difference and cat the su, rsf, diff data 
cat_su_rsf_diff('rsf_minus_su','sulinewind.su','rsflinewind')
rsf.Result('rsf_minus_su',
           '''
	   grey pclip=80 title="su rsf diff" label2="no processing"
	   ''')

# compare the function for spreading in Madagascar and su

su.End()
rsf.End()
