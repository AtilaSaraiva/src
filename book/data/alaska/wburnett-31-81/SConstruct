from rsf.proj import * 

#################### 
# Fetch the dataset and convert to multiple rsf files
####################

rawsegy=['L23535','L23536','L23537']
for name in rawsegy:
    Fetch(name+'.SGY',
	  server='http://certmapper.cr.usgs.gov',
      	  top='nersl/NPRA/SEISMIC/1981/31_81',
      	  dir='DMUX')
    Flow([name,'t'+name,name+'.bin',name+'.asc'],
         name+'.SGY',
         'segyread tfile=${TARGETS[1]} bfile=${TARGETS[2]} hfile=${TARGETS[3]}')

# Raw data and headers combined
Flow('rawline',rawsegy,'cat ${SOURCES[1:3]} axis=2')
Flow('trawline',map(lambda x: 't'+x, rawsegy),'cat ${SOURCES[1:3]} axis=2') 

# Form mask to window out misfires
Flow('shotmask','trawline',
     '''
     window n1=1 f1=2 | mask min=157 max=157 |
     add add=-1 | add scale=-1
     ''')

# Window out misfires, test shots and auxiliary traces;
# define shot and offset dimensions
Flow('shotline',['rawline','shotmask'],
     '''
     headerwindow mask=${SOURCES[1]} |
     put n2=101 n3=67 | window n2=96 f3=10 |
     put o2=-5225 d2=110 label2=Offset unit2=ft
         o3=0 d3=440 label3=Shot unit3=ft
     ''')

###############################################################################
par = {
    'nx':96,   'dx':110.0,       'ox':-5225.0,       # offset (feet)
    'ns':57,   'ds':440.0,       'os':0.0,           # shots (feet)
    'nt':3000, 'dt':0.002,      'ot':0.0,            # time (s)
    'fhi':60, 'flo':4,                               # bandpass filter limits
    'vinner0':200.0, 'vinner1':300.0, 'tinner0':1.0, # inner mute parameters
    'p0':-0.0002, 'dp':0.000000758, 'np':527,        # tau-p txfm parameters
    'wptaper':50,                                    # omega-p tapering parameter
    'gainpow':1.4,                                   # gain correction 
    'medwindow':4, 'medvel':8000                     # de-spiking parameters
    }

par['slopep']=1.0/par['vinner1']
###############################################################################

## Remove spikes using constant nmo and median filter
def despike():
    return '''
    tpow tpow=%(gainpow)g | 
    nmo velocity=${SOURCES[1]} half=n |
    despike2 wide=%(medwindow)d |
    inmo velocity=${SOURCES[1]} half=n
    '''% (par)

## Inner Mute on Selected Shots
imuteshots=[3,4,5,6,8,11,16,17,22,23,24,33,35,36,37,41,999999]
Flow('shot-ones','shotline','window n3=1 | math output="1.0"')
Flow('shot-mutemask','shot-ones','mutter inner=y v0=%(vinner0)g t0=%(tinner0)g slopep=%(slopep)g'%(par))
shotlist=[]
j=0
for i in range(par['ns']):
    shot='shot-zeros-'+str(i)
    shotlist.append(shot)
    print "Checking shot "+str(i)+"..."
    if i==imuteshots[j]:
        print "Shot "+str(i)+" will be inner-muted."
        j=j+1       
        Flow(shot,'shot-mutemask','cp')
    else:
        Flow(shot,'shot-ones','cp')
Flow('shotline-mutemask',shotlist,'rcat ${SOURCES[1:%d]}'%(par['ns']))
    
## Remove Groundroll and near-offset noise using omega-p filtering
def degroundroll():
    return '''
    bandpass fhi=%(fhi)g flo=%(flo)g |
    mutter inner=y v0=%(vinner0)g t0=%(tinner0)g slopep=%(slopep)g |
    slant x0=%(ox)g dx=%(dx)g nx=%(nx)d p0=%(p0)g dp=%(dp)g np=%(np)d adj=y |
    cosft sign1=1 |
    put label1=Frequency label2=Slowness unit2="s/ft" |
    costaper nw2=%(wptaper)d |
    cosft sign1=-1 |
    slant x0=%(ox)g dx=%(dx)g nx=%(nx)d p0=%(p0)g dp=%(dp)g np=%(np)d adj=n |
    put label1=Time label2=Offset unit2="ft" |
    mutter inner=y v0=%(vinner0)g t0=%(tinner0)g slopep=%(slopep)g 
    '''% (par)


####################################################################################################
#Design flow on test gather(s)

Flow('testdsvel','dsvel',
     'window n3=1 f3=35')

#De-spike
Flow('testshot','shotline testdsvel',
     'window n3=1 f3=35 | '+despike())
Plot('testshot','grey title=Before')

#Inner-mute and omega-p transform
Flow('testwp','testshot',
     '''
     mutter inner=y v0=%(vinner0)g t0=%(tinner0)g slopep=%(slopep)g |
     slant x0=%(ox)g dx=%(dx)g nx=%(nx)d p0=%(p0)g dp=%(dp)g np=%(np)d adj=y |
     cosft sign1=1 |
     put label1=Frequency label2=Slowness unit2="s/ft" 
     '''% (par))
Plot('testwp',
       '''
       sfgrey color=j title="Omega-p Before"
       ''')
#Cosine taper in omega-p domain
Flow('testwp-filt','testwp',
     '''
     costaper nw2=%(wptaper)d 
     '''% (par))
Plot('testwp-filt',
       '''
       sfgrey color=j title="Omega-p After"
       ''')
Result('testwp','testwp testwp-filt','SideBySideAniso')

#Inverse transform
Flow('testshot-filt','testwp-filt',
     '''
     cosft sign1=-1 |
     slant x0=%(ox)g dx=%(dx)g nx=%(nx)d p0=%(p0)g dp=%(dp)g np=%(np)d adj=n |
     put label1=Time label2=Offset unit2="ft" |
     mutter inner=y v0=%(vinner0)g t0=%(tinner0)g slopep=%(slopep)g
     '''% (par))
Plot('testshot-filt','bandpass fhi=%(fhi)g flo=%(flo)g | grey title=After'%(par))
Result('testshot','testshot testshot-filt','SideBySideAniso')

####################################################################################################
#Apply flow to line

# 1.) Despike with median filter
Flow('dsvel','shotline','window n2=1 | math output=%(medvel)g'%(par))
Flow('shotline-despike','shotline dsvel',despike())

# 2.) Inner-mute for noisiest near-offsets 
Flow('shotline-imute','shotline-despike shotline-mutemask','math m=${SOURCES[1]} output="input*m"')

# 3.) Remove groundroll with omega-p filter
Flow('shotline-deGR','shotline-imute',degroundroll())

####################################################################################################

#Shot gathers -> CMP gathers
Flow('cmp','shotline','shot2cmp half=n')
Flow('cmp-deGR','shotline-deGR','shot2cmp half=n')

# Semblance for velocity picking
Flow('semb','cmp',
     '''
     window f3=50 j3=10 n3=45 |
     sfvscan half=n semblance=y v0=5000 nv=251 dv=50
     ''')
Flow('semb-deGR','cmp-deGR',
     '''
     window f3=50 j3=10 n3=45 |
     sfvscan half=n semblance=y v0=5000 nv=251 dv=50
     ''')

# Velocity picking
Flow('pick','semb',
     '''
     pick rect1=10 rect2=3
     ''')

Flow('pick-deGR','semb-deGR','pick rect1=10 rect2=3')

# Interpolate onto full CMP grid
Flow('vel','pick',
     '''
     transp | spline n1=551 d1=55 o1=-2612.5 |
     transp
     ''')
Flow('vel-deGR','pick-deGR',
     '''
     transp | spline n1=551 d1=55 o1=-2612.5 |
     transp
     ''')

Result('vel','grey mean=y title=n')
# NMO correction on CMP gathers
Flow('nmo',['cmp','vel'],'nmo velocity=${SOURCES[1]} half=n')
Flow('nmo-deGR',['cmp-deGR','vel-deGR'],'nmo velocity=${SOURCES[1]} half=n')

# Stacking
Flow('stack','nmo','stack')
Result('stack','agc rect1=250 | grey title=Stack')

Flow('stack-deGR','nmo-deGR','stack')
Result('stack-deGR','agc rect1=250 | grey title="De-Groundroll Stack"')

# Median Stack -- bash
Flow('mstack','nmo','transp | median')
Result('mstack','agc rect1=250 | grey title=Median')

#Fetch('31_81_PR.SGY',
#	server='http://certmapper.cr.usgs.gov',
#      	  top='nersl/NPRA/SEISMIC/1981/31_81',
#      	  dir='PROCESSED')

End()
