from rsf.proj import *

# Get data
##########

tgz = '2D_Land_data_2ms.tgz'

Fetch(tgz,
      server='http://www.freeusp.org',
      top='RaceCarWebsite/TechTransfer/Tutorials/Processing_2D',
      dir='Data')

files = map(lambda x: 'Line_001.'+x,Split('TXT SPS RPS XPS sgy'))

Flow(files,tgz,'gunzip -c $SOURCE | tar -xvf -',stdin=0,stdout=-1)

Flow('line tline','Line_001.sgy','segyread tfile=${TARGETS[1]}')

Result('first','line',
       '''
       window n2=1000 | agc rect1=250 rect2=100 | 
       grey title="First 1000 traces" 
       ''')

Flow('lines','line',
     '''
     intbin yk=cdpt | window f3=2 |
     put
     label2=Source d2=0.05  o2=688 unit2=km
     label3=Offset d3=0.025 o3=-3.5 unit3=km
     label1=Time unit1=s
     ''')

Result('lines',
       '''
       byte gainpanel=each |
       grey3 frame1=500 frame2=100 frame3=120 flat=n
       title="Raw Data"
       ''')


# Get true geometry
###################

lines = {'S':251,'R':782}
color = {'S':4, 'R':2}

for case in 'SR':
    Flow(case+'.asc','Line_001.%cPS' % case,
         '''
         awk 'NR > 20 {print $8, " ", $9}'
         '''
         )
    Flow(case,case+'.asc',
         '''
         echo in=$SOURCE data_format=ascii_float n1=2 n2=%d |
         dd form=native 
         ''' % lines[case],stdin=0)
    Plot(case,
         '''
         scale dscale=0.001 | dd type=complex |
         graph symbol=* title=%c plotcol=%d
         min1=684 max1=705 min2=3837 max2=3842
         ''' % (case,color[case]))

Result('SR','S R','OverUnderAniso')
Result('SRO','R S','Overlay')

# Arrange receiver coordinates 
shots = []
for shot in range(lines['S']):
    line = 'line%d' % shot
    Flow(line,'R','window n1=1 f2=%d n2=282' % (2*shot))
    shots.append(line)
Flow('rec',shots,'rcat axis=2 ${SOURCES[1:%d]}' % len(shots))

Plot('rec',
     '''
     window j1=5 j2=2 |
     scale dscale=0.001 | 
     rtoc | math output="input+I*x2" |
     graph symbol=* plotcol=%d title="Stacking Diagram"
     label1=Distance unit1=km label2="Shot Number"
     min1=684 max1=705
     ''' % color['R'])

Plot('sou','S',
     '''
     window n1=1 j2=2 |
     scale dscale=0.001 | 
     rtoc | math output="input+I*x1" |
     graph symbol=* plotcol=%d
     wanttitle=n wantaxis=n
     min1=684 max1=705
     ''' % color['S'])

Result('diagram','rec sou','Overlay')

# Brute stack
#############

Flow('cmps mask','lines',
     'transp plane=23 memsize=1000 | shot2cmp mask=${TARGETS[1]} half=n')
Flow('fold','mask','dd type=float | stack axis=1 norm=n')

Result('fold','graph title=Fold unit1=km label2= unit2=')

Flow('brute','cmps','stack')

Result('brute','grey title="Brute Stack" ')

Result('overlay','fold brute',
       '''
       spray axis=1 n=1501 d=0.002 o=0 label=Time unit=s |
       add scale=1,1000 ${SOURCES[1]} |
       grey color=j title="Brute Stack (with Fold)"
       ''')

# Denoising
###########

Flow('shot','lines','window n2=1 f2=198 | tpow tpow=1')

Plot('shot','grey title=Before')

Result('spec','shot',
       'spectra | window max1=100 | grey color=j allpos=y title=Spectra')

Flow('ltft','shot',
     'ltft rect=20 verb=y nw=100 dw=1 niter=50')
Plot('ltft',
       '''
       math output="abs(input)" | real |
       byte allpos=y gainpanel=100 pclip=99 |
       grey3 color=j  frame1=120 frame2=0 frame3=71 label1=Time flat=y 
       unit1=s label3=Offset label2="\F5 f \F-1" unit3=km
       screenht=10 screenratio=0.7 movie=2
       point1=0.8 point2=0.3 wanttitle=n
       ''',view=1)

End()
