from rsf.proj import *
import fdmod

# ------------------------------------------------------------
# Sigsbee 2A parameters
par = {
    'nx':1601, 'ox':25.0, 'dx':0.025, 'lx':'x', 'ux':'km',
    'nz':801,  'oz':4.50, 'dz':0.025, 'lz':'z', 'uz':'km',
    'nt':4001, 'ot':0,    'dt':0.001, 'lt':'t', 'ut':'s'
    }

# ------------------------------------------------------------
# convert coordinates from ft to km
par['ft2km']=0.3048
par['ox']=par['ox']*par['ft2km']
par['dx']=par['dx']*par['ft2km']
par['oz']=par['oz']*par['ft2km']
par['dz']=par['dz']*par['ft2km']

par['jsnap']=200       # wavefield snapshop (samples)
par['kt']=100          # wavelet delay (samples) 
par['nb']=100          # boundary (grid points)

# ------------------------------------------------------------
# set plotting parameters
fdmod.param(par)

# ------------------------------------------------------------
# source coordinates (exploding reflectors)
fdmod.boxarray('ss',
               5,   # vertical number
               5,   # vertical origin 
               0.5, # vertical sampling
               14,  # horizontal number
               10,  # horizontal origin
               0.5, # horizontal sampling
               par)

# plot sources
Plot('ss',fdmod.ssplot('plotfat=10 symbol=.  ',par))

# ------------------------------------------------------------
# horizontal receivers
fdmod.horizontal('tH',
                 1.5, # vertical array at z=1.5km
                 par)

# window horizontal array
par['nrH']=100  # number of receivers
par['orH']=12.0 # receivers origin
par['jrH']=10   # receivers jump (grid points)
Flow('rH',
     'tH',
     'window j2=%(jrH)d min2=%(orH)g n2=%(nrH)d'%par)

# plot horizontal array
Plot('rH',fdmod.rrplot('plotfat=5 plotcol=1',par)) 

# ------------------------------------------------------------
# vertical receivers
fdmod.vertical('tV',
               8.5, # horizontal array at x=8.5km
               par)

par['nrV']=25  # number of receivers
par['orV']=2.5 # receivers origin
par['jrV']=20  # receivers jump (grid points)
Flow('rV',
     'tV',
     'window j2=%(jrV)d min2=%(orV)g n2=%(nrV)d'%par)

# plot vertical array
Plot('rV',fdmod.rrplot('plotfat=5 plotcol=2' ,par)) 

# ------------------------------------------------------------
# merge receiver files
Flow('rA','rH rV','cat axis=2 space=n ${SOURCES[1]}')

# overlay receiver arrays
Plot('rA','rH rV','Overlay')

# ------------------------------------------------------------
# get stratigraphic velocity
strvelfile = 'sigsbee2a_stratigraphy.sgy'
Fetch(strvelfile,'sigsbee')

Flow('vstr-raw',strvelfile,'segyread read=data')
Flow('vstr',
     'vstr-raw',
     '''
     scale rscale=%g |
     put 
     o1=%g d1=%g label1=%s unit1=%s
     o2=%g d2=%g label2=%s unit2=%s |
     window n1=%d min1=%g n2=%d min2=%g
     ''' % (par['ft2km']*0.001,
            0.0                ,0.0250*par['ft2km'],par['lz'],par['uz'],
            10.000*par['ft2km'],0.0250*par['ft2km'],par['lx'],par['ux'],
            par['nz'],par['oz'],
            par['nx'],par['ox']
            ))

# ------------------------------------------------------------
# make smooth velocity
Flow('vsmo',
     'vstr',
     'smooth rect1=25 rect2=25 repeat=3')

# ------------------------------------------------------------
# plot velocities
for v in ('vstr','vsmo'):
    Plot(  v,fdmod.cgrey('allpos=y bias=1.43',par))

    # overlay sources and receivers
    Result(v,[v,'ss','rH','rV'],'Overlay')

# ------------------------------------------------------------
# make constant density
Flow('dens','vsmo','math output=1')

# ------------------------------------------------------------
# construct wavelet
fdmod.wavelet('wav_',10,par) 

# transpose wavelet
Flow(  'wav','wav_','transp')      

# plot wavelet
Result('wav','window n2=1000 |'
       + fdmod.waveplot('',par)) 

# ------------------------------------------------------------
# run FD modeling
fdmod.awefd1('tmpA',  # data file (for all receivers)
             'wfld',  # wavefield snapshots
             'wav',   # source wavelet
             'vsmo',  # velocity
             'dens',  # density
             'ss',    # source coordinates
             'rA',    # receiver coordinates
             'free=n',# optional flags
             par)

# ------------------------------------------------------------
# plot wavefield frames
for i in range( (par['nt']-1)/par['jsnap']):
    tag = '-%02d' %(i)
    fdmod.wframe('wfld'+tag,
                 'wfld',i,'pclip=99  ',par)
    Result( 'wfld'+tag,
           ['wfld'+tag,'ss','rH','rV'],'Overlay')
    
# ------------------------------------------------------------
# undo wavelet delay
Flow('datA',
     'tmpA',
     '''
     window squeeze=n f2=%(kt)d |
     pad end2=%(kt)d |
     put o2=%(ot)g
     ''' %par)

# ------------------------------------------------------------
# window data from the horizontal array
Flow('datH',
     'datA',
     '''
     window squeeze=n n1=%d |
     put o1=%g d1=%g
     '''%(par['nrH'],par['orH'],par['dx']*par['jrH']))

# plot data from the horizontal array
Result('datH',       'window j2=4 | transp|'
       + fdmod.dgrey('screenratio=%(ratio)g screenht=%(height)g'%par,par))
Result('wigH','datH','window j2=4 | transp|'
       + fdmod.dwigl('screenratio=%(ratio)g screenht=%(height)g pclip=99'%par,par))

# ------------------------------------------------------------
# window data from the vertical array
Flow('datV',
     'datA',
     '''
     window squeeze=n f1=%d |
     put o1=%g d1=%g
     '''%(par['nrH'],par['orV'],par['dz']*par['jrV']))
    
# plot data from the vertical array
Result('datV',       'window j2=4 |'
       + fdmod.egrey('screenratio=%(ratio)g screenht=%(height)g'%par,par))
Result('wigV','datV','window j2=4 |'
       + fdmod.ewigl('screenratio=%(ratio)g screenht=%(height)g'%par,par))
    
# ------------------------------------------------------------
# run FD migration
for j in ('H','V','A'):
    fdmod.zom('img'+j,  # image
              'dat'+j,  # data
              'vsmo',   # velocity
              'dens',   # density
              'r'+j,    # receiver coordinates
              'free=n', # optional flags
              par)

    # plot image
    Plot(  'img'+j,'bandpass flo=2 |'
           + fdmod.cgrey('pclip=99.99',par))

    # overlay receivers
    Result('img'+j,['img'+j,'r'+j],'Overlay')
    
# ------------------------------------------------------------
End()
