from rsf.proj import *

# download well-log data
Fetch('L-30.las','1406_Make_a_synthetic',
      server='https://raw.githubusercontent.com',
      top='seg/tutorials/master')

# Convert to RSF
Flow('L-30','L-30.las','las2rsf $SOURCE $TARGET',stdin=0,stdout=-1)

# Examine with "< L-30.rsf sfheaderattr segy=n desc=y"

# Mask bad values
Flow('mask1','L-30','headermath segy=n output=RHOB | mask min=0')
Flow('mask2','L-30','headermath segy=n output=DT   | mask min=0')
Flow('mask','mask1 mask2','mul ${SOURCES[1]}')

scale = dict(RHOB=1000,DT=3.28084,DEPT=1/3.28084) # convert to SI units
threshold = dict(RHOB=100,DT=10)

for case in ('DT','RHOB','DEPT'):
     # Extract values
     Flow(case,'L-30 mask',
          '''
          headermath segy=n output=%s | 
          headerwindow mask=${SOURCES[1]} | window |
          scale dscale=%g | 
          put o1=3058.5 d1=0.5 label1=Depth unit1=ft
          ''' % (case,scale[case]))

     # Clip spikes
     if case != 'DEPT':
          despike = case+'-despike'
          Flow(despike,case,'despike wide=13')
          
          spikemask = case+'-spikemask'
          Flow(spikemask,[despike,case],
               '''
               math orig=${SOURCES[1]} output="abs(input-orig)" |
               mask min=%g
               ''' % threshold[case])

          Flow(despike+'2',[spikemask,despike,case],
               '''
               dd type=float |
               math orig=${SOURCES[2]} filt=${SOURCES[1]}
               output="input*filt+(1-input)*orig"
               ''')
          Result(case,[case,despike+'2'],
                 '''
                 cat axis=2 ${SOURCES[1]} |
                 graph title=%s
                 ''' % case)

# Compute time-to-depth relationship

log_start_time = 0.410553230106 # (s)

Flow('tdr','dt','causint | math output="%g+(%g)*input" ' % (log_start_time,0.1524/1e6))

Result('tdr','graph title=Time yreverse=y transp=y')

End()
