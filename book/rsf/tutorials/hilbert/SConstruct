from rsf.proj import *

# Download input trace

trace = 'trace_il1190_xl1155.trace'

Fetch(trace,'data',
      server='https://raw.githubusercontent.com',
      top='seg/tutorials/master/1410_Phase')

# Convert format to RSF

Flow('trace',trace,
     '''
     echo n1=1503 in=$SOURCE data_format=ascii_float 
     o1=0 d1=0.004 label1=Time unit1=s |
     dd form=native | window f1=2
     ''')

# Apply Hilbert transform

Flow('hilb','trace','envelope hilb=y')

# Compute envelope and phase

Flow('envp','trace hilb','math h=${SOURCES[1]} output="sqrt(input*input+h*h)" ')
Flow('envm','envp','scale dscale=-1')

Flow('phase','trace hilb','math h=${SOURCES[1]} output="h&input" ')

Plot('trace','trace hilb envp envm',
     '''
     cat ${SOURCES[1:4]} axis=2 |
     window f1=500 n1=201 | 
     graph title="Trace Amplitudes" dash=0,1,0,0 plotcol=5,5,4,4
     ''')

Plot('phase',
     '''
     window f1=500 n1=201 | 
     graph title="Instantaneous Phase" plotcol=3 label2=Degree unit2=radians
     ''')

Result('trace','trace phase','OverUnderAniso')

# Repeat on 2-D section

sgy = 'penobscot_xl1155.sgy'

Fetch(sgy,'data',
      server='https://raw.githubusercontent.com',
      top='seg/tutorials/master/1410_Phase')

Flow('data tdata',sgy,'segyread tfile=${TARGETS[1]}')
Flow('hdata','data','envelope hilb=y')
Flow('edata','data hdata','math h=${SOURCES[1]} output="sqrt(input*input+h*h)" ')
Flow('pdata','data hdata','math h=${SOURCES[1]} output="h&input" ')

Plot('data','window min1=2 max1=3 | grey title="Original" scalebar=y')
Plot('hdata','window min1=2 max1=3 | grey title="Hilbert" scalebar=y')
Plot('edata','window min1=2 max1=3 | grey title="Envelope" scalebar=y color=j allpos=y')
Plot('pdata','window min1=2 max1=3 | grey title="Phase" scalebar=y color=j')

Result('data','data hdata edata pdata','TwoRows')

# Plot envelope peaks

Plot('env','trace envp envm',
     '''
     cat ${SOURCES[1:3]} axis=2 |
     window f1=500 n1=201 | 
     graph title="Envelope" plotcol=5,4,4 grid=y 
     min1=2 max1=2.8 min2=-7200 max2=7200
     ''')

Flow('peaks','envp','max1')
Flow('meaks','peaks','math output="conj(input)" ')

Plot('peaks','peaks meaks',
     '''
     cat axis=1 ${SOURCES[1]} | 
     graph wanttitle=n wantaxis=n symbol=o plotcol=3 symbolsz=6
     min1=2 max1=2.8 min2=-7200 max2=7200
     ''')

Plot('peaks2','peaks meaks',
     '''
     cat axis=2 ${SOURCES[1]} | transp | 
     graph wanttitle=n wantaxis=n plotcol=3 
     min1=2 max1=2.8 min2=-7200 max2=7200
     ''')

Plot('envpeaks','env peaks peaks2','Overlay')

End()
