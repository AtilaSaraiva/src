\section{Complex number operations (komplex.c)}




\subsection{{creal}}
Returns the real part of the complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c.r] real part of the complex number. It is of type \texttt{double}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
double sf_creal(sf_double_complex c)
/*< real part >*/
{
    return c.r;
}
\end{verbatim}




\subsection{{cimag}}
Returns the imaginary part of the complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c.i] real part of the complex number. It is of type \texttt{double}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
double sf_cimag(sf_double_complex c)
/*< imaginary part >*/
{
    return c.i;
}
\end{verbatim}




\subsection{{dcneg}}
Returns the negative complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] negative of the complex number. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcneg(sf_double_complex a)
/*< unary minus >*/
{
    a.r = -a.r;
    a.i = -a.i;
    return a;
}
\end{verbatim}




\subsection{{dcadd}}
Adds two complex numbers.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}. 
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] $a+b$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcadd(sf_double_complex a, sf_double_complex b)
/*< complex addition >*/
{
    a.r += b.r;
    a.i += b.i;
    return a;
}
\end{verbatim}




\subsection{{dcsub}}
Subtracts two complex numbers.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}. 
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] $a-b$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcsub(sf_double_complex a, sf_double_complex b)
/*< complex subtraction >*/
{
    a.r -= b.r;
    a.i -= b.i;
    return a;
}
\end{verbatim}




\subsection{{dcmul}}
Multiplies two complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] the product $ab$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcmul(sf_double_complex a, sf_double_complex b)
/*< complex multiplication >*/
{
    sf_double_complex c;
    c.r = a.r*b.r-a.i*b.i;
    c.i = a.i*b.r+a.r*b.i;
    return c;
}
\end{verbatim}




\subsection{{dccmul}}
Multiplies two complex number. Its output type and one of the input parameters is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] the product $ab$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_dccmul(sf_double_complex a, kiss_fft_cpx b)
/*< complex multiplication >*/
{
    kiss_fft_cpx c;
    c.r = a.r*b.r-a.i*b.i;
    c.i = a.i*b.r+a.r*b.i;
    return c;
}
\end{verbatim}




\subsection{{dcdmul}}
Multiplies two complex number. One of the input parameters is \texttt{kiss\_fft\_cpx}. This means that it should only be used if \texttt{complex.h} header is not used.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] product $ab$ of the two complex numbers $a$ and $b$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcdmul(sf_double_complex a, kiss_fft_cpx b)
/*< complex multiplication >*/
{
    sf_double_complex c;
    c.r = a.r*b.r-a.i*b.i;
    c.i = a.i*b.r+a.r*b.i;
    return c;
}
\end{verbatim}



\subsection{{dcrmul}}
Multiplies a complex number with a real number of type \texttt{double}. 

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a real number (\texttt{double}).  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] product of the complex number $a$ and the real number $b$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcrmul(sf_double_complex a, double b)
/*< complex by real multiplication >*/
{
    a.r *= b;
    a.i *= b;
    return a;
}
\end{verbatim}




\subsection{{dcdiv}}
Divides two complex numbers.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] $\frac{a}{b}$. It is of type \texttt{sf\_double\_complex}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
sf_double_complex sf_dcdiv(sf_double_complex a, sf_double_complex b)
/*< complex division >*/
{
    sf_double_complex c;
    double r,den;
    
    ...
    return c;
}
\end{verbatim}




\subsection{{cabs}}
Returns the absolute value (magnitude) of a complex number. It uses the \texttt{hypot} function from the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[hypot(z.r,z.i)] absolute value of the complex number. 
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
double sf_cabs(sf_double_complex z)
/*< replacement for cabsf >*/
{
    extern double hypot(double,double);
    return hypot(z.r,z.i);
}
\end{verbatim}




\subsection{{cabs}}
Returns the argument of a complex number. It uses the \texttt{atan2} function from the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[atan2(z.r,z.i)] argument of the complex number. 
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
double sf_carg(sf_double_complex z)
/*< replacement for cargf >*/
{
    extern double atan2(double,double);
    return atan2(z.i,z.r);
}
\end{verbatim}




\subsection{{crealf}}
Returns the real part of the complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c.r] real part of the complex number. It is of type \texttt{float}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
float sf_crealf(kiss_fft_cpx c)
/*< real part >*/
{
    return c.r;
}
\end{verbatim}




\subsection{{cimagf}}
Returns the imaginary part of the complex number.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c]      a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c.i] imaginary part of the complex number. It is of type \texttt{float}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
float sf_cimagf(kiss_fft_cpx c)
/*< imaginary part >*/
{
    return c.i;
}
\end{verbatim}




\subsection{{cprint}}
Prints the complex number on the screen. This is done using the \hyperref[sec:sf_warning]{\texttt{sf\_warning}}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] a complex number (\texttt{sf\_complex}).  
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
void cprint (sf_complex c)
/*< print a complex number (for debugging purposes) >*/
{
    sf_warning("%g+%gi",crealf(c),cimagf(c));
}
\end{verbatim}




\subsection{{cadd}}
Adds two complex numbers. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] the sum $a+b$ of the two complex numbers $a$, $b$. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cadd(kiss_fft_cpx a, kiss_fft_cpx b)
/*< complex addition >*/
{
    a.r += b.r;
    a.i += b.i;
    return a;
}
\end{verbatim}




\subsection{{csub}}
Subtracts two complex numbers. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] difference of the two complex numbers $a$, $b$. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_csub(kiss_fft_cpx a, kiss_fft_cpx b)
/*< complex subtraction >*/
{
    a.r -= b.r;
    a.i -= b.i;
    return a;
}
\end{verbatim}




\subsection{{csqrtf}}
Returns the square root of a complex number. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] square root of the complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_csqrtf (kiss_fft_cpx c)
/*< complex square root >*/
{

#if !defined(hpux) && !defined(__hpux)
    extern float copysignf(float x, float y);
#endif

    float d, r, s;
    kiss_fft_cpx v;

    ...
    return v;
}
\end{verbatim}




\subsection{{cdiv}}
Divides two complex numbers. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] $\frac{a}{b}$. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cdiv(kiss_fft_cpx a, kiss_fft_cpx b)
/*< complex division >*/
{
    kiss_fft_cpx c;
    float r,den;

    ...
    return c;
}
\end{verbatim}




\subsection{{cmul}}
Multiplies two complex numbers. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] product of the two complex numbers a and b. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cmul(kiss_fft_cpx a, kiss_fft_cpx b)
/*< complex multiplication >*/
{
    kiss_fft_cpx c;
    c.r = a.r*b.r-a.i*b.i;
    c.i = a.i*b.r+a.r*b.i;
    return c;
}
\end{verbatim}




\subsection{{crmul}}
Multiplies a complex number with a real number. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
   \item[b] a real number (\texttt{float}).  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] the product $ab$ of a complex number $a$ and real number $b$. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_crmul(kiss_fft_cpx a, float b)
/*< complex by real multiplication >*/
{
    a.r *= b;
    a.i *= b;
    return a;
}
\end{verbatim}




\subsection{{cneg}}
Returns negative of a complex number. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] negative of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cneg(kiss_fft_cpx a)
/*< unary minus >*/
{
    a.r = -a.r;
    a.i = -a.i;
    return a;
}
\end{verbatim}




\subsection{{conjf}}
Returns complex conjugate of a complex number. The output is of type \texttt{kiss\_fft\_cpx}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{sf\_double\_complex}.  
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] complex conjugate of the complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_conjf(kiss_fft_cpx z)
/*< complex conjugate >*/
{
    z.i = -z.i;
    return z;
}
\end{verbatim}




\subsection{{cabsf}}
Returns the magnitude of a complex number. It uses a function \texttt{hypotf} from \texttt{c99.h}, which calls the \texttt{hypot} function from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] magnitude of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
float sf_cabsf(kiss_fft_cpx z)
/*< replacement for cabsf >*/
{
    return hypotf(z.r,z.i);
}
\end{verbatim}




\subsection{{cargf}}
Returns the argument of a complex number. It uses a function \texttt{atan2f} from \texttt{c99.h}, which calls the \texttt{atan2} function from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] magnitude of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
float sf_cargf(kiss_fft_cpx z)
/*< replacement for cargf >*/
{
    return atan2f(z.i,z.r);
}
\end{verbatim}




\subsection{{ctanhf}}
Returns hyperbolic tangent of a complex number. It uses a function
like \texttt{coshf} and \texttt{sinhf} from \texttt{c99.h}, which call \texttt{cosh} and \texttt{sinh} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] hyperbolic tangent of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_ctanhf(kiss_fft_cpx z)
/*< complex hyperbolic tangent >*/
{
    float x, y, d;

    ...
    return z;
}
\end{verbatim}




\subsection{{ccosf}}
Returns cosine of a complex number. It uses the functions like \texttt{coshf} and \texttt{sinhf} from \texttt{c99.h}, which call \texttt{cosh} and \texttt{sinh} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] cosine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_ccosf(kiss_fft_cpx z)
/*< complex cosine >*/
{
    float x, y;

    ...
    return z;
}
\end{verbatim}




\subsection{{ccoshf}}
Returns hyperbolic cosine of a complex number. It uses the functions like \texttt{coshf} and \texttt{sinhf} from \texttt{c99.h}, which call \texttt{cosh} and \texttt{sinh} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] huperbolic cosine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_ccoshf(kiss_fft_cpx z)
/*< complex hyperbolic cosine >*/
{
    float x, y;

    ...    
    return z;
}
\end{verbatim}




\subsection{{ccosf}}
Returns sine of a complex number. It uses the functions like \texttt{coshf} and \texttt{sinhf} from \texttt{c99.h}, which call \texttt{cosh} and \texttt{sinh} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] sine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_csinf(kiss_fft_cpx z)
/*< complex sine >*/
{
    float x, y;

    ...
    return z;
}
\end{verbatim}




\subsection{{csinhf}}
Returns hyperbolic cosine of a complex number. It uses the functions like \texttt{coshf} and \texttt{sinhf} from \texttt{c99.h}, which call \texttt{cosh} and \texttt{sinh} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] huperbolic cosine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_csinhf(kiss_fft_cpx z)
/*< complex hyperbolic sine >*/
{
    float x, y;

    ...
    return z;
}
\end{verbatim}




\subsection{{clogf}}
Returns natural logarithm of a complex number. It uses the functions like \texttt{logf} and \texttt{hypotf} from \texttt{c99.h}, which call \texttt{log} and \texttt{hypot} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] natural logarithm of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_clogf(kiss_fft_cpx z)
/*< complex natural logarithm >*/
{
    float x, y;

    ...    
    return z;
}
\end{verbatim}




\subsection{{cexpf}}
Returns exponential of a complex number. It uses the functions like \texttt{expf} and \texttt{cosf} from \texttt{c99.h}, which call \texttt{exp} and \texttt{cos} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] exponential of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cexpf(kiss_fft_cpx z)
/*< complex exponential >*/
{
    float x, y;

    ...
    return z;
}
\end{verbatim}




\subsection{{ctanf}}
Returns tangent of a complex number. It uses the functions like \texttt{sinf} and \texttt{cosf} from \texttt{c99.h}, which call \texttt{sin} and \texttt{cos} functions from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] tangent of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_ctanf(kiss_fft_cpx z)
/*< complex tangent >*/
{
    return sf_cdiv(sf_csinf(z),sf_ccosf(z));
}
\end{verbatim}




\subsection{{casinf}}
Returns hyperbolic arcsine of a complex number. It uses the function \texttt{asinf} from \texttt{c99.h}, which calls the \texttt{asin} function from \texttt{math.h} in the C library.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] arcsine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_casinf(kiss_fft_cpx z)
/*< complex hyperbolic arcsine >*/
{
    float x, y;
    kiss_fft_cpx z2;

    ...  
    return z2;
}
\end{verbatim}




\subsection{{cacosf}}
Returns hyperbolic arccosine of a complex number. It uses \texttt{sf\_cacosf}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] hyperbolic arccosine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cacosf(kiss_fft_cpx z)
/*< complex hyperbolic arccosine >*/
{
    
    ...
    return z;
}
\end{verbatim}




\subsection{{catanf}}
Returns arctangent of a complex number. It uses \texttt{sf\_clogf} and \texttt{sf\_cdiv}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] arctangent of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_catanf(kiss_fft_cpx z)
/*< complex arctangent >*/
{
    kiss_fft_cpx z2;

    ...   
    return z;
}     
\end{verbatim}



\subsection{{catanhf}}
Returns hyperbolic arctangent of a complex number. It uses \texttt{sf\_catanf}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] hyperbolic arctangent of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_catanhf(kiss_fft_cpx z)
/*< complex hyperbolic arctangent >*/
{
    kiss_fft_cpx z2;
     
    ...
    return z;
}     
\end{verbatim}



\subsection{{casinhf}}
Returns hyperbolic arcsine of a complex number. It uses \texttt{sf\_casinf}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] hyperbolic arcsine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_casinhf(kiss_fft_cpx z)
/*< complex hyperbolic sine >*/
{
    kiss_fft_cpx z2;

    ...
    return z;
}     
\end{verbatim}



\subsection{{cacoshf}}
Returns hyperbolic arccosine of a complex number. It uses \texttt{sf\_casinf}.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[z] hyperbolic arccosine of a complex number. It is of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cacoshf(kiss_fft_cpx z)
/*< complex hyperbolic cosine >*/
{
    kiss_fft_cpx z2;

    ...
    return z;
}
\end{verbatim}




\subsection{{cpowf}}
Returns the complex base $a$ raised to complex power $b$.

\subsubsection*{Input parameters}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[a] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
   \item[b] a complex number. Must be of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Output}
\begin{desclist}{\tt }{\quad}[\tt ]
   \setlength\itemsep{0pt}
   \item[c] $a^b$. It is a complex number of type \texttt{kiss\_fft\_cpx}.
\end{desclist}

\subsubsection*{Definition}
\begin{verbatim}
kiss_fft_cpx sf_cpowf(kiss_fft_cpx a, kiss_fft_cpx b)
/*< complex power >*/
{
    float i, r, rho, theta;
    kiss_fft_cpx c;

    ...
    return c;
}
\end{verbatim}



