## 
 # F-D modeling for multi-shot I.C.
 ##
from rsfproj import *
import zomig,spmig,fdmod

# ------------------------------------------------------------
par = {
    'nt':3000, 'dt':0.001, 'ot':0, 'lt':'label1=time unit1=s',  
    'kt':100,    # wavelet delay
    'nx':401, 'ox':0, 'dx':0.01, 'lx':'label2=x unit2=km',
    'nz':201, 'oz':0, 'dz':0.01, 'lz':'label1=z unit1=km',
    #
    'nw':100,'ow':0,'jw':1,
    'verb':'y','tmx':20,
    'jsnap':1
    }
# add F-D modeling parameters
fdmod.param(par)

# ------------------------------------------------------------
# wavelet
Flow('wav',None,
         '''
         spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
         ricker1 frequency=15 |
         scale axis=123 |
         put label1=t label2=x label3=y 
         ''' % par)    
Result('wav','window n1=200 | graph title="" label1="t" label2=')

# ------------------------------------------------------------
# experiment setup

Flow('r_',None,'math n1=%(nx)d d1=%(dx)g o1=%(ox)g output=0' % par)
Flow('s_',None,'math n1=4      d1=1      o1=0.5    output=0' % par)

# receiver positions
Flow('zr','r_','math output="0" ')
Flow('xr','r_','math output="x1"')
Flow('rr',['xr','zr'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)
Plot('rr','window n1=2 | dd type=complex | window j2=10 | '
     + fdmod.cgraph('symbol=* plotcol=6',par))

# source positions
Flow('zs','s_','math output=0')
Flow('xs','s_','math output="x1"')
Flow('rs','s_','math output=1')
Flow('ss',['xs','zs','rs'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)
Plot('ss','window n1=2 | dd type=complex | window | '
     + fdmod.cgraph('symbol=v plotcol=2',par))

# ------------------------------------------------------------
# model
Flow('vm',None,
     '''
     math n1=%(nz)d o1=%(oz)g d1=%(dz)g output="1.5+0.5*x1" |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g
     ''' % par)
Flow('rm',None,
     '''
     spike nsp=2 mag=+0.5,-0.5
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=101,151 l1=150,%(nz)d |
     add add=2 |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g
     ''' % par)

Plot('vm',fdmod.cgrey('allpos=y bias=1.5 pclip=100',par))
Plot('rm',fdmod.cgrey('allpos=y bias=1.5 pclip=100',par))
Result('vm',['vm','ss','rr'],'Overlay')
Result('rm',['rm','ss','rr'],'Overlay')

# ------------------------------------------------------------
# finite-differences modeling
fdmod.amodel('do','wo','wav','vm','rm','ss','rr','dens=n',par)
fdmod.amodel('dd','ww','wav','vm','rm','ss','rr','dens=y',par)

# receiver data
Flow('dx','dd do','math a=${SOURCES[0]} b=${SOURCES[1]} "output=a-b"')
# source data
Flow('dw',None,
         '''
         spike nsp=4 mag=1,1,1,1
         n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d
         n2=%(nx)d d2=%(dx)g o2=%(ox)g k2=50,150,250,350 l2=51,151,251,351 |
         ricker1 frequency=15 |
         scale axis=123 |
         put label1=t label2=x |
         transp
         ''' % par)    

Result('wo','window j3=50' + fdmod.wgrey('pclip=95',par))
Result('ww','window j3=50' + fdmod.wgrey('pclip=95',par))

Result('do','transp |' + fdmod.dgrey('pclip=99',par))
Result('dd','transp |' + fdmod.dgrey('pclip=99',par))
Result('dx','transp |' + fdmod.dgrey('pclip=99',par))
Result('dw','transp |' + fdmod.dgrey('pclip=100',par))

Result('alld','dx dw',
       '''
       cat axis=3 space=n ${SOURCES[1:2]} |
       transp |
       grey gainpanel=e pclip=100
       ''')

# ------------------------------------------------------------
# slowness
Flow('so','vm','math output="1/input" | transp plane=12 | transp plane=23')

# ------------------------------------------------------------
# source/receiver data in the time-domain
Flow('dst0','dw','transp')
Flow('drt0','dx','transp')
Flow('dim0',['dst0','drt0'],'add mode=p ${SOURCES[0]} ${SOURCES[1]}',stdin=0)

# source/receiver data in the frequency-domain
zomig.wflds('dsw0','dst0',par)
zomig.wflds('drw0','drt0',par)

# S-R migration
spmig.imagePW('ii','cc','so','dsw0','drw0',par)
Result('ii','window | transp |' + fdmod.cgrey('pclip=100',par))

# datuming
for i in range(20):
    j = i + 1

    # datuming slabs
    minz=i*0.10
    nz  =  0.10/par['dz']
    tit = str(j*0.1)

    # slowness in datuming slab
    slo    = 'so'+str(i)
    Flow(slo,'so','window min3=%f n3=%d squeeze=n'%(minz,nz))

    # source/receiver wavefields at top of slab
    dswtop = 'dsw' + str(i)
    drwtop = 'drw' + str(i)

    # source/receiver wavefields at bottom of slab
    dswbot = 'dsw' + str(j)
    drwbot = 'drw' + str(j)

    # datuming
    spmig.datum(dswbot,drwbot,slo,dswtop,drwtop,par)

    # time-domain wavefields
    dstbot = 'dst' + str(j)
    drtbot = 'drt' + str(j)
    dimbot = 'dim' + str(j)

    Flow(dstbot,dswbot,'window | transp | pad n1out=1501 | fft1 inv=y opt=n')
    Flow(drtbot,drwbot,'window | transp | pad n1out=1501 | fft1 inv=y opt=n')
    Flow(dimbot,[dstbot,drtbot],'add mode=p ${SOURCES[0]} ${SOURCES[1]}',stdin=0)
    
# ------------------------------------------------------------
# wavefield plots
alls = map(lambda x: 'dst%d' % x,range(21))
allr = map(lambda x: 'drt%d' % x,range(21))
alli = map(lambda x: 'dim%d' % x,range(21))

for k in ('s','r','i'):
    all = 'all' + k
    bar = 'all' + k + 'bar'

    if(k=='s'): grp = alls
    if(k=='r'): grp = allr
    if(k=='i'): grp = alli
    
    Flow([all,bar],grp,
         '''
         cat axis=3 space=n ${SOURCES[:21]} |
         byte bar=${TARGETS[1]} gainpanel=a pclip=100
         ''',stdin=0)

    for i in range(21):
        tit = str(i*0.1)
        wfl =   'd' + k + 't' + str(i)
        
        Plot(wfl,[all,bar],
             'window n3=1 f3=%d |' % i +
             fdmod.dgrey('grid2=y title=%s bar=${SOURCES[1]}',par) % tit )

for i in range(21):
    dst = 'dst' + str(i)
    drt = 'drt' + str(i)
    dim = 'dit' + str(i)
    dat = 'dat' + str(i)
    Result(dat,[dst,drt,dim],'SideBySideAniso')

End()
