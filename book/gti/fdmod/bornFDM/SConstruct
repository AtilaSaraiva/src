## 
 # F-D modeling 
 ##
from rsfproj import *

# ------------------------------------------------------------
par = {
    'nt':451,    # no of time steps
    'dt':0.001,  #       time sampling
    'ot':0,      #       time origing
    'kt':100,    # wavelet delay
    #
    'ns':1,      # no of shots
    'os':2000,   #       shots origin
    'ds':20,     #       shots sampling
    #
    'nr':201,    # no of receivers
    'or':0,      #       receivers origin
    'dr':5,     #       receivers sampling
    #
    'ne':1,      # no of experiments
    'nm':4,      # no of models
    #
    'nx':201, 'ox':0, 'dx':5,
    'nz':101, 'oz':0, 'dz':5
    }
par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']
par['tmin']=par['ot']
par['tmax']=par['ot'] + (par['nt']-1) * par['dt']

# ------------------------------------------------------------

# ------------------------------------------------------------
# plotting functions

def igrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n wantscalebar=n
    title="" pclip=99 label1="z(m)" label2="x(m)" %s
    min1=%g max1=%g min2=%g max2=%g
    screenratio=0.5 screenht=7 
    ''' % (custom,par['zmin'],par['zmax'],par['xmin'],par['xmax'])

def dgrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n
    title="" pclip=99 label1="t(s)" label2="x(m)" %s
    min2=%g max2=%g
    ''' % (custom,par['xmin'],par['xmax'])

def pgraph(custom,par):
    return '''
    graph labelrot=n  %s
    yreverse=y symbolsz=4 wantaxis=n title=" " wantscalebar=n
    min1=%g max1=%g min2=%g max2=%g
    screenratio=0.5 screenht=7 
    ''' % (custom,par['xmin'],par['xmax'],par['zmin'],par['zmax'])

def wgrey(custom,par):
    return '''
    window min1=%g max1=%g min2=%g max2=%g |
    grey labelrot=n wantaxis=y wanttitle=n wantscalebar=n
    title="" pclip=99 label1="z(m)" label2="x(m)" %s
    screenratio=0.5 screenht=7
    ''' % (par['zmin'],par['zmax'],par['xmin'],par['xmax'],custom)

# ------------------------------------------------------------
# modeling function
def lmodel(dat,wfl,lid,liw,wav,vel,sou,rec,ref,custom):
    Flow([dat,wfl,lid,liw],[wav,vel,sou,rec,ref],
         '''
         /home/savap/RSF/user/savap/sfborn2d
         verb=y abc=y free=n snap=y jsnap=50 %s
         nbz=50 tz=0.02
         nbx=50 tx=0.02
         vel=${SOURCES[1]}
         sou=${SOURCES[2]}
         rec=${SOURCES[3]}
         ref=${SOURCES[4]}
         wfl=${TARGETS[1]}
         lid=${TARGETS[2]}
         liw=${TARGETS[3]}
         ''' % custom)

def amodel(dat,wfl,wav,vel,sou,rec,custom):
    Flow([dat,wfl],[wav,vel,sou,rec],
         '''
         afdm2d
         verb=y abc=y free=n snap=y jsnap=50 %s
         nbz=50 tz=0.02
         nbx=50 tx=0.02
         vel=${SOURCES[1]}
         sou=${SOURCES[2]}
         rec=${SOURCES[3]}
         wfl=${TARGETS[1]}
         ''' % custom)
# ------------------------------------------------------------
# wavelet
Flow('wav',None,
         '''
         spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
         ricker1 frequency=30 | 
         put label1=t label2=x label3=y 
         ''' % par)    
Result('wav','wav','window | graph title=" "')

# ------------------------------------------------------------
# velocity
Flow('vel',None,
     '''
     spike nsp=1 mag=2000
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par )
Result('vel','vel',igrey('color=j allpos=y',par))

def spmodel(mag1,mag2,par):
    return '''
    spike nsp=2 mag=%g,%g
    n1=%d o1=%g d1=%g k1=30,51  l1=50,101
    n2=%d o2=%g d2=%g 
    ''' % (mag1,mag2,
           par['nz'],par['oz'],par['dz'],
           par['nx'],par['ox'],par['dx'])

# reflectivity
Flow('lr0',None,spmodel(0.0,0.0,par))
Flow('lr1',None,spmodel(+.1,0.0,par))
Flow('lr2',None,spmodel(0.0,-.1,par))
Flow('lr3',None,spmodel(-0.1,+0.0,par))

# ------------------------------------------------------------
# experiments

Flow('ro',None,'math n1=%(nr)d d1=%(dr)g o1=%(or)g output=0' % par)
Flow('so',None,'math n1=1      d1=0      o1=0      output=0' % par)

for ie in range(par['ne']):
    
    # receivers
    zr = 'zr' + str(ie)
    xr = 'xr' + str(ie)
    rr = 'rr' + str(ie)

    Flow(zr,'ro','math output="0" ')
    Flow(xr,'ro','math output="x1"')
    Flow(rr,[xr,zr],
         '''
         cat axis=2 space=n
         ${SOURCES[0]} ${SOURCES[1]} | transp
         ''', stdin=0)
    Plot(rr,rr,'window n1=2 | dd type=complex | window j2=10 | '
         + pgraph('symbol=. plotcol=6',par))

    # sources
    zs = 'zs' + str(ie)
    xs = 'xs' + str(ie)
    rs = 'rs' + str(ie)
    ss = 'ss' + str(ie)
    
    Flow(zs,'so','math output=0')
    Flow(xs,'so','math output=500')
    Flow(rs,'so','math output=1')
    Flow(ss,[xs,zs,rs],
         '''
         cat axis=2 space=n
         ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
         ''', stdin=0)

    Plot(ss,ss,'window n1=2 | dd type=complex | window | '
         + pgraph('symbol=v plotcol=6',par))
    
# ------------------------------------------------------------
# loop over models
for im in range(par['nm']):
    lr = 'lr' + str(im)
    ld = 'ld' + str(im)
    lw = 'lw' + str(im)

    mm = 'mm' + str(im)
    mo = 'mo' + str(im)
    mx = 'mx' + str(im)
    
    Flow(mm,['vel',lr],'math r=${SOURCES[1]} output="input*(1+r)"')
    Result(mm,igrey('allpos=y pclip=100',par))

    Flow(mo,mm,'smooth rect1=20 rect2=10')
    Result(mm,igrey('allpos=y pclip=100',par))
    
    Flow(mx,[mm,mo],'math smo=${SOURCES[1]} output="(input-smo)/input"')
    Result(mx,igrey('allpos=y pclip=100',par))
    
    ss = 'ss0'
    rr = 'rr0'
    
    wm = 'wm' + str(im)
    wo = 'wo' + str(im)
    wx = 'wx' + str(im)
    ww = 'ww' + str(im)
    wy = 'wy' + str(im)

    dm = 'dm' + str(im)
    do = 'do' + str(im)
    dx = 'dx' + str(im)

    amodel(dm,wm,      'wav',mm,ss,rr,   'free=n')
    lmodel(do,wo,dx,wx,'wav',mo,ss,rr,mx,'free=n')

    Flow(ww,[wo,wx],'add scale=+1,-1 ${SOURCES[1]}')
    Flow(wy,[wm,wo],'add scale=-1,+1 ${SOURCES[1]}')

    Result(wm,wgrey('pclip=99 gainpanel=a',par))
    Result(wo,wgrey('pclip=99 gainpanel=a',par))
    Result(wx,wgrey('pclip=99 gainpanel=a',par))
    Result(ww,wgrey('pclip=99 gainpanel=a',par))
    Result(wy,wgrey('pclip=99 gainpanel=a',par))


# ------------------------------------------------------------

End()
