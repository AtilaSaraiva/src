## 
 # F-D modeling 
 ##
from rsfproj import *

# ------------------------------------------------------------
par = {
    'nt':600,    # no of time steps
    'dt':0.001,  #       time sampling
    'ot':0,      #       time origing
    'kt':100,    # wavelet delay
    #
    'ns':1,      # no of shots
    'os':2000,   #       shots origin
    'ds':20,     #       shots sampling
    #
    'nr':201,    # no of receivers
    'or':0,      #       receivers origin
    'dr':20,     #       receivers sampling
    #
    'ne':1,      # no of experiments
    'nm':4,      # no of models
    #
    'nx':201, 'ox':0, 'dx':20,
    'nz':201, 'oz':0, 'dz':20
    }
par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']
par['tmin']=par['ot']
par['tmax']=par['ot'] + (par['nt']-1) * par['dt']

# ------------------------------------------------------------

# ------------------------------------------------------------
# plotting functions

def igrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n wantscalebar=n
    title="" pclip=99 label1="z(ft)" label2="x(ft)" %s
    min1=%g max1=%g min2=%g max2=%g
    screenratio=1
    ''' % (custom,par['zmin'],par['zmax'],par['xmin'],par['xmax'])

def dgrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n
    title="" pclip=99 label1="t(s)" label2="x(ft)" %s
    min2=%g max2=%g
    ''' % (custom,par['xmin'],par['xmax'])

def pgraph(custom,par):
    return '''
    graph labelrot=n  %s
    yreverse=y symbolsz=4 wantaxis=n title=" " wantscalebar=n
    min1=%g max1=%g min2=%g max2=%g
    screenratio=1
    ''' % (custom,par['xmin'],par['xmax'],par['zmin'],par['zmax'])
# ------------------------------------------------------------
# modeling function
def amodel(dat,wfl,wav,vel,sou,rec,custom):
    Flow([dat,wfl],[wav,vel,sou,rec],
         '''
         /home/savap/RSF/user/savap/sfborn2d
         verb=y abc=y free=n snap=y jsnap=50 %s
         nbz=50 tz=0.001
         nbx=50 tx=0.001
         vel=${SOURCES[1]}
         sou=${SOURCES[2]}
         rec=${SOURCES[3]}
         wfl=${TARGETS[1]}
         ''' % custom)
# ------------------------------------------------------------
# wavelet
Flow('wav',None,
         '''
         spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
         ricker1 frequency=30 | 
         put label1=t label2=x label3=y 
         ''' % par)    
Result('wav','wav','window | graph title=" "')

# ------------------------------------------------------------
# velocity
Flow('vel',None,
     '''
     spike nsp=1 mag=8000
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par )
Result('vel','vel',igrey('color=j allpos=y',par))

def spmodel(mag1,mag2,par):
    return '''
    spike nsp=2 mag=%g,%g
    n1=%d o1=%g d1=%g k1=75,75  l1=76,76
    n2=%d o2=%g d2=%g k2=100,145 l2=101,146
    ''' % (mag1,mag2,
           par['nz'],par['oz'],par['dz'],
           par['nx'],par['ox'],par['dx'])

# reflectivity
Flow('ref1',None,spmodel(+1000,    0,par))
Flow('ref2',None,spmodel(    0,-1500,par))
Flow('ref3',None,spmodel(+1000,-1500,par))

# ------------------------------------------------------------
# models
Flow('mm0','vel','window')
Flow('mm1','vel ref1','add ${SOURCES[1]} scale=1,3')
Flow('mm2','vel ref2','add ${SOURCES[1]}')
Flow('mm3','vel ref3','add ${SOURCES[1]}')

# ------------------------------------------------------------
# experiments

Flow('ro',None,'math n1=%(nr)d d1=%(dr)g o1=%(or)g output=0' % par)
Flow('so',None,'math n1=1      d1=0      o1=0      output=0' % par)

for ie in range(par['ne']):
    
    # receivers
    zr = 'zr' + str(ie)
    xr = 'xr' + str(ie)
    rr = 'rr' + str(ie)

    Flow(zr,'ro','math output="100" ')
    Flow(xr,'ro','math output="x1"')
    Flow(rr,[xr,zr],
         '''
         cat axis=2 space=n
         ${SOURCES[0]} ${SOURCES[1]} | transp
         ''', stdin=0)
    Plot(rr,rr,'window n1=2 | dd type=complex | window j2=10 | '
         + pgraph('symbol=. plotcol=6',par))

    # sources
    zs = 'zs' + str(ie)
    xs = 'xs' + str(ie)
    rs = 'rs' + str(ie)
    ss = 'ss' + str(ie)
    
    Flow(zs,'so','math output=2000')
    Flow(xs,'so','math output=2000')
    Flow(rs,'so','math output=1')
    Flow(ss,[xs,zs,rs],
         '''
         cat axis=2 space=n
         ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
         ''', stdin=0)

    Plot(ss,ss,'window n1=2 | dd type=complex | window | '
         + pgraph('symbol=v plotcol=6',par))
    
# ------------------------------------------------------------
# F-D modeling

# loop over models
for im in range(par['nm']):
    mm = 'mm' + str(im)
    Result(mm,mm,igrey('allpos=y pclip=100',par))

    ss = 'ss0'
    rr = 'rr0'
    
    dd = 'dd' + '-' + str(im)
    ww = 'ww' + '-' + str(im)
    do = 'do' + '-' + str(im)
    wo = 'wo' + '-' + str(im)
    
    amodel(dd,ww,'wav',mm,ss,rr,'free=n')

    if(im!=0):
        Flow(wo,[ww,'ww-0'],'add ${SOURCES[1]} scale=1,-1')
        Flow(do,[dd,'dd-0'],'add ${SOURCES[1]} scale=1,-1')
    else:
        Flow(wo,ww,'window')
        Flow(do,dd,'window')
    
    Plot(wo,wo,
         '''
         window n3=1 f3=9 min1=%(oz)g n1=%(nz)d min2=%(ox)g n2=%(nx)d |
         ''' % par + igrey('pclip=97',par))
    Result(wo,[wo,ss,rr],'Overlay')

    Result(do,do,'window j2=4 | transp |' + dgrey('',par))
    
# ------------------------------------------------------------

Flow('one','wo-1 wo-2','add ${SOURCES[1]}')
Flow('two','wo-3','window')

Plot('one','one',
       '''
       window n3=1 f3=8 min1=%(oz)g n1=%(nz)d min2=%(ox)g n2=%(nx)d |
       ''' % par + igrey('pclip=95',par))
Plot('two','two',
       '''
       window n3=1 f3=8 min1=%(oz)g n1=%(nz)d min2=%(ox)g n2=%(nx)d |
       ''' % par + igrey('pclip=95',par))

Result('all','one two','Movie')
End()
