from rsfproj import *
import random, string, math

random.seed(2004)

Fetch('beinew.HH','midpts')
Flow('bei','beinew.HH','dd form=native | transp plane=24')

Flow('sig',None,
     '''
     sigmoid n1=200 d2=0.008 n2=200 | put n3=1 |
     smooth rect1=3 diff1=1 | pad beg1=25 | smooth rect1=3 | halfint inv=1 |
     preconstkirch zero=y inv=y h0=0 dh=0.008 nh=61 vel=1.5 
     ''')

import os
private = {'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
           'server':os.environ.get('BEG_SERVER')}


Fetch('elf0.H','elf',private)

# edit trace? 
Flow('elf','elf0.H',
     '''
     dd form=native | cut n3=1 n2=1 n1=300 f3=663 f2=67 |
     transp plane=24 memsize=500
     ''')

par={
    'bei': {
    'minvel': 1.3,
    'vel1': 1.8,
    'n1': 990,
    'tp': 0,
    'slope': 0.385,
    'padx': 521,
    'nv': 48,
    'v0': 1.3,
    'dv': 0.025,
    'nx': 250,
    'padt': 1024,
    'padt2': 2048,
    'lam': 80,
    'eps': 20,
    'vslope': 0.67,
    'vx0': 1.5
    },
    'sig': {
    'minvel': 2,
    'vel1': 1.5,
    'n1': 225,
    'padx': 421,
    'nv': 100,
    'v0': 2,
    'dv': -0.01,
    'nx': 200,
    'padt': 1024,
    'padt2': 2048,
    'lam': 100,
    'eps': 100,
    },
    'elf': {
    'minvel': 1400,
    'vel1': 2000,
    'nx': 1000,
    'padx': 1025,
    'padt': 1024,
    'padt2': 4096,
    'nv': 120,
    'v0': 1400,
    'dv': 25,
    'vslope': 0.00025,
    'eps': 100,
    'lam': 100,
    'n1': 800,
    'vslope': 1200,
    'vx0': 2000
    }
    }

for test in ['sig','bei','elf']:
#for test in ['bei']:
    mig = test+'-mig'
    cip = test+'-cip'
    migr = test+'-migr'
    pad = test+'-pad'
    ckx = test+'-ckx'
    vlf = test+'-vlf'
    vlf2 = test+'-vlf2'
    vlfr = test+'-vlfr'
    npk = test+'-npk'
    fmg = test+'-fmg'
    fnm = test+'-fnm'
    smo = test+'-smo'
    agc = test+'-agc'
    dix = test+'-dix'
    dnx = test+'-dnx'
    slp = test+'-slp'
    pdx = test+'-pdx'
    ref = test+'-ref'
    dip = test+'-dip'
    flt = test+'-flt'
    flt2 = test+'-flt2'
    fnm2 = test+'-fnm2'
    vg = test+'-vg'

    stk = test + '-stk'
    exp = test + '-exp'
    cos = test + '-cos'
    sin = test + '-sin'

    dif = test + '-dif'

    par[test]['v00'] = min(par[test]['v0'],
                           par[test]['v0']+par[test]['dv']*par[test]['nv'])

    def run(string):
        return string % par[test]
    
    Flow(mig,test,run('preconstkirch vel=%(minvel)g'))
    Flow(mig+'1',test,run('preconstkirch vel=%(vel1)g'))

    mig2cip = run('''
    transp plane=24 memsize=500 | halfint inv=1 adj=1 | window n1=%(n1)d
    ''')
    Flow(cip,mig,mig2cip)
    Flow(cip+'1',mig+'1',mig2cip)

    Flow(migr,cip,'stack norm=y')
    Plot(migr,'grey title=Migration0')

    Flow(migr+'1',cip+'1','stack norm=y')
    Plot(migr+'1','grey title=Migration1')
    
    Flow(pad,cip,run('pad n3=%(padx)d'))
    Flow(ckx,pad,'cosft sign3=1')
    Flow(vlf,ckx,
         run('''fourvc nv=%(nv)d dv=%(dv)g v0=%(v0)g
         pad=%(padt)d pad2=%(padt2)d |
         cosft sign3=-1 | window n3=%(nx)d'''))
    Flow(vlf2,pad,
         run('''transp plane=23 memsize=500 |
         fourvc2 nv=%(nv)d dv=%(dv)g v0=%(v0)g
         pad=%(padt)d pad2=%(padt2)d |
         window n2=%(nx)d | transp plane=23 memsize=500'''))

    Flow(vlf2+'d',pad,
         run('''transp plane=23 memsize=500 |
         fourvcd nv=%(nv)d dv=%(dv)g v0=%(v0)g
         pad=%(padt)d pad2=%(padt2)d |
         window n2=%(nx)d | transp plane=23 memsize=500'''))

    Flow(dif,vlf,
         '''
         transp plane=12 |
         deriv order=1 |
         transp plane=12 
         ''')

    beta=math.pi

    Flow(stk,vlf,'stack')
    Flow(vlf2+'c',vlf2+'d','scale axis=3 | scale dscale=%g | smooth rect2=10 rect1=10 | rtoc' % beta)
    Flow(exp,[vlf,vlf2+'c'],
         '''
         rtoc | math semb=${SOURCES[1]} output="input*exp(I*semb)" |
         stack | real
         ''')
    Result(exp,exp,'grey title=Brian')

    Flow(cos,vlf2+'c','real | math output="cos(input)" ')
             
    Flow(vlfr,vlf,run('window n2=1 min2=%(vel1)g'))
    Plot(vlfr,'grey title="Velocity Continuation 0 -> 1" ')

    Result(migr,[migr,migr+'1',vlfr],'SideBySideAniso')

    if test in ['bei','elf']:
        pick = run('''mutter v0=%(vslope)g x0=%(vx0)g half=n | 
        blindpick2 eps=%(eps)g lam=%(lam)g | 
        transp plane=23 memsize=500''')
    else:
        pick = run('''blindpick2 eps=%(eps)g lam=%(lam)g | 
        transp plane=23 memsize=500''')

    Flow(npk,vlf2,pick) # + ' | window max1=3.5')
    Plot(npk,
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g 
         scalebar=y title="Picked RMS Velocity"
         label1="Time (s)" label2="Lateral (km)"
         barlabel="Velocity (km/s)"
         '''))
    Plot(npk+'1',npk,
         '''
         contour nc=40 wanttitle=n plotcol=0 plotfat=10
         scalebar=y wantaxis=n barlabel="Velocity (km/s)"
         ''')
    Plot(npk+'2',npk,
         '''
         contour nc=40 wanttitle=n plotcol=7 plotfat=1
         scalebar=y wantaxis=n barlabel="Velocity (km/s)"
         ''')
    Result(npk,[npk,npk+'1',npk+'2'],'Overlay')
    Plot(npk+'0',[npk,npk+'1',npk+'2'],'Overlay')
    
    Flow(fmg,[vlf,npk],
         #'window max1=3.5 |
         'slice pick=${SOURCES[1]} | transp plane=23')
    Result(fmg,'grey title=Slice label1="Time (s)" label2="Lateral (km)" ')

    Plot(fmg,agc,
         '''
         grey title="Time-Migrated Image"
         label1="Time (s)" label2="Lateral (km)"
         ''')
    Result(fmg+'1',[fmg,npk],'SideBySideIso',vppen='txscale=1.2')

    Flow(slp,agc,'dip rect1=10 rect2=10')
    Plot(slp,
         '''
         grey title="Estimated Dips" scalebar=y Xcolor=j
         label1="Time (s)" label2="Lateral (km)" pclip=100
         ''')
    Result(slp,[fmg,slp],'SideBySideAniso')


    nsp = 100
    k2 = map(lambda x: random.randint(1,250), xrange(nsp))
    k1 = map(lambda x: random.randint(1,876), xrange(nsp))
    
    Flow(smo,slp,
         '''
         spike nsp=%d k1=%s k2=%s
         n1=876 n2=250 d2=0.0335 o2=7.705 |
         pwdsmooth2 dip=bei-slp.rsf rect2=20 rect1=7
         ''' % (nsp,
                string.join(map(str,k1),','),
                string.join(map(str,k2),',')))
    Result(smo,
         '''
         grey wanttitle=n allpos=y
         label1="Time (s)" label2="Lateral (km)" 
         ''')

    Flow(vg,[agc,slp],
         'pwdsigk dips=${SOURCES[1]} verb=y nliter=5 niter=100')

    Plot(vg,
         '''
         grey title="Structure Enhancing"
         label1="Time (s)" label2="Lateral (km)"
         ''')

    Plot(vg+'2',[agc,vg],
         '''
         add scale=1,-1 ${SOURCES[1]} |
         grey title="Removed Noise" clip=3.27232
         label1="Time (s)" label2="Lateral (km)"
         ''')
    
    Result(vg,[vg,vg+'2'],'SideBySideAniso')

    Flow(fmg+'2',[vlf2,npk], #'window max1=3.5 |
         'slice pick=${SOURCES[1]}')

    Flow([pdx,pdx+'0'],[npk,fmg+'2',slp],
         '''
         pwdix slope=${SOURCES[2]}
         weight=${SOURCES[1]} vrmsout=${TARGETS[1]}
         niter=50 verb=y ncycle=10 rect1=40
         ''')
    Plot(pdx,
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g
         Xminval=1.3 Xmaxval=3 Xclip=2
         scalebar=y barlabel="Estimated Interval Velocity (km/s)"
         label1="Time (s)" label2="Lateral (km)"
         wanttitle=n 
         '''))
    Plot(pdx+'0',pdx+'0',
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g
         Xminval=1.3 Xmaxval=2.5 Xclip=1.5
         scalebar=y title="Predicted RMS Velocity"
         label1="Time (s)" label2="Lateral (km)" 
         barlabel="Velocity (km/s)"
         '''))
    Result(pdx,[npk,pdx+'0'],'SideBySideAniso')


    Flow([dix,dix+'0'],[npk,fmg+'2'],
         '''
         dix rect1=40 rect2=5
         weight=${SOURCES[1]} vrmsout=${TARGETS[1]}
         niter=30
         ''')
    Plot(dix,
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g 
         scalebar=y barlabel="Interval Velocity (km/s)"
         label1="Time (s)" label2="Lateral (km)" title="Stationary Shaping"
         '''))
    Plot(dix+'0',dix+'0',
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g 
         scalebar=y barlabel="Predicted RMS Velocity (km/s)"
         label1="Time (s)" label2="Lateral (km)" title="Stationary Shaping"
         '''))
    Result(dix,[dix,dix+'0'],'SideBySideIso',vppen='txscale=1.2')

    dclip = 0.000005

    Flow(dnx+'x',dix,'igrad square=y')
    Flow(dnx+'y',dix,'transp | igrad square=y | transp')
    Flow(dnx+'g',[dnx+'x',dnx+'y'],'add ${SOURCES[1]}')
    Flow(dnx+'px',dnx+'g',
         'math output="1+40/(1+input/%f)" | dd type=int' % dclip)
    Flow(dnx+'py',dnx+'g',
         'math output="1+5/(1+input/%f)" | dd type=int' % dclip)
    Flow([dnx,dnx+'0'],[npk,fmg+'2',dnx+'px',dnx+'py'],
         '''
         dix rect1=${SOURCES[2]} rect2=${SOURCES[3]}
         weight=${SOURCES[1]} vrmsout=${TARGETS[1]}
         niter=30 nonstat=y
         ''')
    Plot(dnx,
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g 
         scalebar=y barlabel="Interval Velocity (km/s)"
         label1="Time (s)" label2="Lateral (km)" title="Nonstationary Shaping"
         '''))
    Plot(dnx+'0',dnx+'0',
         run('''grey allpos=y pclip=100 color=j bias=%(v00)g 
         scalebar=y barlabel="Predicted RMS Velocity (km/s)"
         label1="Time (s)" label2="Lateral (km)" title="Nonstationary Shaping"
         '''))
    Result(dnx,[dnx,dnx+'0'],'SideBySideIso',vppen='txscale=1.2')

    Flow(agc,fmg,'agc rect1=200') # | window max1=3.5')
    Result(agc,
           '''
           grey title="Picked" pclip=98
           label1="Time (s)" label2="Lateral (km)"
           ''')

    Flow(ref,[vlf,npk],
         # 'window max1=3.5 | '
         'transp | refer ref=${SOURCES[1]} | transp')

    Plot(agc+'w',agc,
         '''
         window j2=2 |
         wiggle transp=y yreverse=y scalebar=y wantaxis=n wanttitle=n
         plotcol=7 poly=y
         ''')

    
    Plot(vg+'w',vg,
         '''
         window j2=2 |
         wiggle transp=y yreverse=y scalebar=y wantaxis=n wanttitle=n
         plotcol=7 poly=y
         ''')
    
    Result(dix+'w',[dix,agc+'w'],'Overlay')
    Result(pdx+'w',[pdx,vg+'w'],'Overlay')

    Result(pdx+'p',[agc,pdx],
           '''
           math v=${SOURCES[1]} output="input+20*(v-2)" |
           grey color=j wanttitle=n label1="Time (s)" label2="Lateral (km)"
           ''')

    Flow(dip,ref,
         run('''dip rect1=20 rect2=5 rect3=5 memsize=500
         w1=%(n1)d w2=100 w3=100 p1=1'''))
    Flow(flt,[ref,dip],'flat dip=${SOURCES[1]} i0=%d' % (par[test]['nv']-1))
    Flow(flt2,[vlf2,npk,dip],
         #                  window max1=3.5 |
         '''
         transp | refer ref=${SOURCES[1]} | transp |
         flat dip=${SOURCES[2]} i0=%d
         ''' % (par[test]['nv']-1))
 
    Flow(fnm,[vlf2,vlf],
         'add mode=p ${SOURCES[1]} | stack | agc rect1=200')
    Result(fnm,'grey pclip=98 title="Feynman (Non-flat)" ')
    
    Flow(fnm2,[flt,flt2],'add mode=p ${SOURCES[1]} | stack | agc rect1=200')
    Result(fnm2,'grey pclip=98 title="Feynman (Flattened)" ')

###########################################################################
End()
