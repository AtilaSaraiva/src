from rsfproj import *

par = {
    'nz':731,  'dz':10, 'oz':-1800, # z (m)
    'nx':1443, 'dx':10, 'ox':+2000, # x (m)
    'nt':4000,   # no of time steps
    'dt':0.0005, #       time sampling
    'ot':0,      #       time origing
    'kt':100,    # wavelet delay
    }
# ------------------------------------------------------------
par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']
# ------------------------------------------------------------

nn = par['nz']*par['nx']
nn = par['nx']*2

def igrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n title="" pclip=99
    label1="z" label2="x" unit1=m unit2=m
    %s
    min1=%g max1=%g min2=%g max2=%g
    ''' % (custom,par['zmin'],par['zmax'],par['xmin'],par['xmax'])

def igraph(custom,par):
    return '''
    graph labelrot=n %s
    yreverse=y wantaxis=n title=" " 
    label1="z" label2="x" unit1=m unit2=m
    min1=%g max1=%g min2=%g max2=%g
    ''' % (custom,par['xmin'],par['xmax'],par['zmin'],par['zmax'])

def dgrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n title="" pclip=99
    label1="t" label2="x" unit1=s unit2=m
    %s
    min2=%g max2=%g
    ''' % (custom,par['xmin'],par['xmax'])

# ------------------------------------------------------------
# modeling function
def amodel(dat,wfl,  wav,vel,sou,rec,custom):
    Flow( [dat,wfl],[wav,vel,sou,rec],
         '''
         afdm2d verb=y abc=y free=n snap=y jsnap=200 %s
         nbz=250 tz=0.001
         nbx=250 tx=0.001
         vel=${SOURCES[1]}
         sou=${SOURCES[2]}
         rec=${SOURCES[3]}
         wfl=${TARGETS[1]}
         ''' % custom)

# ------------------------------------------------------------
# model

velo = 'huskyvelo.HH'
topo = 'huskyelev.HH'

Fetch(velo,'husky')
Fetch(topo,'husky')

Flow('velo',velo,'dd form=native')
Flow('topo',topo,'dd form=native')

Plot('velo',igrey('allpos=y',par))
Plot('topo',igraph('plotcol=0 plotfat=8',par))

Result('model',['velo','topo'],'Overlay')

# ------------------------------------------------------------

Flow('edge','velo','igrad square=y')
Flow('mask','edge','mask min=1')

for x in ('x1','x2'):
    if(x=='x1'): o='zs'
    if(x=='x2'): o='xs'

    Flow(o,'edge mask',
         '''
         math output=%s |
         put n1=1 n2=%d |
         headerwindow mask=${SOURCES[1]} |
         window
         ''' % (x,par['nz']*par['nx']))

Flow('rs','edge mask',
     '''
     scale axis=123 |
     put n1=1 n2=%d |
     headerwindow mask=${SOURCES[1]} |
     window
     ''' % (par['nz']*par['nx']))

Flow('ss',['xs','zs','rs'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)

Plot('ss','window n1=2 | dd type=complex | window | '
     + igraph('symbol=. plotcol=6',par))

Result('ss',['velo','ss'],'Overlay')

# ------------------------------------------------------------

#Flow('acim',velo,'math output="input*2000"')
#
#Flow('refl','acim','ai2refl')
#Plot('refl','refl',igrey('',par))
#
#Flow('thrs','refl','map2list threshold=0.01 verb=y')
# ------------------------------------------------------------
# source

#Flow('xs','thrs','window n2=1 f2=0')
#Flow('zs','thrs','window n2=1 f2=1')
#Flow('rs','thrs','window n2=1 f2=2')

#Flow('ss',['xs','zs','rs'],
#     '''
#     cat axis=2 space=n
#     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
#     ''', stdin=0)

#Plot('ss','window n1=2 | dd type=complex | window | '
#     + igraph('symbol=. plotcol=6',par))

#Result('ss',['velo','ss'],'Overlay')
#
# ------------------------------------------------------------
# receiver (topo)

Flow('zr',topo,'imag')
Flow('xr',topo,'real')
Flow('rr',['xr','zr'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)
Plot('rr','window n1=2 | dd type=complex | window j2=10 | '
     + igraph('symbol=* plotcol=5',par))

Result('rr',['velo','rr'],'Overlay')

# ------------------------------------------------------------
# receiver (flat)

Flow('ro',None,'math n1=%(nx)d d1=%(dx)g o1=%(ox)g output=0' % par)

Flow('zo','ro','math output="%g"' % par['oz'])
Flow('xo','ro','math output="x1"')
Flow('oo',['xo','zo'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)

Plot('oo','window n1=2 | dd type=complex | window j2=10 | '
     + igraph('symbol=* plotcol=5',par))

Result('oo',['velo','oo'],'Overlay')
# ------------------------------------------------------------
# wavelet

Flow('wav',None,
     '''
     spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
     ricker1 frequency=20 | 
     put label1=t label2=x label3=y 
     ''' % par)    
Result('wav','wav','window n1=1000 | graph title=" "')

# ------------------------------------------------------------
# modeling

amodel('dd','ww','wav','velo','ss','rr','free=n')
amodel('do','wo','wav','velo','ss','oo','free=n')

# ------------------------------------------------------------

Result('ww',
       'window n3=1 f3=4 min1=%(oz)g n1=%(nz)d min2=%(ox)g n2=%(nx)d |' % par
       + igrey('pclip=99',par))
Result('wo',
       'window n3=1 f3=4 min1=%(oz)g n1=%(nz)d min2=%(ox)g n2=%(nx)d |' % par
       + igrey('pclip=99',par))

Result('dd','transp |' + dgrey('',par))
Result('do','transp |' + dgrey('',par))

# ------------------------------------------------------------

End()
