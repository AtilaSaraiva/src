from rsfproj import *

par = {
    'nz':75,  'dz':10,    'oz':0,   
    'nx':100, 'dx':10,    'ox':-500,
    'ny':100, 'dy':10,    'oy':-500,
    #
    'nt':200,'dt':0.0025,'ot':0,
#
    'ng':30, 'dg':2,'og':-60,
    'nh':181,'dh':2,'oh':0,
#
    'ng':361,'dg':0.5,'og':-90,
    'nh':361,'dh':0.5,'oh':0,
    }

par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['ymin']=par['oy']
par['ymax']=par['oy'] + (par['ny']-1) * par['dy']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']

par['xmid']=par['nx']/2.
par['ymid']=par['ny']/2.

par['zsou']=par['oz']
par['xsou']=par['ox'] + par['xmid'] * par['dx']
par['ysou']=par['oy'] + par['ymid'] * par['dy']

def igrey(custom):
    return '''
    grey labelrot=n pclip=100 color=F title=""
    wantscalebar=y
    %s
    ''' % (custom)

def grex(custom,par):
    return '''
    grey labelrot=n pclip=100 title=""
    min2=%g max2=%g min1=%g max1=%g
    %s
    ''' % (par['xmin'],par['xmax'],par['zmin'],par['zmax'],custom)
def grey(custom,par):
    return '''
    grey labelrot=n pclip=100 title=""
    min2=%g max2=%g min1=%g max1=%g
    %s
    ''' % (par['ymin'],par['ymax'],par['zmin'],par['zmax'],custom)

def grax(custom,par):
    return '''
    graph labelrot=n yreverse=y title=""
    min1=%g max1=%g min2=%g max2=%g
    %s
    ''' % (par['xmin'],par['xmax'],par['zmin'],par['zmax'],custom)
def gray(custom,par):
    return '''
    graph labelrot=n yreverse=y title=""
    min1=%g max1=%g min2=%g max2=%g
    %s
    ''' % (par['ymin'],par['ymax'],par['zmin'],par['zmax'],custom)

# ------------------------------------------------------------

# velocity
Flow('vel',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d d1=%(dz)g o1=%(oz)g k1=025 l1=075
     n2=%(nx)d d2=%(dx)g o2=%(ox)g k2=051 l2=100
     n3=%(ny)d d3=%(dy)g o3=%(oy)g k3=051 l3=100 |
     scale axis=123 |
     math output="2000+2500*input" |
     put label1=z label2=x label3=y
     ''' % par)

# smooth velocity
Flow('vsm','vel','smooth rect1=3 rect2=3 rect3=3 repeat=1')

# ------------------------------------------------------------

# Huygens wavefront tracing
Flow('hwt','vsm',
     '''
     hwt3d verb=y forceray=n scaleray=2 
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     ng=%(ng)d og=%(og)g dg=%(dg)g
     nh=%(nh)d oh=%(oh)g dh=%(dh)g
     ''' % par)

Flow('rrt','vsm',
     '''
     rrt3d verb=y scaleray=2 nray=100000 jray=10000 pick=2 fill=1
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     gmin=-90 gmax=90 hmin=0 hmax=180
     ''' % par)

# fast-marching eikonal solver
Flow('eik','vel','eikonal yshot=%(xsou)g xshot=%(ysou)g zshot=%(zsou)g'%par)

for i in range(3):
    par['pick']=i

    # interpolation
    tim = 'tim' + str(i)
    Flow(tim,'hwt',
         '''
         int3d verb=y pick=%(pick)d fill=1
         nz=%(nz)d oz=%(oz)g dz=%(dz)g
         nx=%(nx)d ox=%(ox)g dx=%(dx)g
         ny=%(ny)d oy=%(oy)g dy=%(dy)g
         ''' % par)

for j in range(0,par['ny'],10):

    # eikonal traveltime cube
    emap = 'emap' + str(j)
    Flow(emap,'eik','window n3=1 f3=%d' % j)

    # random ray traveltime cube
    rmap = 'rmap' + str(j)
    Flow(rmap,'rrt','window n3=1 f3=%d' % j)

    # HWT traveltime cubes - various branch selection methods
    hmap = 'hmap' + str(j)
    for i in range(3):
        htmp = hmap + '-' + str(i)
        Flow(htmp,tim,'window n3=1 f3=%d' % j)

    # combined plot (eikonal + HWT[0-2])
    time = 'time' + str(j)
    Flow(time,[emap,hmap+'-0',hmap+'-1',hmap+'-2',rmap],
         '''
         cat axis=3 space=n
         ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} ${SOURCES[3]} ${SOURCES[4]} 
         ''', stdin=0)
    Result(time,'grey pclip=100 wantscalebar=y allpos=y color=j gainpanel=a')

# ------------------------------------------------------------

# plot x,y,z at various time steps
for it in range(par['nt']):
    ttt = 'ttt' + str(it)
    xxx = 'xxx' + str(it)
    yyy = 'yyy' + str(it)
    zzz = 'zzz' + str(it)
    
    Flow(ttt,'hwt','window n4=1 f4=%d' % it)
    Flow(xxx,ttt,'window n1=1 f1=0')
    Flow(yyy,ttt,'window n1=1 f1=1')
    Flow(zzz,ttt,'window n1=1 f1=2')

    Plot(xxx,xxx,igrey('bias=%(xsou)g title=x') % par)
    Plot(yyy,yyy,igrey('bias=%(ysou)g title=y') % par)
    Plot(zzz,zzz,igrey('bias=%(zsou)g title=z') % par)
    
    Result(ttt,[xxx,yyy,zzz],'SideBySideAniso')

# ------------------------------------------------------------

# vertical slice (x)
Flow('xray','hwt',
     '''
     window n1=2 j1=2 n3=1 min3=0 |
     dd type=complex | window
     ''')
Plot('xvel','vel','window n3=1 f3=%(ymid)d |' % par
     + grex('grid=y gridcol=0 allpos=y bias=1000',par))
Plot('xray','xray','window j2=5 |'
     + grax('plotcol=1 label1=x label2=z',par) )
Result('xray','xvel xray','Overlay')

# vertical slice (y)
Flow('yray','hwt',
     '''
     window n1=2 f1=1 n3=1 min3=90 |
     dd type=complex | window
     ''')
Plot('yvel','vel','window n2=1 f2=%(xmid)d |' % par
     + grey('grid=y gridcol=0 allpos=y bias=1000',par))
Plot('yray','yray','window j2=5 |'
     + gray('plotcol=1 label1=y label2=z',par) )
Result('yray','yvel yray','Overlay')

# ------------------------------------------------------------

# wavefront horizontal projections
Flow('wft','hwt',
     '''
     window n2=1 f2=%d n1=2 f1=0 |
     dd type=complex |
     window
     ''' % 120)
Result('wft','wft',
       '''
       window j2=5 | transp plane=23 |
       graph label1=x label2=y
       min1=%g max1=%g min2=%g max2=%g
       ''' % (par['xmin'],par['xmax'],par['ymin'],par['ymax']) )
# ------------------------------------------------------------


End()
