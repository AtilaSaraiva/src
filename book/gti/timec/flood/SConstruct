from rsfproj import *
import pplot

par = {
    'nz':600, 'dz':40,    'oz':0,    'jz':1,
    'nx':400, 'dx':110,   'ox':5500, 'jx':1,
    'ny':150, 'dy':110,   'oy':38500,'jy':1,
    #
    'nt':600, 'dt':0.0075,'ot':0,
    'ng':2881,'dg':0.0625,'og':-90,
    'nh':361, 'dh':0.5,   'oh':0,
    #    
    'nray2d':10000, 'jray':1000,
    'nray3d':3000000,
    'fill':1,'pick':2
    }
par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['ymin']=par['oy']
par['ymax']=par['oy'] + (par['ny']-1) * par['dy']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']

par['zsou']=0
par['xsou']=27000
par['ysou']=46200

def igrey(custom):
    return '''
    grey labelrot=n pclip=100 color=F title=""
    wantscalebar=n
    %s
    ''' % (custom)
# ------------------------------------------------------------

# velocity
Flow('vel2d','./DATA/vel3d.HH',
     '''
     window
     n1=%(nz)d j1=%(jz)d min1=%(oz)g
     n2=%(nx)d j2=%(jx)d min2=%(ox)g
     n3=1      j3=%(jy)d min3=%(ysou)g |
     put label1=z label2=x label3=y |
     smooth rect1=1 rect2=1 
     ''' % par)
Result('vel2d','vel2d',igrey('color=j allpos=y bias=5000'))

Flow('vel3d','./DATA/vel3d.HH',
     '''
     window
     n1=%(nz)d j1=%(jz)d min1=%(oz)g
     n2=%(nx)d j2=%(jx)d min2=%(ox)g
     n3=%(ny)d j3=%(jy)d min3=%(oy)g |
     put label1=z label2=x label3=y |
     smooth rect1=1 rect2=1 rect3=1 
     ''' % par)
# ------------------------------------------------------------

# Huygens wavefront tracing
Flow('hwt2d','vel2d',
     '''
     hwt3d verb=y 
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     ng=%(ng)d og=%(og)g dg=%(dg)g
     nh=1      oh=0      dh=%(dh)g
     ''' % par)
Flow('hwt3d','vel3d',
     '''
     hwt3d verb=y 
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     ng=%(ng)d og=%(og)g dg=%(dg)g
     nh=%(nh)d oh=%(oh)g dh=%(dh)g
     ''' % par)

# Interpolation to Cartesian grid
Flow('tim2d','hwt2d',
     '''
     int3d verb=y pick=%(pick)d fill=%(fill)d
     nz=%(nz)d oz=%(oz)g   dz=%(dz)g
     nx=%(nx)d ox=%(ox)g   dx=%(dx)g
     ny=1      oy=%(ysou)g dy=%(dy)g
     ''' % par)
Flow('tim3d','hwt3d',
     '''
     int3d verb=y pick=%(pick)d fill=%(fill)d
     nz=%(nz)d oz=%(oz)g dz=%(dz)g
     nx=%(nx)d ox=%(ox)g dx=%(dx)g
     ny=%(ny)d oy=%(oy)g dy=%(dy)g
     ''' % par)
Flow('tim2ds','tim3d','window n3=1 min3=%(ysou)g' % par)

# Ray tracing + interpolation on Cartesian grid
Flow('rrt2d','vel2d',
     '''
     rrt3d verb=y nray=%(nray2d)d jray=%(jray)d
     pick=%(pick)d fill=%(fill)d
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     gmin=-90. gmax=90. hmin=0 hmax=0
     ''' % par)
Flow('rrt3d','vel3d',
     '''
     rrt3d verb=y nray=%(nray3d)d jray=%(jray)d
     pick=%(pick)d fill=%(fill)d
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     gmin=-90. gmax=90. hmin=0 hmax=180
     ''' % par)
Flow('rrt2ds','rrt3d','window n3=1 min3=%(ysou)g' % par)

# fast-marching eikonal solver
Flow('eik2d','vel2d','eikonal yshot=%(xsou)g xshot=%(ysou)g zshot=%(zsou)g'%par)
Flow('eik3d','vel3d','eikonal yshot=%(xsou)g xshot=%(ysou)g zshot=%(zsou)g'%par)
Flow('eik2ds','eik3d','window n3=1 min3=%(ysou)g' % par)

# ------------------------------------------------------------
# PLOTS
# ------------------------------------------------------------

# 2D run
Flow('time2d',['eik2d','tim2d','rrt2d'],
     '''
     cat axis=3 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]}
     ''', stdin=0)
Result('time2d','grey pclip=100 wantscalebar=y allpos=y color=j gainpanel=a')

# 2D slice out of 3D run
Flow('time3d',['eik2ds','tim2ds','rrt2ds'],
     '''
     cat axis=3 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]}
     ''', stdin=0)
Result('time3d','grey pclip=100 wantscalebar=y allpos=y color=j gainpanel=a')

# depth slices
for j in range(0,par['nz'],20):

    vel3d = 'vel3d-t'
    eik3d = 'eik3d-t'
    hwt3d = 'hwt3d-t'
    rrt3d = 'rrt3d-t'

    Flow(vel3d,'vel3d','byte gainpanel=a pclip=100 allpos=y bias=5000 bar=velbar.rsf')
    Flow(eik3d,'eik3d','byte gainpanel=a pclip=100 allpos=y           bar=eikbar.rsf')
    Flow(hwt3d,'tim3d','byte gainpanel=a pclip=100 allpos=y           bar=hwtbar.rsf')
    Flow(rrt3d,'rrt3d','byte gainpanel=a pclip=100 allpos=y           bar=rrtbar.rsf')

    vel = 'vel' + str(j) # velocity
    eik = 'eik' + str(j) # eikonal
    hwt = 'tim' + str(j) # wavefront tracing
    rrt = 'rrt' + str(j) # ray tracing

    Plot(vel,vel3d,'window n1=1 f1=%d | transp |' % j + igrey('bar=velbar.rsf color=j title=vel'))
    Plot(eik,eik3d,'window n1=1 f1=%d | transp |' % j + igrey('bar=eikbar.rsf color=j title=eik'))
    Plot(hwt,hwt3d,'window n1=1 f1=%d | transp |' % j + igrey('bar=hwtbar.rsf color=j title=hwt'))
    Plot(rrt,rrt3d,'window n1=1 f1=%d | transp |' % j + igrey('bar=rrtbar.rsf color=j title=rrt'))

    slice = 'slice' + str(j)
    pplot.p2x2(slice,vel,eik,hwt,rrt,0.5,0.55,-10,-12)

# ------------------------------------------------------------

def grex(custom,par):
    return '''
    grey labelrot=n pclip=100 title=""
    min2=%g max2=%g min1=%g max1=%g
    %s
    ''' % (par['xmin'],par['xmax'],par['zmin'],par['zmax'],custom)

def grax(custom,par):
    return '''
    graph labelrot=n yreverse=y title=""
    min1=%g max1=%g min2=%g max2=%g
    %s
    ''' % (par['xmin'],par['xmax'],par['zmin'],par['zmax'],custom)

# ------------------------------------------------------------

Plot('xvel','vel2d','window |' % par
     + grex('grid=y gridcol=0 allpos=y bias=1000',par))

# ------------------------------------------------------------

Flow('wft','vel2d',
     '''
     hwt3d verb=y forceray=n
     xsou=%(xsou)g ysou=%(ysou)g zsou=%(zsou)g 
     nt=%(nt)d ot=%(ot)g dt=%(dt)g
     ng=%(ng)d og=%(og)g dg=%(dg)g
     nh=1      oh=0      dh=%(dh)g
     ''' % par)
Flow('xwft','wft',
     '''
     window n1=2 j1=2 n3=1 min3=0 |
     dd type=complex | window
     ''')
Plot('xwft','xwft','window j2=10 |'
     + grax('plotcol=1 label1=x label2=z',par) )
Result('xvelwft','xvel xwft','Overlay')

# ------------------------------------------------------------

End()
