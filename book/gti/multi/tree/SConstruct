from rsfproj import *

Flow('spike',None,'spike n1=101 n2=101 d1=0.01 d2=0.01 mag=1')

def gauss(r=25,a=1,c1=0.5,c2=0.5):
    return '''
    math output="input+%g*exp(-((x1-%g)*(x1-%g)+(x2-%g)*(x2-%g))/(%g*%g))"
    ''' % (a,c1,c1,c2,c2,r,r)

Flow('mgauss','spike',gauss(0.1,-0.5))
Flow('pgauss','spike',gauss(0.1,+0.5))

arrivals = {'spike':1,'pgauss':3,'mgauss':3,
            'pgauss2':3,'mgauss2':3,'mgauss3':3}

for model in ('spike','pgauss','mgauss'): #,'pgauss2','mgauss2','mgauss3'):
    # Fast marching
    meiko = 'meiko-' + model
    Flow(meiko,model,'eikonal yshot=0.5')
    Plot(meiko,
         'contour title="Fast marching" nc=30 c0=0 dc=0.05')

    narr = arrivals[model]
    if model == 'mgauss3':
        na=121
        a0=-60
        da=1
    elif model == 'mgauss':
        na=481
        a0=-60
        da=0.25
    else:
        na=1801
        a0=-90
        da=0.1

    # Dependency tree
    tree = 'tree-'+model
    Flow(tree,model,'tree na=%d a0=%g da=%g' % (na,a0,da))
    
    # Interpolation
    trdo = 'trdo-'+model
    Flow(trdo,tree,'interpt sx=0.5')

    for branch in xrange(narr):
        interp = 'trde%d-%s' % (branch,model)
        Flow(interp,trdo,'window n2=1 f2=%d | transp' % branch)
        Plot(interp,'contour wanttitle=n nc=30 c0=0 dc=0.05')

    Plot(trdo,map(lambda x: 'trde%d-%s' % (x,model), xrange(narr)),
         'Overlay')
    Result(trdo,[trdo,meiko],'SideBySideAniso')

    call = 'call-' + model
    size = 'size-' + model
    grid = 'grid-' + model
    modo = 'modo-' + model
    Flow([call,size,grid],model,
         'trace2 size=${TARGETS[1]} grid=${TARGETS[2]}')
    Flow(modo,[call,size,grid],
         'interp2 sx=0.5 size=${SOURCES[1]} grid=${SOURCES[2]}')

    for branch in range(narr):
        mode = 'cmode%d-%s' % (branch,model)
        Flow(mode,modo,'window n1=1 f1=%d | transp' % branch)
        Plot(mode,"contour wanttitle=n nc=30 c0=0 dc=0.05")


    Plot(call,map(lambda x: "cmode%d-%s" % (x,model), range(narr)),
         'Overlay')
    Result(call,[call,'meiko-'+model],'SideBySideAniso')

End()
