## 
 # Borcea et al model
 ##
from rsfproj import *
import fdmod,zomig

# ------------------------------------------------------------
par = {
    'lo':0.02, # wavelength
    'co':3,    # velocity
    'fo':50,
    'nt':3000, 'ot':0, 'dt':0.0005, 'lt':'label1=time unit1=s',
    'nx':800,  'ox':0, 'dx':0.005, 'lx':'label2=x unit2=km',
    'nz':300,  'oz':0, 'dz':0.005, 'lz':'label1=z unit1=km',
    'kt':100,    # wavelet delay
    'nbx':250, 'tx':0.001,
    'nbz':250, 'tz':0.001,
    'jsnap':100
    }
#par['dx']=par['lo']/par['nx']*160
#par['dz']=par['lo']/par['nz']*60
#par['fo']=par['co']/par['lo']
#print par['fo']

# add F-D modeling parameters
fdmod.param(par)

# ------------------------------------------------------------
# wavelet
Flow('wav',None,
     '''
     spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
     ricker1 frequency=%(fo)g |
     scale axis=123 |
     put label1=t label2=x label3=y 
     ''' % par)
Result('wav','window n1=500 | graph title="" label1="t" label2=')

# ------------------------------------------------------------
# experiment setup
Flow('r_',None,'math n1=%(nx)d d1=%(dx)g o1=%(ox)g output=1' % par)
Flow('s_',None,'math n1=1      d1=1      o1=0      output=0' % par)

# receiver positions
Flow('zr','r_','math output="0" ')
Flow('xr','r_','math output="x1"')
Flow('rr',['xr','zr'],
     '''
     cat axis=2 sace=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)
Plot('rr','window n1=2 | dd type=complex | window j2=10 | '
     + fdmod.cgraph('symbol=* plotcol=6',par))

# source positions
Flow('zs','s_','math output="0"')
Flow('xs','s_','math output="2.0"')
Flow('rs','s_','math output=1')
Flow('ss',['xs','zs','rs'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)
Plot('ss','window n1=2 | dd type=complex | window | '
     + fdmod.cgraph('symbol=o plotcol=2',par))

# ------------------------------------------------------------
Flow('mask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=50 l1=%(nz)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g |
     smooth rect1=25
     ''' % par)

# ------------------------------------------------------------
# anomaly
Flow('va',None,
     '''
     spike nsp=1 mag=-%(co)g
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=198 l1=203
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=398 l2=403
     ''' % par)
# random noise (clutter)
Flow('vn','va mask',
     '''
     math output=1 |
     noise mean=0 range=2 type=y |
     smooth rect1=3 rect2=3 |
     add add=-1 |
     scale axis=123 |
     scale rscale=0.25 |
     math m=${SOURCES[1]} output="input*m"
     ''')

# background + anomaly
Flow('vo','va',
     '''
     math output=%(co)g
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par)
# background + anomaly + noise
Flow('vv','vo va vn','add ${SOURCES[1]} ${SOURCES[2]}')

Flow('rm',None,
     '''
     spike nsp=1 mag=+0.5
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=101 l1=%(nz)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=1   l2=200 |
     add add=2
     ''' % par)

Plot('vo',fdmod.cgrey('allpos=y bias=2.0 pclip=100',par))
Plot('vv',fdmod.cgrey('allpos=y bias=2.0 pclip=100',par))
Plot('rm',fdmod.cgrey('allpos=y bias=3.0 pclip=100',par))

Result('vo',['vo','ss','rr'],'Overlay')
Result('vv',['vv','ss','rr'],'Overlay')
Result('rm',['rm','ss','rr'],'Overlay')

# ------------------------------------------------------------
# F-D modeling

fdmod.amodel('do','wo','wav','vo','rm','ss','rr','free=n dens=n',par)
Result('wo',            fdmod.wgrey('pclip=99',par))
Result('do','transp|' + fdmod.dgrey('pclip=99',par))

fdmod.amodel('dd','ww','wav','vv','rm','ss','rr','free=n dens=n',par)
Result('ww',            fdmod.wgrey('pclip=99',par))
Result('dd','transp|' + fdmod.dgrey('pclip=99',par))

# ------------------------------------------------------------
# source data
Flow('ds','wav',
     '''
     pad beg2=400 n2out=%(nx)d |
     put o2=%(ox)g d2=%(dx)g |
     transp
     ''' % par)

# receiver data
Flow('dr','dd do','add ${SOURCES[1]} scale=1,-1')

Result('ds','transp|' + fdmod.dgrey('pclip=100',par))
Result('dr','transp|' + fdmod.dgrey('pclip=100',par))

# ------------------------------------------------------------
# RTM
fdmod.rtm('ii','ds','dr','vo','rm','rr','rr','free=n dens=n',4000,par)
Result('ii',fdmod.cgrey('pclip=100',par))

# ------------------------------------------------------------

Flow('js','ii_us','window n3=500')
Flow('jr','ii_ur','window n3=500')

Flow('j1','js jr','   add mode=p ${SOURCES[1]}')
Flow('j2','js jr','paradd mode=p ${SOURCES[1]} memsize=4000')

End()
