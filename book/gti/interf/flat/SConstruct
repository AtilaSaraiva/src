## 
 # F-D modeling for wavefield comparison in imaging condition
 ##
from rsfproj import *
import zomig,spmig,fdmod

# ------------------------------------------------------------
par = {
    'nt':1000, 'dt':0.001,'ot':0, 'lt':'label1=time unit1=s',
    'kt':100,    # wavelet delay
    'nx':401, 'ox':0, 'dx':0.005,  'lx':'label2=x unit2=km',
    'nz':201, 'oz':0, 'dz':0.005,  'lz':'label1=z unit1=km',
    #
    'nw':150,'ow':3,'jw':1,
    'verb':'y','tmx':20, 'jsnap':100
    }
# add F-D modeling parameters
fdmod.param(par)

# ------------------------------------------------------------
# wavelet
Flow('wav',None,
         '''
         spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
         ricker1 frequency=25 |
         scale axis=123 |
         put label1=t label2=x label3=y 
         ''' % par)    
Result('wav','window n1=800 | graph title="" label1="t" label2=')

# ------------------------------------------------------------
# experiment setup

Flow('r_',None,'math n1=%(nx)d d1=%(dx)g o1=%(ox)g output=1' % par)
Flow('s_',None,'math n1=1      d1=0      o1=0      output=0' % par)

# receiver positions
Flow('zr','r_','math output="0" ')
Flow('xr','r_','math output="x1"')
Flow('rr',['xr','zr'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)
Plot('rr','window n1=2 | dd type=complex | window j2=10 | '
     + fdmod.cgraph('symbol=* plotcol=6',par))

# source positions
Flow('zs','s_','math output=0')
Flow('xs','s_','math output=1.0')
Flow('rs','s_','math output=1')
Flow('ss',['xs','zs','rs'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)
Plot('ss','window n1=2 | dd type=complex | window | '
     + fdmod.cgraph('symbol=v plotcol=6',par))

Flow('so',['xr','zr','r_'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)

# ------------------------------------------------------------
# model
Flow('vo',None,
     '''
     math output="1.5+0.25*x1"
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par)
Flow('vx',None,
     '''
     spike nsp=1 mag=-0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=51 l1=70
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=181 l2=220 |
     smooth rect1=11 rect2=11 repeat=3
     ''' % par)
Flow('vm',['vo','vx'],'add ${SOURCES[1]}')

Flow('rm',None,
     '''
     spike nsp=1 mag=+0.5
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=101 l1=%(nz)d |
     spray axis=2 n=%(nx)d o=%(ox)g d=%(dx)g |
     add add=2
     ''' % par)

Plot('vm',fdmod.cgrey('allpos=y bias=1.5 pclip=100',par))
Plot('rm',fdmod.cgrey('allpos=y bias=1.5 pclip=100',par))
Result('vm',['vm','ss','rr'],'Overlay')
Result('rm',['rm','ss','rr'],'Overlay')

# ------------------------------------------------------------
# finite-differences modeling

fdmod.amodel('do','wo','wav','vm','rm','ss','rr','free=y dens=n',par)
fdmod.amodel('dd','ww','wav','vm','rm','ss','rr','free=y dens=y',par)

Flow('wx','ww wo','add ${SOURCES[1]} scale=1,-1')

Result('wo',fdmod.wgrey('pclip=99',par))
Result('ww',fdmod.wgrey('pclip=99',par))
Result('wx',fdmod.wgrey('pclip=99',par))

# ------------------------------------------------------------

# receiver data
Flow('dx','dd do','add ${SOURCES[1]} scale=1,-1 | reverse which=2 opt=i')
# source data
Flow('dw','wav',
     'pad beg2=200 n2out=%(nx)d | put o2=%(ox)g d2=%(dx)g | transp' % par)

Result('do','transp |' + fdmod.dgrey('pclip=99',par))
Result('dd','transp |' + fdmod.dgrey('pclip=99',par))
Result('dx','transp |' + fdmod.dgrey('pclip=99',par))
Result('dw','transp |' + fdmod.dgrey('pclip=100',par))

Result('alld','dx dw',
       '''
       cat axis=3 space=n ${SOURCES[1:2]} |
       transp |
       grey gainpanel=e pclip=100
       ''')

# ------------------------------------------------------------
fdmod.awe('jw','uw','dw','vm','rm','rr','rr','free=y dens=n jsnap=1',par)
fdmod.awe('jx','ux','dx','vm','rm','rr','rr','free=y dens=n jsnap=1',par)
Flow('uy','ux','reverse which=4 opt=i')

for i in ('y','w'):
    Result('u'+i,'window j3=100 |' + fdmod.wgrey('pclip=99',par))

    Flow(  'tu'+i,'u'+i,'window j1=20 | transp plane=13')
    Result('tu'+i,fdmod.dgrey('gainpanel=a',par))

Flow(  'ii','uy uw','add mode=p ${SOURCES[1]} | stack axis=3')
Result('ii',fdmod.cgrey('pclip=100',par))


End()
