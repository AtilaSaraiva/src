## 
 # Borcea et al model
 # active array setup
 ##
from rsfproj import *
import fdmod,zomig

# ------------------------------------------------------------
par = {
    'lo':3,    # wavelength (m)
    'co':3000, # velocity (m/s)
    'fo':1000, # central frequency (Hz)
    'nt':12000, 'ot':0, 'dt':0.000025,'lt':'label1=t unit1=s',
    'ox':0,                           'lx':'label2=x unit2=m',
    'oz':0,                           'lz':'label1=z unit1=m',
    'kt':50,  # wavelet delay
    'nbx':250, 'tx':0.0015,
    'nbz':250, 'tz':0.0015,
    'jsnap':100, 'height':10
    }

par['smp']=20.

par['dx']=par['lo']/par['smp']
par['nx']=100*par['smp']+1

par['dz']=par['lo']/par['smp']
par['nz']=100*par['smp']+1

# ------------------------------------------------------------

par['jx']=par['lo']/par['dx']
par['dr']=par['dx']*par['jx']
par['nr']=par['nx']/par['jx']
par['or']=par['dx']*par['jx']/2

# add F-D modeling parameters
fdmod.param(par)

# ------------------------------------------------------------
# wavelet
Flow('wav',None,
     '''
     spike nsp=1 mag=1 n1=%(nt)d d1=%(dt)g o1=%(ot)g k1=%(kt)d |
     ricker1 frequency=%(fo)g |
     scale axis=123 |
     put label1=t label2=x label3=y 
     ''' % par)
Result('wav','window n1=200 | graph title="" label1="t" label2=')

# ------------------------------------------------------------
# source coordinates
zt = par['oz']+90*par['lo']
xt = par['ox']+par['nx']/2*par['dx']

zs = 10*par['dz']
xs = xt

ls = 6*par['lo']

zs0 = zt+2*ls/3
xs0 = xt

zs1 = zt-ls/3
xs1 = xt-0.58*ls

zs2 = zt-ls/3
xs2 = xt+0.58*ls

par['jzt'] = zt / par['dz']
par['jxt'] = xt / par['dx']

par['jzs0'] = zs0 / par['dz']
par['jxs0'] = xs0 / par['dx']

par['jzs1'] = zs1 / par['dz']
par['jxs1'] = xs1 / par['dx']

par['jzs2'] = zs2 / par['dz']
par['jxs2'] = xs2 / par['dx']

Flow('s_',None,'math n1=1      d1=1      o1=0      output=0' % par)

# source position
Flow('zs','s_','math output="%g"' % zs)
Flow('xs','s_','math output="%g"' % xs)
Flow('rs','s_','math output=1')
Flow('ss',['xs','zs','rs'],
     '''
     cat axis=2 space=n
     ${SOURCES[0]} ${SOURCES[1]} ${SOURCES[2]} | transp
     ''', stdin=0)
Plot('ss','window n1=2 | dd type=complex | window | '
     + fdmod.cgraph('symbol=o plotcol=0 wantscalebar=y',par))

# ------------------------------------------------------------
# experiment setup
Flow('r_',None,'math n1=%(nr)d d1=%(dr)g o1=%(or)g output=1' % par)

# receiver positions
Flow('zr','r_','math output="%g"'% (10*par['dz']) )
Flow('xr','r_','math output="x1"')
Flow('rr',['xr','zr'],
     '''
     cat axis=2 sace=n
     ${SOURCES[0]} ${SOURCES[1]} | transp
     ''', stdin=0)
Plot('rr','window n1=2 | dd type=complex | window j2=1 | '
     + fdmod.cgraph('symbol=. plotcol=0 wantscalebar=y',par))

# ------------------------------------------------------------
# receivers around target
nq = 10  * par['lo']/par['dx']
oq = xt - (nq-1)/2 * par['dx']
dq =                 par['dx']

Flow('q_',None,'math n1=%d d1=%g o1=%g output=1' % (nq,dq,oq) )
for iq in range(nq):
    zz = zt + (iq-nq/2)*par['dz']

    Flow('zq'+str(iq),'q_','math output="%g"' % zz)
    Flow('xq'+str(iq),'q_','math output="x1"')
    Flow('qq'+str(iq),['xq'+str(iq),'zq'+str(iq)],
         '''
         cat axis=2 space=n
         ${SOURCES[0]} ${SOURCES[1]} | transp
         ''', stdin=0)
    
allq = map(lambda x: 'qq%d' % x,range(nq))
Flow('qq',allq,'cat axis=2 space=n ${SOURCES[:%d]}' % nq, stdin=0)
Plot('qq','window n1=2 | dd type=complex | window | '
     + fdmod.cgraph('symbol=. plotcol=0 wantscalebar=y',par))

# ------------------------------------------------------------
Flow('mask',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=100 l1=%(nz)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g |
     smooth rect1=25
     ''' % par)
Flow('dask',None,
     '''
     spike nsp=3 mag=1,1,1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(jzs0)d,%(jzs1)d,%(jzs2)d l1=%(jzs0)d,%(jzs1)d,%(jzs2)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=%(jxs0)d,%(jxs1)d,%(jxs2)d l2=%(jxs0)d,%(jxs1)d,%(jxs2)d |
     smooth rect1=10 rect2=10 repeat=5 |
     scale axis=123 |
     mask min=0.5 max=1 |
     dd type=float |
     scale rscale=-1 |
     add add=1
     ''' % par)

Result('dask',fdmod.cgrey('pclip=100 grid=y gridcol=2 g2num=%(lo)g g1num=%(lo)g'% par,par))

# ------------------------------------------------------------
# background
Flow('vx',None,
     '''
     spike nsp=1 mag=0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(jzt)d l1=%(jzt)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=%(jxt)d l2=%(jxt)d |
     add add=%(co)g
     ''' % par)

Flow('vo','dask',
     '''
     spike nsp=1 mag=0
     n1=%(nz)d o1=%(oz)g d1=%(dz)g k1=%(jzt)d l1=%(jzt)d
     n2=%(nx)d o2=%(ox)g d2=%(dx)g k2=%(jxt)d l2=%(jxt)d |
     add add=%(co)g |
     add mode=p ${SOURCES[0]}
     ''' % par)

# clutter
Flow('vv','vo mask dask',
     '''
     math output=0 |
     noise mean=0 range=1 type=n |
     add mode=p ${SOURCES[1]} |
     smooth rect1=15 rect2=15 |
     scale axis=123 |
     scale rscale=0.1 |
     add add=+1 |
     math v=${SOURCES[0]} output="v/sqrt(input)" |
     add add=-%g |
     scale axis=123 |
     scale rscale=500 |
     add add=%g |
     add mode=p ${SOURCES[2]}
     ''' % (par['co'],par['co']))

Flow('rm',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g
     ''' % par)

Plot('vx',fdmod.cgrey('allpos=y bias=2500 pclip=100 color=j wantscalebar=y',par))
Plot('vo',fdmod.cgrey('allpos=y bias=2500 pclip=100 color=j wantscalebar=y',par))
Plot('vv','add add=-3000 | clip clip=500 | add add=3000 |' +
     fdmod.cgrey('allpos=y bias=2500 pclip=100 color=j wantscalebar=y',par))
Plot('rm',fdmod.cgrey('allpos=y pclip=100 wantscalebar=y',par))

Result('vx',['vx','rr',     'ss'],'Overlay')
Result('vo',['vo','rr',     'ss'],'Overlay')
Result('vv',['vv','rr',     'ss'],'Overlay')
Result('rm',['rm','rr','qq','ss'],'Overlay')

# ------------------------------------------------------------
# F-D modeling

fdmod.amodel('dx','wx','wav','vx','rm','ss','rr','free=n dens=n',par)

fdmod.amodel('do','wo','wav','vo','rm','ss','rr','free=n dens=n',par)
Flow('to','do dx','add ${SOURCES[1]} scale=1,-1 | window f2=%(kt)d | pad end2=%(kt)d | put o2=%(ot)g' % par)
Result('wo',            fdmod.wgrey('pclip=99',par))
Result('to','transp|' + fdmod.dgrey('',par))

fdmod.amodel('dd','ww','wav','vv','rm','ss','rr','free=n dens=n',par)
Flow('tt','dd dx','add ${SOURCES[1]} scale=1,-1 | window f2=%(kt)d | pad end2=%(kt)d | put o2=%(ot)g' % par)
Result('ww',            fdmod.wgrey('pclip=99',par))
Result('tt','transp|' + fdmod.dgrey('',par))

fdmod.wom('wom','ww','vv',par)
Result(   'wom',fdmod.wgrey('pclip=95',par))

# ------------------------------------------------------------
# RTM

# source wavefield
Flow('dw','wav',
     '''
	pad beg2=%d n2out=%d |
	put o2=%g d2=%g | 
	transp
	''' % (50,100,3,1.5))

fdmod.rtm('io','dw','do','vo','rm','rr','rr','free=y dens=n',2000,par)
fdmod.rtm('ii','dw','dd','vv','rm','rr','rr','free=y dens=n',2000,par)

Result('io',fdmod.cgrey('pclip=100 wantscalebar=y',par))
Result('ii',fdmod.cgrey('pclip=100 wantscalebar=y',par))

End()
