from rsfproj import *
import channels
import zomig, spmig

# Array sizes (number of cells)
nx     =  360   
ny     =  200
nz_res =   50
nz_ovr =  100

# Cell sizes (in meters)
dx     =  15          
dy     =  15
dz_res =   3
dz_ovr =  20

# Axis origin (in meters)
ox     =    0          
oy     =    0          
oz_res =  -20
oz_ovr =  130


xy_pad = 40
as_width   = 0.8
as_shift   = 0.8
as_height0 = 0.5
as_height1 = 0.8

as_shape   = 1.2   

bd_depth  =  0.8
bd_zshift = -0.15

md_depth  =  1.2
md_zshift =  0.1

bd_sand = 0.3
md_sand = 0.2

as_sand = 1.0

na_sand0 = 0.4
na_sand1 = 0.9

bk_std_dev = 0.007
sd_std_dev = 0.01

oriu = [1,0,0]
oriv = [0,1,0]
oriw = [0,0,1]

bk_ru = 1000         
bk_rv = 1000
bk_rw =    1

sd_ru =  200         
sd_rv =  200
sd_rw =    1

taper_thickness_res =    0
taper_thickness_ovr = 2000

taper_phi =    0.35
taper_rho =    1.687
taper_vp  = 1964.573
taper_vs  =  509.796

memsize = 512

private = {'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
           'server':os.environ.get('BEG_SERVER')}

# ------------------------------------------------------------

channels.make_reservoir (   private=private, memsize=memsize, xy_pad=xy_pad,
                            nx=nx,    ny=ny,    nz=nz_res,
                            dx=dx,    dy=dy,    dz=dz_res,
                            ox=ox,    oy=oy,    oz=oz_res,
                            oriu=oriu,      oriv=oriv,      oriw=oriw,
                            bk_ru=bk_ru,    bk_rv=bk_rv,    bk_rw=bk_rw,
                            sd_ru=sd_ru,    sd_rv=sd_rv,    sd_rw=sd_rw,
                            bk_std_dev=bk_std_dev,  sd_std_dev=sd_std_dev,
                            bd_depth=bd_depth,      md_depth=md_depth,
                            bd_zshift=bd_zshift,    md_zshift=md_zshift,
                            as_width=as_width,      as_shift=as_shift, 
                            as_height0=as_height0,  as_height1=as_height1, 
                            as_shape=as_shape,      as_sand=as_sand,
                            bd_sand=bd_sand,        md_sand=md_sand,
                            na_sand0=na_sand0,      na_sand1=na_sand1,
                            taper_thickness=taper_thickness_res, 
                            taper_phi=taper_phi,    taper_rho=taper_rho,
                            taper_vp=taper_vp,      taper_vs=taper_vs)

# ------------------------------------------------------------

channels.make_overburden (  memsize=memsize, xy_pad=xy_pad,
                            nx=nx,    ny=ny,    nz=nz_ovr,
                            dx=dx,    dy=dy,    dz=dz_ovr,
                            ox=ox,    oy=oy,    oz=oz_ovr,
                            oriu=oriu,      oriv=oriv,      oriw=oriw,
                            bk_ru=bk_ru,    bk_rv=bk_rv,    bk_rw=bk_rw,
                            bk_std_dev=bk_std_dev,
                            taper_thickness=taper_thickness_ovr, 
                            taper_phi=taper_phi,    taper_rho=taper_rho,
                            taper_vp=taper_vp,      taper_vs=taper_vs)

# ------------------------------------------------------------


# ------------------------------------------------------------
# PLOTTING
# ------------------------------------------------------------
#def dplot3d(par,title="",custom1="",custom2=""):
#    return '''
#    byte bar=bar.rsf gainpanel=all %s |
#    grey3 scalebar=y bar=bar.rsf labelrot=n flat=y title="%s"
#    frame1=170 frame2=%d frame3=%d
#    label1=t label2=y label3=x %s
#    ''' % (custom1,title,par['ypad'],par['xpad'],custom2)
    
#def iplot3d(par,title="",custom1="",custom2=""):
#    return '''
#    byte bar=bar.rsf gainpanel=all %s |
#    grey3 scalebar=y bar=bar.rsf labelrot=n flat=y title="%s"
#    frame1=40  frame2=%d frame3=%d
#    label1=z label2=y label3=x %s
#    ''' % (custom1,title,par['ypad'],par['xpad'],custom2)
    
#def vplot3d(par,title="",custom1="",custom2=""):
#    return '''
#    byte bar=bar.rsf gainpanel=all %s |
#    grey3 scalebar=y bar=bar.rsf labelrot=n flat=y title="%s"
#    frame1=40  frame2=%d frame3=%d color=j
#    label1=z label2=y label3=x %s
#    ''' % (custom1,title,par['ypad'],par['xpad'],custom2)

def tplot2d(par,title="",custom=""):
    return '''
    window |
    grey scalebar=y labelrot=n pclip=100 title="%s"
    label1=t label2=x %s
    ''' % (title,custom)
    
def zplot2d(par,title="",custom=""):
    return '''
    window |
    transp |
    grey scalebar=y labelrot=n pclip=100 title="%s"
    label1=z label2=x %s
    ''' % (title,custom)

# ------------------------------------------------------------
# ------------------------------------------------------------
def tplot3d(par,title="",custom1="",custom2=""):
    return '''
    byte bar=bar.rsf gainpanel=all %s |
    grey3 scalebar=y bar=bar.rsf labelrot=n flat=y
    frame1=%d frame2=%d frame3=170
    label1=y label2=x label3=t %s
    ''' % (custom1,par['ypad'],par['xpad'],custom2)

def zplot3d(par,custom1="",custom2=""):
    return '''
    byte bar=bar.rsf gainpanel=all %s |
    grey3 scalebar=y bar=bar.rsf labelrot=n flat=y
    frame1=%d  frame2=%d frame3=40
    label1=y label2=x label3=z %s
    ''' % (custom1,par['ypad'],par['xpad'],custom2)
# ------------------------------------------------------------
# parameters
# ------------------------------------------------------------
par = {
        'nt':1000,'ot':0,'dt':0.005,'kt':20,                # time
        'nw':501, 'ow':0,                                   # frequency
        'nx':440, 'ox':0,'dx':15,                           # x
        'ny':280, 'oy':0,'dy':15,                           # y
        'nz':50,  'oz':0,'dz':3,                            # z
        'verb':'y','eps':0.01,'nrmax':1,'dtmax':0.00005,    # migration
        'tmx':16,'tmy':16,'pmx':0,'pmy':0,'misc':'incore=y'                
      }

par['dw']=1./(par['nt']*par['dt'])

par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['ymin']=par['oy']
par['ymax']=par['oy'] + (par['ny']-1) * par['dy']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']

# source coordinates
par['xpad']=par['nx']/2.
par['ypad']=par['ny']/2.

par['xsou']=par['ox'] + par['xpad'] * par['dx']
par['ysou']=par['oy'] + par['ypad'] * par['dy']

par['ft']=par['kt']*par['dt']

# ------------------------------------------------------------

def flip():
    return '''
    transp memsize=250 plane=23 |
    transp memsize=250 plane=12 |
    reverse which=1 opt=i |
    put label1=z label2=x label3=y
    '''

# ------------------------------------------------------------
# '0' = reservoir
# '1' = overburden
Flow('vp0','res_vp_noise_taper',flip() )
Flow('vp1','ovr_vp_noise_taper',flip() )

Flow('ro0','res_rho_noise_taper',flip() )
Flow('ro1','ovr_rho_noise_taper',flip() )

# density
Flow  ('den','ro0','window n1=%(nz)d | put o1=0' % par)
Result('den','den',
       'transp plane=13 |'
       + zplot3d(par,'pclip=100 bias=2.1 allpos=y','title="density" point1=0.90 point2=0.90 color=j'))

# reservoir velocity
Flow(  'vel','vp0', 'window n1=%(nz)d | put o1=0 o3=0' % par)
Result('vel','vel',
       'transp plane=13 |'
       + zplot3d(par,'pclip=100 bias=2297 allpos=y','title="velocity" point1=0.90 point2=0.90 color=j'))

# overburden velocity (can reduce n1=??? for speed)
Flow(  'ovb','vp1', 'window n1=%d | put o1=0 o3=0' % nz_ovr)
Result('ovb','ovb',
       'transp plane=13 |'
       + zplot3d(par,'pclip=100 bias=1950 allpos=y','frame3=90 title="overburden" point1=0.60 point2=0.60 color=j'))

# ------------------------------------------------------------
# reservoir slowness (true)
Flow('slo','vel',
     '''
     math "output=1/input" |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 |
     put label1=x label2=y label3=z
     ''')
Result('slo','slo',
       'transp memsize=250 plane=12 |'
       + zplot3d(par,'pclip=100 bias=0.00034 allpos=y','title="slowness" point1=0.90 point2=0.90 color=j'))

# reservoir slowness (smooth)
Flow('slo-s','slo','smooth rect1=50 rect2=50 rect3=10')
Result('slo-s','slo-s',
       'transp memsize=250 plane=12 |'
       + zplot3d(par,'pclip=100 bias=0.00034 allpos=y','title="smoothed slowness" point1=0.90 point2=0.90 color=j'))

# overburden slowness (true)
Flow('ovs','ovb',
     '''
     math "output=1/input" |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 |
     put label1=x label2=y label3=z
     ''')
Result('ovs','ovs',
       'transp memsize=250 plane=12 |'
       + zplot3d(par,'pclip=100 bias=0.00039 allpos=y','frame3=90 title="overburden slowness" point1=0.60 point2=0.60 color=j'))
Flow('ovs-s','ovs','smooth rect1=50 rect2=50 rect3=10')
Result('ovs-s','ovs-s',
       'transp memsize=250 plane=12 |'
       + zplot3d(par,'pclip=100 bias=0.00039 allpos=y','frame3=90 title="smoothed overburden slowness" point1=0.60 point2=0.60 color=j'))
# ------------------------------------------------------------

# acoustic impedance (depth)
Flow('aim','vel den','math v=${SOURCES[1]} d=${SOURCES[1]} output=v*d', stdin=0)
Result('aim','aim',
       'transp plane=13 |'
       + zplot3d(par,'pclip=100 bias=4.44 allpos=y','title="acoustic impedance" point1=0.90 point2=0.90 color=j'))

# acoustic impedance (time)
#Flow('ait',['aim','vel'],
#     'depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d | put label1=t' % par )
#Result('ait','ait','window max1=0.15 | transp plane=23 |' 
#       + dplot3d(par,'acoustic impedance','pclip=100 bias=4.00 allpos=y','color=j frame1=19'))

# reflectivity (depth)
Flow('ref','aim','ai2refl')
Result('ref','ref',
       'transp plane=13 |'
       + zplot3d(par,'pclip=99','title="reflectivity" point1=0.90 point2=0.90'))

# reflectivity (time)
#Flow('ret','ait','ai2refl')
#Result('ret','ret','window max1=0.15 | transp plane=23 |'
#       + dplot3d(par,'reflectivity','pclip=99','frame1=19'))

# ------------------------------------------------------------

# reflectivity (depth)
Flow('r2d','ref','window squeeze=n n3=1 f3=140 | transp memsize=250 plane=12 | transp memsize=250 plane=23')
Flow('r3d','ref','window                       | transp memsize=250 plane=12 | transp memsize=250 plane=23')

# reflectivity (time)
#Flow('rt2d','ret','window squeeze=n n3=1 f3=140')
#Flow('rt3d','ret','window')

# velocity
Flow('v2d','vel','window squeeze=n n3=1 f3=140')
Flow('v3d','vel','window')

# overburden slowness
Flow('o2d'  ,'ovs'  ,'window squeeze=n n2=1 f2=140') # true
Flow('o3d'  ,'ovs'  ,'window')                       # true
Flow('o2d-s','ovs-s','window squeeze=n n2=1 f2=140') # smooth
Flow('o3d-s','ovs-s','window')                       # smooth

# reservoir slowness
Flow('s2d'  ,'slo'  ,'window squeeze=n n2=1 f2=140') # true
Flow('s3d'  ,'slo'  ,'window')                       # true
Flow('s2d-s','slo-s','window squeeze=n n2=1 f2=140') # smooth
Flow('s3d-s','slo-s','window')                       # smooth
# ------------------------------------------------------------

# wavelet
par['frq'] = 40 # frequency

Flow('wav',None,
     '''
     spike nsp=1 mag=1 k1=%(kt)d
     n1=%(nt)d d1=%(dt)g o1=0
     n2=1      d2=%(dx)g o2=%(xsou)g
     n3=1      d3=%(dy)g o3=%(ysou)g |
     ricker1 frequency=%(frq)s |
     put label1=t label2=x label3=y
     ''' % par)
Result('wav','wav','window n1=200 | graph title="wavelet"')

# ------------------------------------------------------------
# 1-D convolution
# ------------------------------------------------------------

# data from reflectivity in depth
Flow('t2d',['r2d','v2d'],
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
     ricker1 frequency=%(frq)s | put label1=t
     ''' % par )
     
Flow('t3d',['r3d','v3d'],
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
     ricker1 frequency=%(frq)s | put label1=t
     ''' % par )
     
# data from reflectivity in time
#Flow('tt2d','rt2d','ricker1 frequency=%(frq)s | put label1=t' % par )
#Flow('tt3d','rt3d','ricker1 frequency=%(frq)s | put label1=t' % par )

# image from reflectivity in depth
Flow('m2d',['t2d','v2d'],
     '''
     time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 |
     put label1=z
     ''' % par )

Flow('m3d',['r3d','v3d'],
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
     ricker1 frequency=%(frq)s | 
     time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23
     ''' % par )

# image from reflectivity in time
#Flow('mt2d',['tt2d','v2d'],
#     '''
#     time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
#     transp memsize=250 plane=12 |
#     transp memsize=250 plane=23
#     put label1=z
#     ''' % par )

#Flow('mt3d',['tt3d','v3d'],
#     '''
#     time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
#     transp memsize=250 plane=12 |
#     transp memsize=250 plane=23
#     put label1=z
#     ''' % par )

# ------------------------------------------------------------
# SHOT-RECORD
# ------------------------------------------------------------
# the wavelet is embedded in the source wavefield;
# the reflectivity is made of delta functions

# Shot-record modeling/migration (2-D)

# source wavelet (frequency domain)
Flow('u2d','wav',
     '''
     fft1 |
     window squeeze=n n1=%(nw)d min1=%(ow)g |
     pad beg2=%(xpad)d n2out=%(nx)d |
     put label1=w label2=x label3=y |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 
     ''' % par)

# C dt one = causal datuming one-way traveltime
zomig.Cdtone('u2do','u2d','o2d',par)        #   source wavefield down through overburden
spmig.model('e2do','s2d','u2do','r2d',par)  # shot-record modeling in reservoir
zomig.Cdtone('e2d','e2do','o2d',par)        # receiver wavefield   up through overburden

# modeled data from frequency to time
Flow('c2d','e2d',
     '''
     window | transp memsize=250 |
     pad n1out=1001 | fft1 inv=y |
     window min1=%(ft)g | pad n1out=2000 |
     put o1=0 label1=t
     ''' % par)                             # time-domain shot record
                                            
# migration
zomig.Cdtone('u2do-s','u2d','o2d-s',par) #   source datuming (    causal) in smooth overburden
zomig.Adtone('e2do-s','e2d','o2d-s',par) # receiver datuming (anticausal) in smooth overburden
spmig.image('j2d','s2d-s','u2do-s','e2do-s',par)  # shot-record migration in smooth slowness

# Shot-record modeling/migration (3-D)

# source wavelet (frequency domain)
Flow('u3d','wav',
     '''
     fft1 |
     window squeeze=n n1=%(nw)d min1=%(ow)g |
     pad beg2=%(xpad)d n2out=%(nx)d |
     pad beg3=%(ypad)d n3out=%(ny)d |
     put label1=w label2=x label3=y |
     transp memsize=250 plane=12 |
     transp memsize=250 plane=23 
     ''' % par)

# C dt one = causal datuming one-way
zomig.Cdtone('u3do','u3d','o3d',par)        # source wavefield through overburden
spmig.model('e3do','s3d','u3do','r3d',par)  # shot-record modeling in reservoir
zomig.Cdtone('e3d','e3do','o3d',par)        # receiver wavefield through overburden

# modeled data from frequency to time
Flow('c3d','e3d',
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     pad n1out=1001 | fft1 inv=y |
     window min1=%(ft)g | pad n1out=2000 |
     put o1=0 label1=t
     ''' % par)                             # time-domain shot record

# migration
zomig.Cdtone('u3do-s','u3d','o3d-s',par) #   source datuming (    causal) in smooth overburden
zomig.Adtone('e3do-s','e3d','o3d-s',par) # receiver datuming (anticausal) in smooth overburden
spmig.image('j3d','s3d-s','u3do-s','e3do-s',par)  # shot-record migration in smooth slowness

# ------------------------------------------------------------
# EXPLODING REFLECTOR
# ------------------------------------------------------------

# Exploding reflector modeling/migration (2-D)
zomig.model('d2do', 's2d','m2d', par)     # modeling in the reservoir
zomig.model('dt2do','s2d','mt2d',par)     # modeling in the reservoir
# C dt two = causal datuming (up) two-way traveltime
zomig.Cdttwo('d2d', 'd2do', 'o2d',par)    # upward continuation in overburden
zomig.Cdttwo('dt2d','dt2do','o2d',par)    # upward continuation in overburden

# modeled exploding reflector data from frequency to time
Flow('f2d','d2d',
     '''
     window | transp memsize=250 |
     pad n1out=1001 | fft1 inv=y
     ''' % par )
Flow('ft2d','dt2d',
     '''
     window | transp memsize=250 |
     pad n1out=1001 | fft1 inv=y
     ''' % par )

# migration
zomig.Adttwo('d2do-s','d2d', 'o2d-s',par) 
zomig.image('i2d', 's2d-s','d2do-s', par)
zomig.image('it2d','s2d-s','dt2do',par)


# Exploding reflector modeling/migration (3-D)
zomig.model('d3do', 's3d','m3d', par)     # modeling in the reservoir
zomig.model('dt3do','s3d','mt3d',par)     # modeling in the reservoir
# C dt two = causal datuming (up) two-way traveltime
zomig.Cdttwo('d3d', 'd3do', 'o3d',par)    # upward continuation in overburden
zomig.Cdttwo('dt3d','dt3do','o3d',par)    # upward continuation in overburden

# modeled exploding reflector data from frequency to time
Flow('f3d','d3d',
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     pad n1out=1001 | fft1 inv=y
     ''' % par )
Flow('ft3d','dt3d',
     '''
     transp memsize=250 plane=23 |
     transp memsize=250 plane=12 |
     pad n1out=1001 | fft1 inv=y
     ''' % par )

# migration
zomig.Adttwo('d3do-s','d3d', 'o3d-s',par) # downward continuation in (smooth) overburden
zomig.image('i3d', 's3d-s','d3do-s', par)
zomig.image('it3d','s3d-s','dt3do',par)

# ------------------------------------------------------------
# RESULTS 2D

Result('t2d', 't2d', 'window max1=0.15         |' + tplot2d(par,'convolution'))
#Result('tt2d','tt2d','window max1=0.15         |' + tplot2d(par,'convolution'))
Result('f2d', 'f2d', 'window min1=1.5 max1=2.5 |' + tplot2d(par,'exploding reflector'))
#Result('ft2d','ft2d','window min1=1.5 max1=2.5 |' + tplot2d(par,'exploding reflector'))
Result('c2d', 'c2d', 'window min1=1.5 max1=2.5 |' + tplot2d(par,'shot record'))

Result('m2d', 'm2d', zplot2d(par,'convolution'))
#Result('mt2d','mt2d',zplot2d(par,'convolution'))
Result('i2d', 'i2d', zplot2d(par,'exploding reflector'))
#Result('it2d','it2d',zplot2d(par,'exploding reflector'))
Result('j2d', 'j2d', zplot2d(par,'shot record'))

# RESULTS 3D

Result('t3d', 't3d', 'window max1=0.15         | transp plane=13 |' + tplot3d(par,'convolution',        'pclip=99.8','frame3=19'))
# Result('tt3d','tt3d','window max1=0.15         |' + dplot3d(par,'convolution',        'pclip=99.8','frame1=19'))
Result('f3d', 'f3d', 'window min1=1.5 max1=2.5 | transp plane=13 |' + tplot3d(par,'exploding reflector','pclip=99.8'))
# Result('ft3d','ft3d','window min1=1.5 max1=2.5 |' + dplot3d(par,'exploding reflector','pclip=99.8'))
Result('c3d', 'c3d', 'window min1=1.5 max1=2.5 | transp plane=13 |' + tplot3d(par,'shot record',        'pclip=99.8'))

Result('m3d', 'm3d', 'transp plane=12 |' + zplot3d(par,'pclip=99','title="convolution"         point1=0.90 point2=0.90'))
# Result('mt3d','mt3d',iplot3d(par,'convolution',        'pclip=99'))
Result('i3d', 'i3d', 'transp plane=12 |' + zplot3d(par,'pclip=99','title="exploding reflector" point1=0.90 point2=0.90'))
# Result('it3d','it3d',iplot3d(par,'exploding reflector','pclip=99'))
Result('j3d', 'j3d', 'transp plane=12 |' + zplot3d(par,'pclip=99','title="shot-record"         point1=0.90 point2=0.90'))

# ------------------------------------------------------------

End()

