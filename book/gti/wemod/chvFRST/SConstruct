from rsfproj import *
import spmig, sgmig, zomig

import os
private = {   'login':os.environ.get('BEG_LOGIN'),
           'password':os.environ.get('BEG_PASSWORD'),
             'server':os.environ.get('BEG_SERVER')}

# ------------------------------------------------------------
# PLOTTING
# ------------------------------------------------------------
def igrey(custom,par):
    return '''
    transp memsize=500 plane=23 |
    transp memsize=500 plane=12 |
    byte gainpanel=all %s |
    grey3 labelrot=n flat=y title="" frame1=240 frame2=%d frame3=%d
    label1=z label2=x label3=y
    ''' % (custom,par['xpad'],par['ypad'])
def dgrey(custom,par):
    return '''
    window min1=1.5 |
    byte gainpanel=all %s |
    grey3 labelrot=n flat=y title="" frame1=170 frame2=%d frame3=%d
    label1=t label2=x label3=y
    ''' % (custom,par['xpad'],par['ypad'])
def vgrey(custom,par):
    return '''
    byte gainpanel=all %s |
    grey3 labelrot=n flat=y title="" frame1=240 frame2=%d frame3=%d color=j
    label1=z label2=x label3=y
    ''' % (custom,par['xpad'],par['ypad'])

# ------------------------------------------------------------
# parameters
# ------------------------------------------------------------
par = {
    'nt':2000,'ot':0,'dt':0.0025,'kt':20,
    'nw':1001,'ow':0,
    'nx':500, 'ox':0,'dx':25,
    'ny':500, 'oy':0,'dy':25,
    'nz':600, 'oz':0,'dz':4, 'fz':250,
    'verb':'y','eps':0.01,'nrmax':5,'dtmax':0.00005,
    'tmx':16,'tmy':16,'pmx':0,'pmy':0,
    'misc':'incore=y'
    }

par['dw']=1./(par['nt']*par['dt'])

par['xmin']=par['ox']
par['xmax']=par['ox'] + (par['nx']-1) * par['dx']
par['ymin']=par['oy']
par['ymax']=par['oy'] + (par['ny']-1) * par['dy']
par['zmin']=par['oz']
par['zmax']=par['oz'] + (par['nz']-1) * par['dz']

par['xpad']=par['nx']/2.
par['ypad']=par['ny']/2.

par['xsou']=par['ox'] + par['xpad'] * par['dx']
par['ysou']=par['oy'] + par['ypad'] * par['dy']

par['ft']=par['kt']*par['dt']

# ------------------------------------------------------------
Fetch(['vp.hh'],'chvFRST',private)
Fetch(['dn.hh'],'chvFRST',private)
Fetch(['vp2d.hh'],'chvFRST',private)
Fetch(['dn2d.hh'],'chvFRST',private)
# ------------------------------------------------------------

# ------------------------------------------------------------
# density
Flow  ('den','dn.hh','window n1=%(nz)d f1=%(fz)d | dd form=native' % par)
#Result('den','den',vgrey('pclip=100 bias=1500 allpos=y',par))
# ------------------------------------------------------------
# velocity
Flow  ('vel','vp.hh','window n1=%(nz)d f1=%(fz)d | dd form=native' % par)
#Result('vel','vel',vgrey('pclip=100 bias=2297 allpos=y',par))
Flow  ('ovb','vp.hh','window n1=%(nz)d           | dd form=native' % par)
#Result('ovb','vel',vgrey('pclip=100 bias=2297 allpos=y',par))
# ------------------------------------------------------------

Flow('d2d','dn2d.hh','window n1=%(nz)d f1=%(fz)d | dd form=native | put o1=0' % par)
Flow('v2d','vp2d.hh','window n1=%(nz)d f1=%(fz)d | dd form=native | put o1=0' % par)
Flow('o2d','vp2d.hh','window n1=2      j1=%(fz)d | dd form=native'            % par)

# ------------------------------------------------------------
# slowness (true)
Flow('slo','vel',
     '''
     math "output=1/input" |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 |
     put label1=x label2=y label3=z
     ''')
#Result('slo','slo',
#       'transp memsize=500 plane=23 | transp memsize=500 plane=12 | '
#       + vgrey('pclip=100 bias=0.000340432 allpos=y',par))

# slowness (smooth)
Flow('sss','vel',
     '''
     math "output=1/input" |
     smooth rect1=101 rect2=51 rect3=51 |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 |
     put label1=x label2=y label3=z
     ''')
#Result('sss','sss',
#       'transp memsize=500 plane=23 | transp memsize=500 plane=12 | '
#       + vgrey('pclip=100 bias=0.000340432 allpos=y',par))

# slowness (water)
Flow('ovs','ovb',
     '''
     math "output=1/input" |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 |
     put label1=x label2=y label3=z
     ''')
#Result('ovs','ovs',
#       'transp memsize=500 plane=23 | transp memsize=500 plane=12 | '
#       + vgrey('pclip=100 bias=0.000340432 allpos=y',par))

Flow('s2d','v2d',
     '''
     math "output=1/input" |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 |
     put label1=x label2=y label3=z''')
Flow('w2d','o2d',
     '''
     math "output=1/input" |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 |
     put label1=x label2=y label3=z''')

# ------------------------------------------------------------
# acoustic impedance
Flow('aim','vel den',
     'math v=${SOURCES[1]} d=${SOURCES[1]} output=v*d', stdin=0)
#Result('aim','aim',vgrey('pclip=100 bias=1 allpos=y',par))

# reflectivity
Flow('ref','aim','ai2refl')
Flow('rrr','ref','transp memsize=500 plane=12 | transp memsize=500 plane=23')
#Result('rrr','rrr',igrey('pclip=99',par))

Flow('a2d','v2d d2d',
     'math v=${SOURCES[1]} d=${SOURCES[1]} output=v*d', stdin=0)
Flow('t2d','a2d','ai2refl')
Flow('r2d','a2d','ai2refl | transp memsize=500 plane=12 | transp memsize=500 plane=23')

# ------------------------------------------------------------
# 2D files
Flow('_ref','ref','window squeeze=n n3=1 f3=250')
Flow('_vel','vel','window squeeze=n n3=1 f3=250')
Flow('l_l' ,'s2d','window squeeze=n n2=1')
Flow('w_w' ,'w2d','window squeeze=n n2=1')
Flow('o_o' ,'w2d','window squeeze=n n2=1')
#Flow('s_s' ,'sss','window squeeze=n n2=1')
Flow('r_r' ,'r2d','window squeeze=n n2=1')
# ------------------------------------------------------------
## 
 # z-x-y cubes: den, vel, aim, ref
 # x-y-z cubes:      sss,      rrr
 # x-.-z cubes:      s_s,      r_r
 ##
# ------------------------------------------------------------

# loop over frequencies
for k in ('0'):
    f = 30 + int(k)*40
    par['f']=f

    wv = 'wav' + k # wavelet

    d_d = 'd_d' + k # data
    d_dw= 'd_d' + k + 'w'
    ddd = 'ddd' + k
    dddw= 'ddd' + k + 'w'
    f_f = 'f_f' + k
    fff = 'fff' + k

    r_r = 'r_r' + k # reflectivity
    rrr = 'rrr' + k

    i_i = 'i_i' + k # image
    iii = 'iii' + k

    u_u = 'u_u' + k # source wavefield
    u_uw= 'u_u' + k + 'w'
    uuu = 'uuu' + k
    uuuw= 'uuu' + k + 'w'
    
    e_e = 'e_e' + k # data
    e_ew= 'e_e' + k + 'w'
    eee = 'eee' + k
    eeew= 'eee' + k + 'w'
    c_c = 'c_c' + k
    ccc = 'ccc' + k
    g_g = 'g_g' + k # data
    t_t = 't_t' + k # 1-D convolution data
    ttt = 'ttt' + k

    j_j = 'j_j' + k # image
    jjj = 'jjj' + k

    # ------------------------------------------------------------
    
    Flow(wv,None,
         '''
         spike nsp=1 mag=1 k1=%(kt)d
         n1=%(nt)d d1=%(dt)g o1=0
         n2=1      d2=%(dx)g o2=%(xsou)g
         n3=1      d3=%(dy)g o3=%(ysou)g |
         ricker1 frequency=%(f)s |
         put label1=t label2=x label3=y
         ''' % par)
    Result(wv,wv,'graph title=" "')

    # 1-D convolution
    Flow(t_t,['t2d','v2d'],
         '''
         depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
         ricker1 frequency=%(f)s |
         put label1=t
         ''' % par )
    Flow(ttt,['ref','vel'],
         '''
         depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
         ricker1 frequency=%(f)s |
         put label1=t
         ''' % par )

    # ------------------------------------------------------------
    # SURVEY-SINKING
    # ------------------------------------------------------------
    # the wavelet is embedded in the reflectivity;
    # the source is a delta function

    # reflectivity
    Flow(r_r,['t2d','v2d'],
         '''
         depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
         ricker1 frequency=%(f)s | 
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=500 plane=12 | transp memsize=500 plane=23
         ''' % par )
    Flow(rrr,['ref','vel'],
         '''
         depth2time velocity=${SOURCES[1]} dt=%(dt)g nt=%(nt)d |
         ricker1 frequency=%(f)s | 
         time2depth velocity=${SOURCES[1]} dz=%(dz)g nz=%(nz)d |
         transp memsize=500 plane=12 | transp memsize=500 plane=23
         ''' % par )

    # modeling
    zomig.model(d_d,'l_l',r_r,par)
    zomig.Cdttwo(d_dw,d_d,'o_o',par)
    Flow(f_f,d_dw,
         '''
         window | transp memsize=500 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )
    zomig.model(ddd,'slo',rrr,par)
    zomig.Cdttwo(dddw,ddd,'ovs',par)
    Flow(fff,dddw,
         '''
         transp memsize=500 plane=23 | transp memsize=500 plane=12 |
         pad n1out=1001 | fft1 inv=y
         ''' % par )

    # migration
    zomig.image(i_i,'s_s',d_d,par)
    zomig.image(iii,'sss',ddd,par)

    # ------------------------------------------------------------
    # SHOT-RECORD
    # ------------------------------------------------------------
    # the wavelet is embedded in the source wavefield;
    # the reflectivity is made of delta functions

    # source wavefield
    Flow(u_u,wv,
         '''
         fft1 |
         window squeeze=n n1=%(nw)d min1=%(ow)g |
         pad beg2=%(xpad)d n2out=%(nx)d |
         put label1=w label2=x label3=y |
         transp memsize=500 plane=12 | transp memsize=500 plane=23 
         ''' % par)
    Flow(uuu,wv,
         '''
         fft1 |
         window squeeze=n n1=%(nw)d min1=%(ow)g |
         pad beg2=%(xpad)d n2out=%(nx)d |
         pad beg3=%(ypad)d n3out=%(ny)d |
         put label1=w label2=x label3=y |
         transp memsize=500 plane=12 | transp memsize=500 plane=23 
         ''' % par)

    # S-R modeling/migration
    zomig.Cdtone(u_uw,u_u,'o_o',par)
    spmig.model(e_e,'l_l',u_uw,'r_r',par)
    zomig.Cdtone(e_ew,e_e,'o_o',par)
    Flow(c_c,e_ew,
         '''
         window | transp memsize=500 |
         pad n1out=1001 | fft1 inv=y |
         window min1=%(ft)g | pad n1out=2000 | put o1=0 label1=t
         ''' % par)
    spmig.image(j_j,'s_s',u_u,e_e,par)

    # S-R modeling/migration
    zomig.Cdtone(uuuw,uuu,'ovs',par)
    spmig.model(eee,'slo',uuuw,'rrr',par)
    zomig.Cdtone(eeew,eee,'ovs',par)
    Flow(ccc,eeew,
         '''
         transp memsize=500 plane=23 | transp memsize=500 plane=12 |
         pad n1out=1001 | fft1 inv=y |
         window min1=%(ft)g | pad n1out=2000 | put o1=0 label1=t
         ''' % par )
    spmig.image(jjj,'sss',uuu,eee,par)

    # RESULTS (2-D)
    Result(t_t,t_t,'window          | grey labelrot=n pclip=100 title="" label1=t label2=x')
    Result(r_r,r_r,'window | transp | grey labelrot=n pclip=100 title="" label1=z label2=x')
    Result(f_f,f_f,'window          | grey labelrot=n pclip=100 title="" label1=t label2=x')
#    Result(i_i,i_i,'window | transp | grey labelrot=n pclip=100 title="" label1=z label2=x')
    Result(c_c,c_c,'window          | grey labelrot=n pclip=100 title="" label1=t label2=x')
#    Result(j_j,j_j,'window | transp | grey labelrot=n pclip=100 title="" label1=z label2=x')

    # RESULTS (3-D)
#    Result(ttt,ttt,dgrey('pclip=99.8',par))
#    Result(rrr,rrr,igrey('pclip=99'  ,par))
#    Result(fff,fff,dgrey('pclip=99.8',par))
#    Result(iii,iii,igrey('pclip=99'  ,par))
#    Result(ccc,ccc,dgrey('pclip=99.8',par))
#    Result(jjj,jjj,igrey('pclip=99'  ,par))


# ------------------------------------------------------------
# time slices
def sgrey(slice,par):
    return '''
    grey3 labelrot=n flat=y title="" frame1=%d frame2=%d frame3=%d
    label1=t label2=x label3=y
    ''' % (slice,par['xpad'],par['ypad'])

Flow('tzoall','fff0',
     '''
     window min1=1.5 |
     byte gainpanel=all pclip=99.8
     ''')
Flow('tsrall','ccc0',
     '''
     window min1=1.5 |
     byte gainpanel=all pclip=99.8
     ''')

for js in range(9):
    ks = 120 + js * 10

    tzo = 'tzo' + str(js)
#    Result(tzo,'tzoall',sgrey(ks,par))

    tsr = 'tsr' + str(js)
#    Result(tsr,'tsrall',sgrey(ks,par))

#Result('tzoall','tz')

# ------------------------------------------------------------
# survey by shot-record modeling
# ------------------------------------------------------------
Flow('wow','wav0',
     '''
     fft1 |
     window squeeze=n n1=150 min1=%(ow)g |
     put label1=w label2=x label3=y
     ''' % par)

alls     = map(lambda s:  '%03d'     % s,range(0,par['nx'],1))
allshots = map(lambda s: 'c%03d.rsf' % s,range(0,par['nx'],1))
allimags = map(lambda s: 'j%03d.rsf' % s,range(0,par['nx'],1))

for i in alls:
    u = 'u' + i

    Flow(u,'wow',
     '''
     pad beg2=%d n2out=%d |
     put o2=0 |
     transp memsize=500 plane=12 | transp memsize=500 plane=23 
     ''' % (int(i),par['nx']))

    e = 'e' + i
    spmig.model(e,'l_l',u,'r_r',par)
    c = 'c' + i
    Flow(c,e,
         '''
         window | transp memsize=500 |
	 pad n1out=%(nw)d |
         fft1 inv=y |
         window min1=%(ft)g | pad n1out=%(nt)d | put o1=0 label1=t
         ''' % par)
    j = 'j' + i
    spmig.image(j,'s_s',u,e,par)

Flow('shots',allshots,'cat axis=3 space=n ${SOURCES[:%d]}' % len(allshots), stdin=0)
Flow('image',allimags,'add                ${SOURCES[:%d]}' % len(allimags), stdin=0)

# ------------------------------------------------------------

End()
