from rsfproj import *
import spmig

	  # SET PARAMETERS #
########################################################################
nt=1250                 # number of time samples
dt=0.004                # time sampling interval (sec)
ft=0.0                  # first time (sec)
fxs=0.5                 # first shotpoint (km)
nxs=301                 # number of shotpoints (see notes below)
dxs=0.025               # shotpoint sampling interval (km)
fxo=0.                  # first offset (km, see notes below)
nxo=121                 # number of source-receiver offsets
dxo=0.025               # offset sampling interval (km)
v00=1.5                 # velocity at x0,z0 (km/sec)
dvdx=0.36               # derivative of velocity with distance x (dv/dx)
dvdz=0.36               # derivative of velocity with depth z (dv/dz)
fpeak=30.               # peak frequency of symmetric Ricker wavelet (Hz)
tmin=0.                 # minimum time of interest (sec)
er=0                    # =1 for exploding reflector amplitudes
ls=0                    # =1 for line source; default is point source
ob=1                    # =1 to include obliquity factors  (pas touche)
smooth=1                # =1 for smooth (piecewise cubic spline) reflectors
ndpfz=1000              # number of diffractors per Fresnel zone
verbose=1
REF1="-0.55555555555556:0,2.;3.5,2.;4.5,2.5;5.,2.25;5.5,2.;6.5,2.5;10,2.5"
REF2="-0.55555555555556:0,2.5;10,3.5"
REF3="-0.55555555555556:0,3.2;3.5,3.2;5,3.7;6.5,4.2;10,4.2"
REF4="-0.55555555555556:0,4.5;10,4.5"
########################################################################


# ------------------------------------------------------------
def igrey(custom=""):
    return '''
    grey labelrot=n pclip=100
    min2=2.5 max2=7.5 min1=0 max1=5
    scalebar=y barreverse=y
    grid=y gridcol=1
    label1=z label2=x %s
    ''' % (custom)
# ------------------------------------------------------------

dim1 = 'd1=0.01 o1=0 n1=1001'
dim2 = 'd2=0.01 o2=0 n2=501'

layers = (
    ((0,2),(3.5,2),(4.5,2.5),(5.,2.25),(5.5,2),(6.5,2.5),(10,2.5)),
    ((0,2.5),(10,3.5)),
    ((0,3.2),(3.5,3.2),(5,3.7),(6.5,4.2),(10,4.2)),
    ((0,4.5),(10,4.5))
    )

nlays = len(layers)
for i in range(nlays):
    inp = 'inp%d' % (i+1)
    Flow('./'+inp,None,
         'echo %s in=$TARGET data_format=ascii_float n1=2 n2=%d' % \
         (string.join(map(lambda x: string.join(map(str,x)),layers[i]),
                      ' '),
          len(layers[i])))

Flow('lay1','inp1','dd form=native | spline %s fp=0,0' % dim1)
Flow('lay2',None,'math %s output="2.5+x1*0.1" ' % dim1)
Flow('lay3','inp3','dd form=native | spline %s fp=0,0' % dim1)
Flow('lay4',None,'math %s output=4.5' % dim1)

Flow('lays','lay1 lay2 lay3 lay4','cat axis=2 ${SOURCES[1:4]}')
graph = '''
graph min1=2.5 max1=7.5 min2=0 max2=5 yreverse=y wantaxis=n wanttitle=n scalebar=y
'''

Plot('lays0','lays',graph + ' plotfat=10 plotcol=0')
Plot('lays1','lays',graph + ' plotfat=2 plotcol=7')

# velocity
Flow('vel',None,'math %s %s output="1.5+0.36*x1+0.36*x2" | transp' % (dim1,dim2))
Plot('vel','vel',igrey('color=j allpos=y title="Baina model"'))

Result('baina','vel lays0 lays1','Overlay')

#Flow('refl',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=0.05,0.05,0.05,0')
#Flow('grad',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=0,-0.5,0.5,0.5')
Flow('refl',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=1,1,1,1')
Flow('grad',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=0,0,0,0')
Flow('dips','lays','deriv | scale dscale=100')

for vpvs in (1,2): 
    for twod in (0,1):
        for nh in (1,401):
            bdat = 'bdat%d-%d-%d' % (vpvs,twod,nh)
            Flow(bdat,'lays refl grad dips',
                 '''
                 kirmod
                 ns=101 ds=0.100 s0=0.5
                 nh=%d  dh=0.025 h0=-5
                 type=v  vel=1.5 gradx=0.36 gradz=0.36 twod=%d
                 type2=v vel2=%g gradx2=%g  gradz2=%g
                 t0=0 dt=0.004 nt=1250 freq=20
                 refl=${SOURCES[1]} rgrad=${SOURCES[2]} dip=${SOURCES[3]}
                 ''' % (nh,twod,
                        (1.50,0.75)[vpvs-1],
                        (0.36,0.18)[vpvs-1],
                        (0.36,0.18)[vpvs-1]))

Result('bzo','bdat1-0-1',
       'window min3=2 min1=0.5 max1=5 | grey title="Zero Offset Data" ')

Plot('pp','bdat1-1-401',
     'window n3=1 f3=50 min1=1 max1=5 | grey title="PP Shot Gather" ')
Plot('ps','bdat2-1-401',
     'window n3=1 f3=50 min1=1 max1=5 | grey title="PS Shot Gather" ')

Result('bps','pp ps','SideBySideAniso')

# ------------------------------------------------------------
par = {
    'nx':400, 'ox':0.5,   'dx':0.025,
    'nz':500, 'oz':0,     'dz':0.01,
    'ns':30,  'os':0.5,   'ds':0.025, 'fs':0, 'js':10,
    'ns':101, 'js':1,     'fs':0,
#    'ns':21,  'js':5,     'fs':0,
    'nt':1250,'ot':0,     'dt':0.004,
    'nw':250, 'jw':1,
    'nhx':40,
    'nrmax':5,'dtmax':0.0005,
    'xcig':5.5
    }
par['misc']='itype=x nhx=%(nhx)d nhz=1 hsym=y jcx=40' % par
par['ow']=0.
par['dw']=1./(par['nt']*par['dt'])
# ------------------------------------------------------------

# velocity
Flow('velp','vel',
     'window n1=%(nz)d | math output="input"  | put label1=z label2=x' % par)
Flow('vels','vel',
     'window n1=%(nz)d | math output="input/2"| put label1=z label2=x' % par)
Flow('vpvs',['velp','vels'],'math p=${SOURCES[0]} s=${SOURCES[1]} output="p/s"', stdin=0)

# slowness
Flow('slop','velp',
     'math output="1/input" | transp | spray axis=2 n=1 o=0 d=1 | put label2=y')
Flow('slos','vels',
     'math output="1/input" | transp | spray axis=2 n=1 o=0 d=1 | put label2=y')

Plot('slop','slop','window | transp |' + igrey('color=j allpos=y bias=0.145 title=P'))
Plot('slos','slos','window | transp |' + igrey('color=j allpos=y bias=0.290 title=S'))
Result('slo','slop slos','SideBySideAniso')

# data
Flow('datp','bdat1-1-401','window min3=%(os)g' % par)
Flow('datc','bdat2-1-401','window min3=%(os)g' % par)

# wavelet
Flow('wav',None,'spike nsp=1 mag=1 k1=1 n1=%(nt)d d1=%(dt)g o1=0' % par)

# migration wavefields
spmig.wflds('soup','recp','wav','datp',par)
spmig.wflds('souc','recc','wav','datc',par)

Result('recp','recp','window | real | transp | grey title=P')
Result('recc','recc','window | real | transp | grey title=C')

# migration
spmig.imagePW('imgp','cigp','slop',       'soup','recp',par)
spmig.imageCW('imgc','cigc','slop','slos','souc','recc',par)

Plot('imgp','window | transp |'+igrey('title=P'))
Plot('imgc','window | transp |'+igrey('title=C'))
Result('img','imgp imgc','SideBySideAniso')

# dip field
Flow('dipo','lays',
     '''
     unif2 v00=1,2,3,4,5 n1=%(nz)d d1=%(dz)g o1=%(oz)g |
     ai2refl |
     ricker1 |
     dip rect1=10 rect2=15 liter=20
     ''' % par)

Flow('dipp','imgp','window | transp | dip rect1=3 rect2=3 liter=50')
Flow('dipc','imgc','window | transp | dip rect1=3 rect2=3 liter=50')

Plot('dipp',igrey('color=j title=P'))
Plot('dipc',igrey('color=j title=C'))
Plot('dipo',igrey('color=j'))
Result('dip','dipo dipp dipc','SideBySideAniso')

# one offset gather
Flow('gatp','cigp','window n1=1 min1=%(xcig)g' % par)
Flow('gatc','cigc','window n1=1 min1=%(xcig)g' % par)

Plot('gatp','grey title=P pclip=100')
Plot('gatc','grey title=C pclip=100')
Result('gat','gatp gatc','SideBySideAniso')

# one angle gather
Flow('angp','gatp','slant adj=y p0=-1 np=200 dp=0.01 | put label2=tan')
Flow('angc','gatc','slant adj=y p0=-1 np=200 dp=0.01 | put label2=tan')

Plot('angp','grey title=P pclip=100')
Plot('angc','grey title=C pclip=100')
Result('ang','angp angc','SideBySideAniso')

# converted-wave correction
Flow('dipa','dipo','window n2=1 min2=%(xcig)g' % par)
Flow('psra','vpvs','window n2=1 min2=%(xcig)g' % par)
Flow('corc',['angc','psra','dipa'],'pp2psang2 vpvs=${SOURCES[1]} dip=${SOURCES[2]}')

Plot('corc','grey title=C pclip=100')
Result('cor','angc corc','Movie')
# ------------------------------------------------------------

End()
