from rsfproj import *
import sys,math
import spmig

par = {
    'nx':500,'ox':0.000,    'dx':10,
#    'nh':500, 'oh':-5000,'dh':20,
    'nh':200, 'oh':-2000,'dh':40,
    'ns':1,   'os':0, 'ds':50,
    'nz':250, 'oz':0,    'dz':10,
    'nt':500,'ot':0,    'dt':0.008,
    'nw':100,'ow':1,'nh':201,'jw':2,'js':1,'fs':0,
    #
    'verb':'y','eps':0.01,'nrmax':5,'dtmax':0.00005,
    'tmx':16,'tmy':0,'pmx':0,'pmy':0,
    'os':500, 'pvel': 2000, 'svel': 1000
    }

def igrey2(custom):
    return '''
    grey labelrot=n title="" pclip=99.7 crowd=0.8 %s
    ''' % custom

def igrey(custom):
    return '''
    grey labelrot=n title="" pclip=100 min2=0 grid1=y crowd=0.8 %s
    ''' % custom

DLABEL = ' label1="time (s)"  label2="offset (m)" labelsz=18 '
XLABEL = ' label1="depth (m)" label2="location (m)" labelsz=18 '
TLABEL = ' label1="depth (m)" label2="Tan" labelsz=18 '

#--------------------------------------------
# Modeling of one shot gather on dipping layer
# synthetic.
#--------------------------------------------

mod = {
    'pp': [],
    'ps': []
    }
for ang in (0,15,30,45):
    ref = 'ref%d' % ang
    dip = 'dip%d' % ang
    Flow(dip,None,'spike n1=800 d1=4 o1=0 mag=%g' % math.tan(ang*math.pi/180))
    Flow(ref,dip,'math output="300+input*x1" ')    
    for case in ('pp','ps'):
        kir = '%skir%d' % (case,ang)
        mod[case].append(kir)
        Flow(kir,[ref,dip],
             '''
             kirmod vel=2000 vel2=%d dip=${SOURCES[1]}
             nt=1500 dt=0.002 freq=40
             nh=128 dh=20 h0=-1280
             ns=1 ds=20 s0=1500
             ''' % ((2000,1000)[case=='ps']))

for case in ('pp','ps'):
    Flow(case,mod[case],'add ${SOURCES[1:%d]}' % len(mod[case]))

#--------------------------------------------------
# Modeling and shot-record migration 
# of several shot gathers for a flat reflector
#--------------------------------------------------

# Reflector and dip
###################
(REF,DIP) = (1500,0)

Flow('flat',None,'spike n1=%d o1=%g d1=%g mag=%g'
         % (par['nx']*3,par['ox']-par['nx']*par['dx'],par['dx'],
            math.tan(math.pi*DIP/180.)))
Flow('refl','flat','math output="%g+x1*input"' % REF)

# Velocities and slownesses
###########################
Flow('pvel',None,
     '''
     spike nsp=1 mag=%(pvel)g
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=%(nx)d o2=%(ox)g d2=%(dx)g |
     put label1=z label2=x
     ''' % par)
Flow('cvel','pvel','math output=%(svel)g' % par)
Flow('pslo','pvel','math output=1/input | transp | spray axis=2 n=1')
Flow('cslo','cvel','math output=1/input | transp | spray axis=2 n=1')
Flow('gamm','pvel cvel','add mode=d ${SOURCES[1]}')

#Wavelet
########
Flow('wave',None,
     '''
     spike nsp=1 mag=1 k1=1
     n1=%(nt)d d1=%(dt)g o1=0|
     put label1=t label2=x label3=y
     ''' % par )

# Imaging condition types
#########################
type = {
    'o': 'itype=o',
    't': 'itype=t nht=160 oht=-0.200 dht=0.0025 jcx=10',
    'x': 'itype=x hsym=y nhx=50 jcx=10',
    'z': 'itype=x hsym=y nhz=50 jcx=10',
    'm': 'itype=x hsym=y nhx=50 nhz=50 jcx=10',
    'h': 'itype=h nhh=50 dhh=10 nha=180 dha=2 oha=0 jcx=10 vpvs=2'
    }

##########'d20-': (15,1000,750,1546,1.3221,0.565),
cases = {
    'd30-': (30,1000,1000,1577.4,1.0947,0.7),
    'd10-': (10,1000,1750,1308,1.3608,0.8),
    'd00-': (0,1000,2000,1000,1.5,0.8525),
    }

for c in cases.keys():
   (DIP,REF,CIG,DEP,TPP,TPS) = cases[c]

   # Create reflector geometry
   ###########################

   mod = c+'mod'
   ref = c+'ref'

   Flow(mod,None,'spike n1=%d o1=%g d1=%g mag=%g'
        % (par['nx']*3,par['ox']-par['nx']*par['dx'],par['dx'],
           math.tan(math.pi*DIP/180.)))
   Flow(ref,mod,'math output="%g+x1*input"' % REF)

   for case in ('pp','ps'):
      c2 = c + case
      kir = c2 + '-kir'
      if case == 'pp':
         par['vel2']=par['pvel']
      else:
         par['vel2']=par['svel']

      Flow(kir,[ref,mod],
                '''
                kirmod vel=%(pvel)g vel2=%(vel2)g dip=${SOURCES[1]}
                   nt=%(nt)d  dt=%(dt)g freq=15
                nh=%(nh)d  h0=%(oh)g dh=%(dh)g
                ns=%(ns)d  s0=%(os)g ds=%(ds)g |
                put label1=t label2=h
                    ''' % par)
      Plot(kir,kir,igrey2('pclip=100'+DLABEL))

      # Preparing wave fields for shot-record migration
      #################################################
      spmig.wflds(c2+'sou',c2+'rec','wave',kir,par)

      for h in type.keys():
          locpar = par
          locpar['misc'] = type[h]

          img = c2 + '-img-' + h
          cig = c2 + '-cig-' + h

          # Shot-record migration
          #######################

          if case=='pp':
                spmig.imagePW(img,cig,'pslo', c2+'sou',c2+'rec',locpar)
          else:
                spmig.imageCW(img,cig,'pslo','cslo',c2+'sou',c2+'rec',locpar)

          # Plot stacked image
          ####################
          Plot(img,'window n4=1 min4=0 max1=2500 max3=2000 | transp |'+ igrey('g1num=%d'+XLABEL) % CIG)

          # Estimate dip
          ##############
          dip = c2 + '-dip-' + h
          Flow(dip,img,
               'window | transp | dip rect1=100 rect2=10 | scale dscale=%g' %
               (par['dz']/par['dx']))
   
          # Convert offset to angle
          #########################
          off = c2 + '-off-' + h
          ang = c2 + '-ang-' + h
          cor = c2 + '-cor-' + h
          bot = c2 + '-bot-' + h

          ################ Flow(off,cig,'transp plane=13 | transp plane=24')
          Flow(off,cig,'window n1=1 min1=%g' % CIG)
          Flow(ang,off,'radon adj=y p0=-1.5 np=201 dp=0.015 | put label2=tan')
   
          if case == 'ps':
             if(h=='z' or h=='h'):
                   Flow(cor,[ang,'gamm'],'pp2psang vpvs=${SOURCES[1]}')
             elif(h=='x'): # Lateral-offset imaging condition
                   Flow(cor,[ang,'gamm',dip],'pp2psang2 vpvs=${SOURCES[1]} dip=${SOURCES[2]} | scale scale_to=1')
	     Plot(cor,igrey('max2=1.3 g1num=%g'+TLABEL) % TPS)

	  all = c2 + '-all-' + h
	  Plot(ang,igrey('max2=1.3 g1num=%g'+TLABEL) % TPS)
          Plot(all,[kir,img,ang,cor],'OverUnderAniso')

Result('ps-single','d00-ps-all-x d10-ps-all-x d30-ps-all-x','SideBySideAniso')
###Result('pp-single','d00-pp-ang-x d10-pp-ang-x d20-pp-ang-x d30-pp-ang-x','SideBySideIso')

End()

