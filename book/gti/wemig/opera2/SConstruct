from rsfproj import *
import spmig

# ------------------------------------------------------------
par = {
    'v00':2,'dvdx':0.1, 'dvdz':0.1, 'vpvs':2,
    'nx':400, 'ox':0.5,   'dx':0.025,
    'nz':500, 'oz':0,     'dz':0.01,
#
    'ns':51,  'os':0.5,   'ds':0.2, 'js':1, 'fs':0,
#    'ns':1,   'os':4.5,
    'nt':1500,'ot':0,     'dt':0.004,
    'nh':401, 'oh':-5,    'dh':0.025,
#
    'nw':200, 'jw':1,
    'nhx':20,
    'nrmax':7,'dtmax':0.0002,
    'xcig':4.5
    }
par['misc']='itype=x nhx=%(nhx)d nhz=1 hsym=y jcx=1' % par
par['ow']=0.
par['dw']=1./(par['nt']*par['dt'])

par['xmin']=2.5
par['xmax']=7.5
par['zmin']=0
par['zmax']=5
# ------------------------------------------------------------


# ------------------------------------------------------------
def igrey(custom="",par={}):
    return '''
    grey labelrot=n pclip=100 title=""
    min2=%g max2=%g min1=%g max1=%g
    wantscalebar=n barreverse=y
    grid=y gridcol=7 screenratio=1
    label1="z(km)" label2="x(km)" %s
    ''' % (par['xmin'],par['xmax'],par['zmin'],par['zmax'],custom)

def dgrey(custom="",par={}):
    return '''
    grey labelrot=n pclip=100 title=""
    label1="t(s)" label2="h(km)" %s
    ''' % (custom)

def agrey(custom="",par={}):
    return '''
    grey pclip=100 title=""
    min2=-1 max2=+1 min1=%g max1=%g
    grid=y gridcol=7
    label1="z(km)" label2="tan" %s
    ''' % (par['zmin'],par['zmax'],custom)

# ------------------------------------------------------------

dim1 = 'd1=0.01 o1=0 n1=1001'
dim2 = 'd2=0.01 o2=0 n2=501'

layers = (
    ((0,2),(3.5,2),(4.5,2.5),(5.,2.25),(5.5,2),(6.5,2.5),(10,2.5)),
    ((0,2.5),(10,3.5)),
    ((0,3.2),(3.5,3.2),(5,3.7),(6.5,4.2),(10,4.2)),
    ((0,4.5),(10,4.5))
    )

nlays = len(layers)
for i in range(nlays):
    inp = 'inp%d' % (i+1)
    Flow('./'+inp,None,
         'echo %s in=$TARGET data_format=ascii_float n1=2 n2=%d' % \
         (string.join(map(lambda x: string.join(map(str,x)),layers[i]),
                      ' '),
          len(layers[i])))

Flow('lay1','inp1','dd form=native | spline %s fp=0,0' % dim1)
Flow('lay2',None  ,'math %s output="2.5+x1*0.1" '      % dim1)
Flow('lay3','inp3','dd form=native | spline %s fp=0,0' % dim1)
Flow('lay4',None  ,'math %s output=4.5'                % dim1)

Flow('lays','lay1 lay2 lay3 lay4','cat axis=2 ${SOURCES[1:4]}')
graph = '''
graph min1=%(xmin)g max1=%(xmax)g min2=%(zmin)g max2=%(zmax)g
yreverse=y wantaxis=n wanttitle=n wantscalebar=n screenratio=1
''' % par

Plot('lays0','lays',graph + ' plotfat=10 plotcol=0')
Plot('lays1','lays',graph + ' plotfat=2 plotcol=7')

# ------------------------------------------------------------
# velocity
Flow('vel',None,
     '''
     math %s %s output="%g+%g*x1+%g*x2" |
     transp''' % (dim1,dim2,par['v00'],par['dvdz'],par['dvdx']))
Plot('vel','vel',igrey('color=j allpos=y bias=2.0 title="" barlabel="v(km/s)"',par))

Result('model','vel lays0 lays1','Overlay')

# ------------------------------------------------------------

Flow('refl',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=1,1,1,1')
Flow('grad',None,'spike n1=1001 n2=4 nsp=4 k2=1,2,3,4 mag=0,0,0,0')
Flow('dipf','lays','deriv | scale dscale=100')

for vpvs in (1,2):
    if(vpvs==1):
        vel='velp'
        dat='datp'
    else:
        vel='vels'
        dat='dats'

    Flow(vel,'vel',
         '''
         window n1=%d |
         math output="input/%g"|
         put label1=z label2=x
         ''' % (par['nz'],vpvs)
         )

    Flow(dat,'lays refl grad dipf',
         '''
         kirmod twod=1 freq=12
         t0=%g  dt=%g    nt=%d
         s0=%g  ds=%g    ns=%d
         h0=%g  dh=%g    nh=%d
         type=v  vel=%g   gradx=%g   gradz=%g
         type2=v vel2=%g  gradx2=%g  gradz2=%g
         refl=${SOURCES[1]}
         rgrad=${SOURCES[2]}
         dip=${SOURCES[3]}
         ''' % (par['ot'],par['dt'],par['nt'],
                par['os'],par['ds'],par['ns'],
                par['oh'],par['dh'],par['nh'],
                par['v00'],
                par['dvdx'],
                par['dvdz'],
                par['v00'] /vpvs,
                par['dvdx']/vpvs,
                par['dvdz']/vpvs)
         )


# vp/vs ratio
Flow('vpvs',['velp','vels'],'math p=${SOURCES[0]} s=${SOURCES[1]} output="p/s"', stdin=0)

# wavelet
Flow('wav',None,'spike nsp=1 mag=1 k1=1 n1=%(nt)d d1=%(dt)g o1=0' % par)

for c in ('p','s'):
    vel = 'vel' + c
    slo = 'slo' + c

    Flow(slo,vel,
         '''
         math output="1/input" |
         transp |
         spray axis=2 n=1 o=0 d=1 |
         put label2=y
         ''')

    # slowness
    Result(slo,slo,
           '''
           window |
           transp |
           window min2=%(xmin)g max2=%(xmax)g |
           ''' % par
           + igrey('color=j allpos=y bias=0.28',par))

    # data
    dat = 'dat' + c
    Result(dat,'window n3=1 min3=%(xcig)g |' %par + dgrey(''))    

    # wavefields
    sou = 'sou' + c
    rec = 'rec' + c
    spmig.wflds(sou,rec,'wav',dat,par)
#    Result(rec,rec,'window | real | transp | grey')

    img = 'img' + c
    cig = 'cig' + c
    if(c=='p'):
        spmig.imagePW('imgp','cigp','slop',       'soup','recp',par)
    else:
        spmig.imageCW('imgs','cigs','slop','slos','sous','recs',par)
    Result(img,'window | transp |'+igrey('',par))

    # dip field
    dip = 'dip' + c
    dzdx = par['dz']/par['dx']
    Flow(dip,img,'window | transp | dip rect1=15 rect2=15 liter=50 | scale rscale=%g' % dzdx)
    Result(dip,igrey('color=j',par))

    # angle-gathers
    ang = 'ang' + c
    Flow(ang,cig,
         '''
         window |
         transp plane=12 |
         transp plane=23 |
         slant adj=y p0=-2 np=400 dp=0.01 verb=y |
         put label2=tan
         ''')
    
    if(c=='s'):
        cor = 'cor' + c
        Flow(cor,[ang,'vpvs',dip],
             'pp2psang2 vpvs=${SOURCES[1]} dip=${SOURCES[2]} verb=y')        

    # stacks
    stk = 'stk' + c
    Flow(stk,ang,'stack')    
    Result(stk,igrey('',par))

# ------------------------------------------------------------
# flip neg angles polarity
Flow('flip',None,
     '''
     spike nsp=2 mag=-1,1
     n1=%(nz)d o1=%(oz)g d1=%(dz)g
     n2=400    o2=-2     d2=0.01   k2=1,201 l2=200,400
     n3=%(nx)d o3=%(ox)g d3=%(dx)g 
     ''' % par)
Flow('angsflip','angs flip','math k=${SOURCES[1]} output="input*k"')
Flow('corsflip','cors flip','math k=${SOURCES[1]} output="input*k"')

Flow('sin','cors','math output="sin(atan(x2))" ')
Flow('s2','sin','math output="input^2" | stack')
Flow('s4','sin','math output="input^4" | stack')
Flow('s6','sin','math output="input^6" | stack')
Flow('den','s4 s2 s6','math s2=${SOURCES[1]} s6=${SOURCES[2]} output="input*input-s2*s6" ')
Flow('ds3','cors sin','math s=${SOURCES[1]} output="input*s^3" | stack')
Flow('ds', 'cors sin','math s=${SOURCES[1]} output="input*s" | stack')
Flow('num','ds3 s4 ds s6',
     'math s4=${SOURCES[1]} s6=${SOURCES[3]} ds=${SOURCES[2]} output="input*s4-ds*s6" ')
Flow('avo','num den','add mode=d ${SOURCES[1]}')
Result('avo',igrey('',par))

# ------------------------------------------------------------
# plot offset-gathers
for hplot in ('cigp','cigs'):
    Result(hplot,
           '''
           window j1=40 min1=3 max1=7 |
           transp plane=12 |
           transp plane=23 |
           put n2=200 o2=2.5 d2=.025 n3=1 |
           grey pclip=100 grid=y g1num=1 gridcol=7 screenratio=1
           title="" label1="z(km)" label2="x(km)"
           ''')

# plot angle-gathers
for aplot in ('angp','angs','cors','angsflip','corsflip'):
    Result(aplot,
           '''
           window j3=40 min3=3 max3=7 min2=-1 n2=200 |
           put n2=1000 o2=2.5 d2=.005 n3=1 |
           grey pclip=100 grid=y g1num=1 gridcol=7 screenratio=1
           title="" label1="z(km)" label2="x(km)"
           ''')

# ------------------------------------------------------------
# stack after correction
Flow('scor','corsflip','stack')
Result('scor',igrey('',par))
# ------------------------------------------------------------

End()
