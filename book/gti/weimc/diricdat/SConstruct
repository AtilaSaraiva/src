# Sigsbee 2A
# Wave equation migration for shot-receiver 
# Directional imaging condition post processing


from rsfproj import *
import math
import spmig


# Migration parameters
######################


par = {
    'nx':500,    'ox':10925, 'dx':150,           # shot (ft)
    'nt':1500,   'ot':0,     'dt':0.008, 'kt':1, # time (s)
    'ns':3,      'js':150,   'fs':50,            # shot subsampling
    'nh':348,    'oh':0,     'dh':75,            # full offset
    'zmin':6100, 'zmax':30000,                   # depth limits
    'wavw': 30,  'freq':10,                      # extend and peak frequency (Hz)
    'verb':'y', 'eps':0.01, 'nrmax':5,           # migration algorithm
    'dtmax':0.00005, 'tmx':16, 'pmx':0           # migration algorithm
    }

par['xmin'] = par['ox']
par['xmax'] = par['ox'] + (par['nx']-1) * par['dx']

minmax = ' min2=%g max2=%g ' % (par['xmin'],par['xmax'])

def implot(title):
    return '''
    window | transp | grey label1=Depth unit1=ft label2=Lateral unit2=ft title="%s"
    ''' % title


# Read SEG-Y files and convert to RSF format
############################################


data = 'sigsbee2a_nfs.sgy'
vstr = 'sigsbee2a_stratigraphy.sgy'

Fetch(data,'sigsbee')
Fetch(vstr,'sigsbee')

# Shot records data
Flow('zdata tzdata dhead bdhead',data,
     '''
     segyread
     tape=$SOURCE
     tfile=${TARGETS[1]}
     hfile=${TARGETS[2]}
     bfile=${TARGETS[3]}
     ''',stdin=0)

# Velocity model
Flow('zvstr tzvstr shead bshead',vstr,
     '''
     segyread
     tape=$SOURCE
     tfile=${TARGETS[1]}
     hfile=${TARGETS[2]}
     bfile=${TARGETS[3]}
     ''',stdin=0)


# Slowness: prepare for migration and datuming files (3-D format: x-y-z)
########################################################################
# slo=migration slowness, sdt=datuming slowness


Flow('vstr','zvstr',
     'put d1=25 label1=z unit1=ft o2=10025 d2=25 label2=x unit2=ft')

# Migration slowness
Flow('slo','vstr',
     '''
     window | math "output=1/input" | transp |
     spray axis=2 n=1 o=0 d=1 | put label2=y |
     window squeeze=n f3=244
     ''' % par)

Result('slo',
       '''
       window | transp |
       grey label1=Depth unit1=ft label2=Lateral unit2=ft title="Slowness" pclip=100 color=j allpos=y
       ''')

# Datuming slowness
Flow('sdt','vstr',
     '''
     window | math "output=1/input" | transp |
     spray axis=2 n=1 o=0 d=1 | put label2=y |
     window squeeze=n n3=2 j3=244
     ''')


# Shot records: prepare for file (3-D format: t-o-s)
####################################################
# t=time, o=full offset, s=shot position


Flow('ss','tzdata','dd type=float | headermath output="10925+fldr*150" | window')
Flow('oo','tzdata','dd type=float | headermath output="offset"         | window')
Flow('si','ss','math output=input/150')
Flow('oi','oo','math output=input/75')
Flow('os','oi si','cat axis=2 space=n ${SOURCES[1]} | transp | dd type=int')
Flow('sraw','zdata os',
     '''
     intbin head=${SOURCES[1]} xkey=0 ykey=1
     ''')
Flow('shot','sraw',
     '''
     put label1=t unit1=s
     label2=Offset unit2=ft d2=75 label3=Shot unit3=ft d3=150 o3=10925 |
     mutter half=false t0=1.0 v0=6000
     ''')

# Plot data for shots
Result('zero','shot','''window $SOURCE min2=0 max2=0 size2=1
    | grey  pclip=98 color=I screenratio=1.5 gainpanel=a
    label2=Position label1=Time title= label3= unit2=ft unit1=s
    labelsz=3''')

Result('shot70','shot','''window $SOURCE n3=1 f3=70 |
    grey  pclip=99 color=I gainpanel=a wantframenum=y unit1=s label1=Time
    label2=Offset unit2=ft label3=Shot unit3=ft title=
    screenratio=1.35 labelsz=3''')


# Shot-record wave-equation migration
#####################################


# Source wavelet(nw): prepare for file (1-D format: t)
Flow('wave',None,'spike nsp=1 mag=1 k1=%(kt)d n1=%(nt)d d1=%(dt)g o1=%(ot)g' % par)

loc = par.copy()
loc['ow']=10
loc['nw']=1
loc['ns']=3
loc['fs']=50
loc['js']=150


# Prepare source/receiver wavefields at the surface
###################################################


# Waveform (extended window frequency > wavw)
Flow('s_wave','wave',
     '''
     fft1 inv=n opt=n |
     window squeeze=n n1=%(nw)d min1=%(ow)g j1=%(jw)d |
     put label1=w
     ''' % loc)

# Receiver shot(nw,nrx,nry,nsx,nsy)
Flow('rwfl_shot','shot',
     '''
     fft1 inv=n opt=n |
     window squeeze=n n1=%(nw)d min1=%(ow)g j1=%(jw)d |
     spray axis=3 n=1 o=0 d=1 |
     spray axis=5 n=1 o=0 d=1 |
     put label1=w label2=rx label3=ry label4=sx label5=sy
     ''' % loc)

# rrwfl(nw,nx,ny,ne)
# sswfl(nw,nx,ny,ne)
Flow(['rrwfl','sswfl'],['rwfl_shot','s_wave'],
     '''
     srsyn verb=y
     nx=%(nx)d ox=%(ox)g dx=%(dx)g
     wav=${SOURCES[1]}
     swf=${TARGETS[1]}
     ''' % loc)

# swfl(nx,ny,nw,ne)
# rwfl(nx,ny,nw,ne)
Flow('swfl','sswfl',
     '''
     transp plane=12 |
     transp plane=23 |
     put label5=
     ''')
Flow('rwfl','rrwfl',
     '''
     transp plane=12 |
     transp plane=23 |
     put label5=
     ''')


# Datum source/receiver wavefield data in water
spmig.datum('dds','ddr','sdt','swfl','rwfl',loc)

# Wave equation migration image (3-D format: x-y-z)

Flow(['img', 'cig'],['dds', 'ddr', 'slo'],
     '''
     srmig2 slo=${SOURCES[2]} rwf=${SOURCES[1]} cig=${TARGETS[1]}
     itype=x nhz=25 hsym=y jcz=1 readwrite=y verb=y 
     ''')

Plot('img',implot('Image'))

  
# Snell filtering for horizontal reflectors
###########################################

# minimum frequency
freq = 2*math.pi*0.12207

# offset resolution radius from local slowness
#Flow ('omega','slo','math output="1/(8*input*freq)" ')


# simg = smoothed image (2-D format: x-z)
# stk  = weighted vertical stack
# stk2 = weighted vertical stack and smoothed image
# fimg = final image plots

# horizontal smoothing

Flow('simg','img','smooth rect1=%d repeat=3' % int(omega/par['dx']))
Plot('simg',implot('Smoothed Image'))

# vertical weighting

Flow('stk','cig',
     '''
     window squeeze=n | math output="input*exp(-(x3/%g)^2)" |
     stack axis=3 norm=n
     ''' % (4.*omega))

Plot('stk',implot('Weighted Image'))

# horizontal smoothing and vertical weighting

Flow('stk2','stk','smooth rect1=%d repeat=3' % int(omega/par['dx']))
Plot('stk2',implot('Smoothed and weighted Image'))

Result('fimg',['img', 'stk', 'simg', 'stk2'],'TwoRows')


End()

