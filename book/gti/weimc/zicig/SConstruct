## 
 # Angle-gathers after wave-equation migration (ziggy model)
 ##
 
from rsfproj import *

# ------------------------------------------------------------
# MIGRATION parameters
# ------------------------------------------------------------
par = {
    'ox':10925,'dx':150, 'nx':500,
    'oz':6100, 'dz':25,
    'oh':-3000,'dh':150
    }

# ------------------------------------------------------------
# from ft to km
ft2km = 0.3024/1000

par['ox']=par['ox']*ft2km
par['dx']=par['dx']*ft2km

par['oz']=par['oz']*ft2km
par['dz']=par['dz']*ft2km

par['oh']=par['oh']*ft2km
par['dh']=par['dh']*ft2km

# ------------------------------------------------------------

par['zmin']=2
par['zmax']=9

par['xmin']=6
par['xmax']=16

IRATIO = ' labelsz=6 screenratio=0.7 screenht=10 min2=%g max2=%g ' % (par['xmin'],par['xmax'])

# ------------------------------------------------------------

def igrey(custom,par):
    return '''
    grey labelrot=n wantaxis=y wanttitle=n grid=y gridcol=6
    title="" pclip=97 label1="z(km)" label2="x(km)"
    min1=%g max1=%g
    %s
    ''' % (par['zmin'],par['zmax'],custom)

LABEL = " labelsz=12 titlesz=16 "
# ------------------------------------------------------------

# ------------------------------------------------------------
# from SGY to RSF
# ------------------------------------------------------------
velo = 'sigsbee2a_migvel.sgy'
vstr = 'sigsbee2a_stratigraphy.sgy'

Fetch(velo,'sigsbee')
Fetch(vstr,'sigsbee')

Flow('zvelo tzvelo ./vhead ./bvhead',velo,
     '''
     segyread
     tape=$SOURCE
     tfile=${TARGETS[1]}
     hfile=${TARGETS[2]}
     bfile=${TARGETS[3]}
     ''',stdin=0)
Flow('zvstr tzvstr ./shead ./bshead',vstr,
     '''
     segyread
     tape=$SOURCE
     tfile=${TARGETS[1]}
     hfile=${TARGETS[2]}
     bfile=${TARGETS[3]}
     ''',stdin=0)

# ------------------------------------------------------------
# VELOCITY
# ------------------------------------------------------------
# stratigraphic slowness
Flow('vstr','zvstr',
     '''
     scale rscale=%g |
     put d1=%g o2=%g d2=%g label1=z label2=x
     '''% (ft2km,25*ft2km, 10025*ft2km, 25*ft2km))
Flow('vstrpad','vstr',
     '''
     window n1=1 f1=1200 |
     spray axis=1 n=100 o=0 d=%g
     ''' % (25*ft2km))
Flow('s0','vstr vstrpad',
     '''
     cat axis=1 space=n ${SOURCES[1]} |
     window |
     math "output=1/input" |
     transp |
     spray axis=2 n=1 o=0 d=1 |
     put label2=y |
     window squeeze=n f3=244
     ''' % par)

# migration slowness
Flow('velo','zvelo',
     '''
     scale rscale=%g |
     put d1=%g o2=%g d2=%g label1=z label2=x
     '''% (ft2km,25*ft2km, 10025*ft2km, 37.5*ft2km))
Flow('velopad','velo',
     '''
     window n1=1 f1=1200 |
     spray axis=1 n=100 o=0 d=%g
     ''' % (25*ft2km))
Flow('s1','velo velopad',
     '''
     cat axis=1 space=n ${SOURCES[1]} |
     window |
     math "output=1/input" |
     transp |
     spray axis=2 n=1 o=0 d=1 |
     put label2=y |
     window squeeze=n f3=244
     ''')

# wrong migration velocity
Flow('sm','s1',
     '''
     window squeeze=n f3=350 |
     math output=0.1 |
     pad beg3=350    |
     math output=input+1 |
     smooth rect3=31
     ''')
Flow('s2','s1 sm',
     'math s=${SOURCES[0]} m=${SOURCES[1]} output=s*m')

# ------------------------------------------------------------
# MIGRATION
# ------------------------------------------------------------

SLOlist = '0','2'
CIGlist = '7','11','15'
IMGlist = 'x','t'

cigpar = {'npt':500,'opt':4000,'dpt':80,
           'na':400, 'oa':-2.0, 'da':0.01, 'mina':0, 'maxa':1.3 }
cigpar['opt']=cigpar['opt']*ft2km
cigpar['dpt']=cigpar['dpt']*ft2km

# ------------------------------------------------------------

# CIG to slant-stack
def tcig2ssk():
    return '''
    slant adj=y p0=%g np=%d dp=%g
    ''' % (cigpar['opt'],cigpar['npt'],cigpar['dpt'])
def hcig2ssk():
    return '''
    slant adj=y p0=%g np=%d dp=%g
    ''' % (cigpar['oa'],cigpar['na'],cigpar['da'])

# slant-stack to angle
def tssk2ang():
    return '''
    tshiftcos a0=0 na=150 da=0.45
    velocity=${SOURCES[1]}
    '''
def hssk2ang():
    return '''
    tan2ang a0=0 na=150 da=0.45
    '''
# ------------------------------------------------------------

for i in SLOlist:
    for k in IMGlist:
        SRcig = 'SRC' + i + k
        Fetch(     SRcig+'.hh','sigsbee')

        if(k=='t'):
            Flow(SRcig,SRcig+'.hh',
                 '''
                 window squeeze=n |
                 put o1=%(ox)g d1=%(dx)g
                     o3=%(oz)g d3=%(dz)g
                 ''' % par)
        if(k=='x'):
            Flow(SRcig,SRcig+'.hh',
                 '''
                 window squeeze=n |
                 put o1=%(ox)g d1=%(dx)g
                     o3=%(oz)g d3=%(dz)g
                     o4=%(oh)g d4=%(dh)g
                 ''' % par)

# ------------------------------------------------------------
# RESULTS
# ------------------------------------------------------------
for i in SLOlist:
    slo = 's' + i
    Result(slo,'window      | transp |'
           +igrey('pclip=100 allpos=y bias=6.75676e-05'+IRATIO,par))

    vel = 'v' + i
    Flow(vel,slo,'window | transp | smooth rect1=51 | math output=1/input')

    for k in IMGlist:
        
        # image / CIGs
        SRimg = 'SRI' + i + k
        SRcig = 'SRC' + i + k
        Flow(SRimg,SRcig,'window n4=1 min4=0 | transp')
        Result(SRimg,igrey('pclip=97'+IRATIO,par))

        # dip field
        SRdip = 'DIP' + i + k
        Flow(SRdip,SRimg,'dip rect1=3 rect2=3 order=3 liter=100')
        Result(SRdip,igrey('pclip=99 color=j'+IRATIO,par))

        SRmap = 'MAP' + i + k
        Flow(SRmap,[SRdip,slo],'transp | remap1 pattern=${SOURCES[1]} | transp')

        # image after plane-wave distruction
        SRpwd = 'PWD' + i + k
        Flow(SRpwd,[SRimg,SRdip],'pwd dip=${SOURCES[1]}')
        Result(SRpwd,igrey('pclip=99'+IRATIO,par))

        # dip-corrected velocity
        vco = 'v' + i + k
        Flow(vco,[SRmap,vel],
             '''
             math v=${SOURCES[1]} output="v/cos(atan(input*%(dz)g/%(dx)g))"
             ''' % par)

        for l in CIGlist:

            # image
            z = 'z' + i + k + l
            lmin = float(l) - 20 * float('%(dx)g' % par)
            lmax = float(l) + 20 * float('%(dx)g' % par)
            Flow(z,SRcig,
                 '''
                 window n4=1 min4=0 min1=%g max1=%g |
                 transp |
                 bandpass fhi=10
                 ''' % (lmin,lmax) )
            Plot(z,z,igrey('pclip=97 screenratio=1.5 '+LABEL,par))
            
            # offset gathers
            h = 'h' + i + k + l
            Flow(h,SRcig,
                 '''
                 window n1=1 min1=%g |
                 bandpass fhi=10
                 ''' % float(l))
            
            # angle gathers
            a = 'a' + i + k + l    # space-shift
            b = 'b' + i + k + l    #  time-shift (w/o dip cor)
            c = 'c' + i + k + l    #  time-shift (w/  dip cor)

            if(k=='x'):
                Flow(a,h,'bandpass fhi=10 | '+hcig2ssk() +'|'+ hssk2ang())

                Plot  (a,a,igrey('label2="\F10 q\F3 (\^o\_)"'+LABEL,par))
                Plot  (h,h,igrey('label2="h(km)"   '+LABEL,par))
                
            if(k=='t'):
                vb = 'vb' + i + k + l
                Flow(vb,vel,'window n2=1 min2=%g' % float(l) )
                vc = 'vc' + i + k + l
                Flow(vc,vco,'window n2=1 min2=%g' % float(l) )

                Flow(a,h,'bandpass fhi=10 | '+tcig2ssk())

                Flow(b,[a,vb],tssk2ang()) # w/o dip correction
                Flow(c,[a,vc],tssk2ang()) # w/  dip correction

                Plot  (h,igrey('label2="\F10 t\F3 (s)" '+LABEL,par))
                Plot  (a,igrey('label2="\F10 n\F3 (km/s)" max2=5'+LABEL,par))
                Plot  (b,igrey('label2="\F10 q\F3 (\^o\_)"'+LABEL,par))
                Plot  (c,igrey('label2="\F10 q\F3 (\^o\_)"'+LABEL,par))
    
               
for l in CIGlist:
    for i in SLOlist:
        SRoff = 'SRoff' + i + '-' + l
        SRang = 'SRang' + i + '-' + l
        SRtic = 'SRtic' + i + '-' + l

        zx = 'z' + i + 'x' + l
        hx = 'h' + i + 'x' + l
        ht = 'h' + i + 't' + l

        ax = 'a' + i + 'x' + l

        at = 'a' + i + 't' + l
        bt = 'b' + i + 't' + l
        ct = 'c' + i + 't' + l
        
        Result(SRoff,[zx,hx,ht],'SideBySideAniso')
        Result(SRang,[zx,ax,ct],'SideBySideAniso')
        Result(SRtic,[zx,ht,at,ct],'SideBySideAniso')

End()
