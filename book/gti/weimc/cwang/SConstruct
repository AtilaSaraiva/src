from rsfproj import *
from math import *
import string, spmig

# ------------------------------------------------------------
par = {
    'nx':800, 'dx':20,    'ox':-1000,
    'nz':300, 'dz':10,    'oz':0,
    'nt':4000,'dt':0.004, 'ot':0,
    'nh':800, 'dh':20,    'oh':-2000,
    'ns':1,   'ds':20,    'os':1000, 'fs':0, 'js':1,
    'nw':200, 'jw':2,
    'velp':2000,
    'vels':1000,
    'nhx':20, 'nhz':20
    }
par['ow']=0.
par['dw']=1./(par['nt']*par['dt'])
par['vpvs']= par['velp'] / par['vels']
# ------------------------------------------------------------
def igrey(custom):
    return '''
    grey labelrot=n title="" pclip=100 grid=n gridcol=5
    %s
    ''' % custom
def igraph(custom):
    return '''
    graph labelrot=n title="" transp=y yreverse=y
    wantaxis=n wantlabels=n
    min2=-0.5 max2=2.0 min1=0 max1=2000
    %s
    ''' % custom

# ------------------------------------------------------------

aaa = 30.
rad = aaa / 180. * pi
lll = 1000

deg = (           0,           aaa    )
dep = (lll/tan(rad),lll/sin(rad) - lll*tan(rad)) 
ndeg = len(deg)

# ------------------------------------------------------------
ppan = string.join(map(lambda a: str(
    tan(a*pi/180)
    ),deg),',')

psan = string.join(map(lambda a: str(
    tan( ( asin(sin(a*pi/180)/par['vpvs']) + a*pi/180 )/2 )
    ),deg),',')
# ------------------------------------------------------------

Flow('dip',None,
     'spike n1=%d d1=%g o1=%g n2=%d nsp=%d k2=%s mag=%s' % 
     (par['nx'],
      par['dx'],
      par['ox'],
      ndeg,
      ndeg,
      string.join(map(str,range(1,1+ndeg)),','),
      string.join(map(lambda a: str(tan(a*pi/180)),deg),',')))

Flow('dep',None,
     'spike n1=%d d1=%g o1=%g n2=%d nsp=%d k2=%s mag=%s' % 
     (par['nx'],
      par['dx'],
      par['ox'],
      ndeg,
      ndeg,
      string.join(map(str,range(1,1+ndeg)),','),
      string.join(map(lambda a: str(a),dep),',')))

Flow('ref','dip dep','math d=${SOURCES[0]} z=${SOURCES[1]} output="z+d*x1" ')
Plot  ('ref','ref','graph yreverse=y min2=0 max2=3000 min1=0 max1=4000 wantaxis=n wanttitle=n')
Result('ref','ref','graph yreverse=y min2=0 max2=3000 min1=0 max1=4000 title="" label1=x label2=z')

# wavelet
Flow('wav',None,
     '''
     spike nsp=1 mag=1 k1=1
     n1=%(nt)d d1=%(dt)g o1=0
     ''' % par)

# velocity/slowness
Flow('vel',None,
     '''
     spike nsp=1 mag=1
     n1=%(nz)d d1=%(dz)g o1=%(oz)g
     n2=%(nx)d d2=%(dx)g o2=%(ox)g |
     transp |
     spray axis=2 n=1 o=0 d=1 |
     put label1=x label2=y label3=z
     ''' % par)
Flow('slop','vel','math output=input/%(velp)d' % par)
Flow('slos','vel','math output=input/%(vels)d' % par)

# vpvs ratio
Flow('vpvs',None, 'spike nsp=1 mag=%(vpvs)g n1=%(nz)d o1=%(oz)g d1=%(dz)g' % par)

# dip angle
Flow('dipa',None,
     '''
     spike nsp=2 mag=%s
     n1=%d o1=%g d1=%g
     k1=0,%d l1=%d,%d
     ''' % (ppan,par['nz'],par['oz'],par['dz'],
            lll/tan(rad)/par['dz']+5+1,
            lll/tan(rad)/par['dz']+5,
            par['nz']))

# PP reflection angles
Flow('ppovl',None,
     '''
     spike nsp=2 mag=%s n1=4 k1=1,2 |
     spray axis=2 n=%d o=%g d=%g |
     transp
     ''' % (ppan,par['nz'],par['oz'],par['dz']))
Plot('ppovl','ppovl',igraph(''))

# PS reflection angles
Flow('psovl',None,
     '''
     spike nsp=2 mag=%s n1=4 k1=1,2 |
     spray axis=2 n=%d o=%g d=%g |
     transp
     ''' % (psan,par['nz'],par['oz'],par['dz']))
Plot('psovl','psovl',igraph(''))
# ------------------------------------------------------------

for case in ('pp','ps'):

    # data
    Flow(case,'ref dip',
         '''
         kirmod vel=%d vel2=%d dip=${SOURCES[1]}
         nt=%d dt=%g t0=%g     freq=10
         nh=%d dh=%g h0=%g
         ns=%d ds=%g s0=%g |
         tpow tpow=1 |
         put label1=t label2=h
         ''' %
         ( par['velp'],
          (par['velp'],par['vels'])[case=='ps'],
           par['nt'],par['dt'],par['ot'],
           par['nh'],par['dh'],par['oh'],
           par['ns'],par['ds'],par['os'])
         )
    Result(case,'grey title="%s" ' % string.upper(case))

    # migration
    sou = case + 'sou'
    rec = case + 'rec'
    spmig.wflds(sou,rec,'wav',case,par)
    Result(rec,rec,'window | real | transp | grey')

    ovl = case + 'ovl'

    for TYP in ('x'): # imaging condition

        # imaging condition parameters
        if(TYP=='x'):
            par['misc']='itype=x nhx=%(nhx)d nhz=1       hsym=y jcx=50' % par
        else:
            par['misc']='itype=x nhx=%(nhx)d nhz=%(nhz)d hsym=y jcx=50' % par

        # migration
        img = case + 'img' + '-'+TYP
        cig = case + 'cig' + '-'+TYP
        if(case=='pp'):
            spmig.imagePW(img,cig,'slop',       sou,rec,par)
        else:
            spmig.imageCW(img,cig,'slop','slos',sou,rec,par)
        Plot(img,img,'window | transp |' + igrey('min2=0 max2=4000 min1=0 max1=3000'))
        Result(img,[img,'ref'],'Overlay')

        for LOC in (['1000','2000']):
            # offset CIGs
            off = case + 'off' + '-'+TYP + '-'+LOC

            if(TYP=='x'):
                Flow(off,cig,
                     '''
                     window squeeze=n n1=1 min1=%s |
                     stack | transp | stack
                     ''' % LOC)
            else:
                Flow(off,cig,
                     '''
                     window squeeze=n n1=1 min1=%s |
                     stack | transp | stack |
                     transp plane=12 |
                     transp plane=23 |
                     transp plane=34 |
                     window squeeze=n |
                     off2abs verb=y |
                     transp 
                     ''' % LOC)
            Result(off,off,igrey(''))

            # angle CIGs
            ang = case + 'ang' + '-'+TYP + '-'+LOC

            if(TYP=='x'):
                Flow(ang,off,
                     '''
                     slant adj=y p0=-0.5 np=250 dp=0.01 |
                     put label2=tan
                     ''' % par)
            else:
                Flow(ang,[off,'dipa'],
                     '''
                     slant adj=y p0=-0.5 np=250 dp=0.01 |
                     /home/savap/RSF/user/savap/sfangdip verb=y dip=${SOURCES[1]} |
                     put label2=tan
                     ''' % par)
            Plot(ang,ang,igrey(''))
            Result(ang,[ang,ovl],'Overlay')

                
            if(case=='ps'):
                cor = case + 'cor' + '-'+TYP + '-'+LOC
                if(TYP=='x'):                    
                    Flow(cor,[ang,'vpvs','dipa'],
                         'pp2psang2 vpvs=${SOURCES[1]} dip=${SOURCES[2]}')
                else:
                    Flow(cor,[ang,'vpvs'],
                         'pp2psang  vpvs=${SOURCES[1]} ')

                Plot(cor,cor,igrey(''))
                Result(cor,[cor,ovl],'Overlay')
            
# ------------------------------------------------------------

End()
