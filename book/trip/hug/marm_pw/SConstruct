#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
from batch import getFlowSignature
from batch import getThreads
import os
#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################
penv = {'stampede' :  { 'batch' : 'slurm',
                        'queue' : 'normal',
                        'acct'  : 'FDTD3D-Cont',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/sbatch',
			'local' : '', 
                        'suffix': 'bat', },
         'davinci' :  { 'batch' : 'pbs',
                        'queue' : 'trip',
                        'acct'  : 'symes',
                        'mail'  : 'symes@caam.rice.edu',
                        'bcmd'  : '/usr/bin/qsub',
			'local' : '',
                        'suffix': 'pbs', },
       }
######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations
# example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
suplane         = os.path.join(CWPROOT,'bin/suplane')
suconv          = os.path.join(CWPROOT,'bin/suconv')
sunull          = os.path.join(CWPROOT,'bin/sunull')
RSFSRC          = os.getenv('RSFSRC')
towed_array     = os.path.join(RSFSRC,'trip/iwave/trace/main/towed_array.x')
acd             = os.path.join(RSFSRC,'trip/iwave/acd/main/acd.x')
acdcgne         = os.path.join(RSFSRC,'trip/iwave/acd/main/acdcgne.x')
acdlbfgs        = os.path.join(RSFSRC,'trip/iwave/acd/main/acdlbfgs.x')
acdiva          = os.path.join(RSFSRC,'trip/iwave/acd/main/acdiva.x')
acdds_grad      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdds_grad.x')
acddscheb_grad  = os.path.join(RSFSRC,'trip/iwave/acd/main/acddscheb_grad.x')
acdaltcheb      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdaltcheb.x')
acdadjtest      = os.path.join(RSFSRC,'trip/iwave/acd/main/acdadjtest.x')
helm            = os.path.join(RSFSRC,'trip/iwave/helm/main/helm.x')
deriv           = os.path.join(RSFSRC,'trip/iwave/grid/main/GridDeriv.x')
linmute         = os.path.join(RSFSRC,'trip/iwave/trace/main/linmute.x')

fetches = {
    'wavelet_base.su' : ['marmousi', 'http://www.trip.caam.rice.edu'],
    'velocity.HH' : ['marmousi', 'http://www.trip.caam.rice.edu']
}
for file in fetches.keys():
    Fetch(file,fetches[file][0],server=fetches[file][1])   

# new diml consts
N1 = 141
D  = 24
N2 = 444 
F2 = 383
NPW= 31
DP = 0.2
NT = 751
NTP= 101
DT = 0.004
SCALCO = 1000

Flow('ocean',None,'makevel n1=' + str(N1) + ' d1=' + str(D) + ' n2=' + str(N2) + ' d2=' + str(D) + ' o1=0 o2=0 v000=1.5 | put data_type=vel data_format=native_float label1=Depth unit1=m label2=Position uni2=m unit=m/ms esize=4',stdin=0) 
Flow('vel24base','velocity.HH','dd form=native | window j1=6 j2=6')
Flow('vext','vel24base','window f2=' + str(F2) + ' n2=1 | spray axis=2 d=' + str(D) + ' n=60')
Flow('extv',['vel24base', 'vext'], 'cat axis=2 d=' + str(D) + ' ${SOURCES[1]}')
Flow('vel24',['ocean','extv'],'window n1=15 f1=0 | cat axis=1 d=' + str(D) + ' ${SOURCES[1]}') 
#Flow('sedmts',['vel24','ocean'],'add mode=a scale=1,-1 ${SOURCES[1]}')
#Flow('sedhsm','sedmts','cp ${SOURCES[0]} ${TARGETS[0]}; ' + helm + ' in=${SOURCES[0]} out=${TARGETS[0]} datum=400 power=-1 bc=0 scale1=5.e+5 scale2=5.e+5',stdin=0,stdout=-1)
#Flow('vel24sm',['ocean','sedhsm'],'add mode=1 scale=1,1 ${SOURCES[1]}')
Flow('vel24sm','vel24','smooth rect1=5 rect2=5 repeat=10')
Flow('vel24sm2','vel24','smooth rect1=5 rect2=5 repeat=2')
Flow('vel24sm4','vel24','smooth rect1=5 rect2=5 repeat=4')

Flow('vel24big','vel24','smooth rect1=10 rect2=10 repeat=10')

Flow('csq24','vel24','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm','vel24sm','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24sm2','vel24sm2','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24big','vel24big','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csq24noah','ocean','add mode=p ${SOURCES[0]} |put data_type=csq')
Flow('csqbig80pct',['csq24big.rsf', 'csq24noah.rsf'], 
     'add < ${SOURCES[0]} ${SOURCES[1]} scale=0.8,0.2 > ${TARGETS[0]}')
Flow('csqbig80pct_ext','csqbig80pct', 
     'spray < ${SOURCES[0]} axis=3 n=60 d=1.0 o=0.0| ' +
     'put dim=2 gdim=3 id1=0 id2=1 id3=3 ' +
     '> ${TARGETS[0]}')


Flow('dcsq24', ['csq24', 'csq24sm2'],'add mode=a scale=1,-1 < csq24.rsf csq24sm2.rsf |window min1=180| sfpad beg1=8') 
Flow('csqext.rsf','csq24sm.rsf', 'sfcat csq24sm.rsf csq24sm.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)
Flow('dcsqext.rsf','dcsq24.rsf', 'sfcat dcsq24.rsf dcsq24.rsf d=1.0 o=0.0 | sfput id1=0 id2=1 id3=3 dim=2 gdim=3',stdin=0)

# plane wave data
Flow('hdr1p.su', None, sunull + ' nt=' + str(NT) + ' ntr=' + str(N2) + ' dt=' + str(DT) + '| ' + sushw + ' key=sx a=0| ' + sushw + ' key=selev a=-8 |' + sushw + ' key=gx a=0 b=' + str(D) + ' j=' + str(N2) + '| ' + sushw + ' key=gelev a=-240 > ${TARGETS[0]}', stdin=0, stdout=-1)

Flow('wav1p.su', ['wavelet_base.su'], suplane + ' nt=' + str(NTP) + ' ntr=' + str(N2) + ' npl=1 dip1=0.0 len1=' + str(N2) + ' dt=' + str(DT) + '| ' + sushw + ' key=sx a=0| ' + sushw + ' key=selev a=-12 |' + sushw +' key=gx a=0 b=' + str(D) + ' j=' + str(N2) + '| ' + sushw + ' key=gelev a=-12| ' + sushw + ' key=offset a=0 |' + suconv + ' sufile=${SOURCES[0]} > ${TARGETS[0]}', stdin=0, stdout=-1)

# pre-cooked exes
exe_serial  = {}
exe_getafix = {'platf':'mpi', 'ppn':'16'}
exe_stampede_4hr = {'platf':'stampede','nodes':'2','ppn':'16','wall':'04:00:00'}
exe_stampede_10min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:10:00'}
exe_stampede_30min = {'platf':'stampede','nodes':'2','ppn':'16','wall':'00:30:00'}
# choose

Flow('bornbigm.su','bornbig.su', linmute + ' input=${SOURCES[0]} output=${TARGETS[0]} mute_slope=0.7 mute_zotime=0 mute_width=200',stdin=0,stdout=0)
Flow('bornbigm2.su','bornbigm.su', linmute + ' input=${SOURCES[0]} output=${TARGETS[0]} mute_slope=0.7 mute_zotime=0 mute_width=200',stdin=0,stdout=0)

# movie-src output file
Flow('movie1p','wav1p.su csq24',
     '''
     makevel n1=141 n2=444 n3=51 d1=24 d2=24 d3=25 v000=0  | 
     put id1=0 id2=1 id3=2 dim=2 gdim=3 > ${TARGETS[0]} &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 movie=${TARGETS[0]}
     ''',stdin=0,stdout=-1,workdir='movie1p.work')

# trace-src output file
Flow('shot1p.su','wav1p.su csq24 hdr1p.su',
     '''
     /bin/cp ${SOURCES[2]} $TARGET &&
     acd deriv=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 
     csq=${SOURCES[1]} source=${SOURCES[0]} sampord=1 data=$TARGET
     ''',stdin=0,stdout=-1,workdir='shot1p.work')

jobs = [
        { 'job': 'born1p',
          'pre': '/bin/cp ${SOURCES[0]} ${TARGETS[0]}',
          'src': ['hdr1p.su', 'wav1p.su', 'csq24big.rsf', 'dcsq24.rsf'],
          'tgt': ['born1p.su'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=0 order=2 cfl=0.5 cmin=1.0 cmax=6.0 sampord=1 ' +
		 'csq=${SOURCES[2]} csq_d1=${SOURCES[3]} source=${SOURCES[1]} ' +
		 'data=${TARGETS[0]} partask=' +
	 	 getThreads(exe_serial),
          'exe': exe_serial
	}, 
	{ 'job': 'mig1p',
          'pre': 'add scale=0.0 < ${SOURCES[2]} > ${TARGETS[0]}',
	  'src': ['born1p.su', 'wav1p.su', 'csq24big.rsf'],
          'tgt': ['mig1p.rsf'],
          'cmd': acd + ' ' + 
		 'deriv=1 adjoint=1 order=2 cfl=0.5 ' +
		 'cmin=1.0 cmax=6.0 sampord=1 nsnaps=20 ' +
		 'csq=${SOURCES[2]} csq_b1=${TARGETS[0]} ' +
		 'source=${SOURCES[1]} ' +
		 'data=${SOURCES[0]} partask=' +
	 	 getThreads(exe_serial),
          'exe': exe_serial
        },
  ]

# loop for jobs defined in jobs dictionary
for i in range(len(jobs)):
    print len(jobs)
    sig = getFlowSignature(jobs[i]['job']+'.work',jobs[i], penv)
    if sig == None:
       print 'Error return from iwave.getFlowSignature - cannot set up job = ' + i
    else:
       Flow(sig['tgt'], sig['src'], sig['cmd'], stdin=0, stdout=0, workdir=sig['dir'])

End()
