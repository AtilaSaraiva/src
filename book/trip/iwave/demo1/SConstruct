from rsf.proj import *

for m in ('dn','vp'):
    # Get model
    mod = m + '2d_2.5m.hh'
    Fetch(mod,'iwave')

    j = 1 # subsampling
    for r in range(4):
        modrsf = '%s%d' % (m,r)
        Flow(modrsf,mod,
             '''
             dd form=native | window j1=%d j2=%d |
             put label1=Depth unit1=m label2=Distance unit2=m
             label=%s unit="%s"
             ''' % (j,j,('Velocity','Density')[m=='dn'],('km/s','kg/m\^3\_')[m=='dn']))

        Result(modrsf,'grey color=j mean=y title="%g-m model" scalebar=y barreverse=y' % (2.5*j))

        j *= 2

Flow('wavelet',None,
     '''
     spike n1=401 o1=-0.4 d1=0.002 k1=201 |
     trapez frequency=0.,2.5,15.0,20.0 |
     sfscale dscale=1.e6 
     ''')
Flow('thead','wavelet','segyheader')
Flow('wavelet.su','wavelet thead','suwrite tfile=${SOURCES[1]}')
     

for r in range(4):
    dn = 'dn%d' % r
    vp = 'vp%d' % r

    par = 'iwave%d.par' % r
    
    Flow(par,[dn,vp,'wavelet.su','hdr.su'],
         '''
         echo
         INPUT DATA FOR iwave
------------------------------------------------------------------------
FD:

   scheme_phys = 24         scheme
           cfl = 0.4        proportion of max dt/dx
          cmin = 1.0
          cmax = 4.5
         fpeak = 0.015      central frequency

------------------------------------------------------------------------
PML info: layer thickness in WL at fpeak, cmax

           nl1 = 0.0         z - neg
           nr1 = 0.5         z - pos
           nl2 = 0.5         x - neg
           nr2 = 0.5         x - pos
   scheme_npml = 24          scheme for PML

------------------------------------------------------------------------
Source info:

       srctype = point
        source = ${SOURCES[2]}
       sampord = 0             sampling order
         phase = zerophase     wavelet phase
       refdist = 1000.0        reference distance
        refamp = 1.0           reference pressure 

------------------------------------------------------------------------
Trace info:

      hdrfile  = ${SOURCES[3]}
     datafile  = data.su

------------------------------------------------------------------------
Model info:

      velocity = ${SOURCES[1]}
       density = ${SOURCES[0]}

------------------------------------------------------------------------
MPI info:

       mpi_np1 = 1      n_doms along axis 1
       mpi_np2 = 1      n_doms along axis 2
       mpi_np3 = 1      n_doms along axis 3
       partask = 1       task parallelization

------------------------------------------------------------------------
Output info:

       dump_pi = 1           dump parallel/dom. decomp info
      dump_lda = 1           dump grid data for allocated arrays
      dump_ldc = 1           dump grid data for computational arrays
     dump_term = 1           dump terminator data
     ''',stdin=0)

End()
