###########################################################################
# STANDARD HEADER
###########################################################################
import sys, os

sys.path.append(os.path.join(os.environ.get('RSFROOT'),'lib'))

from rsfproj import *
Book()

###########################################################################
# Data (change later)
##########################################################################

datdir  = "ftp://begpc132.beg.utexas.edu/data/textures"
datdir2 = "ftp://begpc132.beg.utexas.edu/data/book/iee"

###########################################################################

g = "grey color=I crowd1=0.96 crowd2=0.85 titlesz=20 wantaxis=0 title='%s'"

textures = ['granite','wood','herr','brick','ridges','WGstack']


for file in textures[0:5]:
    Fetch(file + '.H',datdir)
    Flow(file,file + '.H',"dd data_format=native_float")

Fetch('WGstack.H',datdir2)
Flow('WGstack','WGstack.H',"window f2=500 j2=2 n2=125 n1=250 j1=2")

makepef = 'pef niter=40 a=10,10 maskin=$SOURCE lag=${TARGETS[1]}'

for file in textures:
    Plot(file,file,g % "Training Image")

    #------------------------------------------------------------
    # Minimize ||Data*PEF||^2 for unknown PEF.  Note: can
    # override pars on cmdline in %-pef.P parfile.
    #------------------------------------------------------------
    pef = file + '-pef'
    lag = file + '-lag'
    Flow([pef,lag],file,makepef)

    #------------------------------------------------------------
    # Synthesized texture = Random #'s/PEF  ("/" = poly. div.)
    #------------------------------------------------------------
    syn = file + '-syn'
    Flow(syn,[file,pef],
              '''noise type=0 range=127.5 mean=0 rep=y seed=2003 | 
              helicon filt=${SOURCES[1]} div=1''')
    Plot(syn,syn,g % "Synthesized Image")

    #------------------------------------------------------------
    # Compute residual for known PEF: res = Data*PEF
    #------------------------------------------------------------
    wht = file + '-wht'
    Flow(wht,[file,pef],"helicon filt=${SOURCES[1]}")
    Plot(wht,wht,g % "TI * PEF")

    Combine(file,[file,syn,wht],'SideBySideAniso',result=1)

for file in textures[1:5]:
    #------------------------------------------------------------
    # Punch hole in data files.
    #------------------------------------------------------------
    hole = file + '-hole'
    known = file + '-known'
    Flow([hole,known],file,"hole maskout=${TARGETS[1]}")
    Plot(hole,hole,g % "Gapped")

    pef = hole + '-pef'
    lag = hole + '-lag'
    Flow([pef,lag],hole,makepef)

    #------------------------------------------------------------
    # Fill hole in data
    #------------------------------------------------------------
    fill = hole + '-fill'
    Flow(fill,[hole,known,pef],
              "miss filt=${SOURCES[2]} mask=${SOURCES[1]} padin=20")
    Plot(fill,fill,g % "Restored")

    Combine(fill,[hole,file,fill],'SideBySideAniso',result=1)
    
###########################################################################

End()
