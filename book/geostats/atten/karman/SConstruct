# Inversion for von Karman spatial autocorrelation parameters in 1-D Fourier domain
#
# December 2006
#
# Thomas Jules Browaeys 
# Bureau of Economic Geology
# University of Texas at Austin
# mailto:jules.browaeys@beg.utexas.edu


from rsfproj import *
from math import pi


# ---------------
# Spatial 1D grid
# ---------------

# Master parameters
#
# nx = number of points in X
# dx = space data step sampling

# Slave parameters (spatial frequency content)
#
# fpx = 1/dx        = frequency space periodicity (Hz)
# lx  = nx*dx       = space period
# dfx = 1/lx        = frequency step
# fmx = 1/dx - 1/lx = maximum frequency
# fnx = 1/(2*dx)    = nx/(2*lx) = Nyquist frequency
#
# Signal X detecting content (Hz) =  dfx < fx < fnx


pgrid = {'nx':512, 'ox':0., 'dx':1.}


# Create spatial grid


Flow('spacegrid',None,'spike nsp=1 mag=1 n1=%(nx)d d1=%(dx)g o1=%(ox)g | put label1=x unit1=m' % pgrid)


# --------------------
# Synthetic 1-D curve
# --------------------

# b   = correlation length scale in x (m)
# nu  = Hurst exponent 0 < and < 0.5 = Bessel function order
# gmu = mean of Gaussian white noise
# gvr = variance of Gaussian white noise = (standard deviation)^2
# grn = noise range
# gsd = seed for random generator


psyn = {'b':50., 'nu':0.4, 'gmu':0., 'gvr':9., 'grn':1., 'gsd':1317}


# Create Gaussian white noise


Flow('wgauss','spacegrid','noise mean=%(gmu)g range=%(grn)g rep=y seed=%(gsd)g type=y var=%(gvr)g' % psyn)
Plot('wgauss','sfgraph title="Gaussian white noise"')


# Discrete Fourier Transform (fft) (k=0,N-1)
#
# S(k*DF) = DL*sum(n=0,N-1) s(n*DL)*exp(-2*i*pi*k*n/N)
#
# s  = spatial signal
# S  = frequency signal
# N  = points number in space
# DF = frequency sampling step = 1/L
# L  = spatial length of signal = 1/DF
# DL = space sampling step = L/N = 1/(N*DF)
# FM = maximum frequency = 1/DL - 1/L
#
# Properties
#
# Symmetry S(-u) = S*(u)
# Periodicity S(ix+NX) = S(ix)
# Physical vectors (k=0,N-1)
# S(N-1) = S(-1) = S*(1)
# S(N-2) = S(-2) = S*(2)
# ...
# S(N/2+1) = S(-N/2-1) = S*(N/2-1)
# S(N/2)   = S(-N/2)   = S*(N/2)
#
# Dimension in Fourier space [0,nx/2] is nx/2+1
# [fx] = dfx*(-nx/2+1:1:nx/2)


Flow('fwgauss','wgauss','sffft1 sym=y')
Plot('fwgauss',
     '''
     sfadd abs=y | sfreal | put label1=kx unit1=1/m |
     sfgraph title="Gaussian white noise spectrum"
     ''')


# Amplitude of white spectrum


Flow('mfwgauss','fwgauss',
     '''
     add abs=y | real | stack axis=1 norm=n |
     math output="input*%g" | spray axis=1 n=%d
     ''' % (1./(pgrid['nx']/2+1),pgrid['nx']/2+1))


# Stochastic process von Karman 1-D filter in spectral domain (Lord, 1954)


Flow('vkfilt','fwgauss','sfmath output="(1+(%(b)g*x1)^2)^(-0.25-0.5*%(nu)g)"' % psyn)
Plot('vkfilt','sfreal | put label1=kx unit1=1/m | sfgraph title="Filter spectrum F(kx)"')


# Logarithmic plot for separable least square inversion method ("Conical Coolie Hat")


Flow('lvkfilt','vkfilt','sfreal | sfmath output="log(input)"')
Flow('llbfilt','lvkfilt','sfmath output="log(1+((%(b)g)*x1)^2)"' % psyn)
Plot('llfilt','lvkfilt llbfilt',
     '''
     cmplx ${SOURCES[0:2]} |
     put label1='Ln(1+b2kx2)' unit1= label2='Ln[F(kx)]' | sfgraph title="Ln[F(kx)] = p*Ln(1+b2kx2)"
     ''',stdin=0)


# Display panel 1


Result('panel1','wgauss fwgauss vkfilt llfilt','TwoRows',vppen='xsize=10 ysize=10')


# Spectral filtering of white noise and inverse Fourier transform


Flow('fcgauss',['vkfilt','fwgauss'],'sfmath r=${SOURCES[0]} p=${SOURCES[1]} type=complex output="r*p"')
Flow('cgauss','fcgauss','sffft1 sym=y inv=y')

Flow('rfcgauss','fcgauss','sfadd abs=y | sfreal')
Plot('cgauss','put label1=x unit1=m | sfgraph title="Correlated Gaussian noise"')
Plot('rfcgauss','put label1=kx unit1=1/m | sfgraph title="Correlated Gaussian noise spectrum"')


# Logarithmic plot for separable least square inversion method ("Conical Coolie Hat")


Flow('lrfcgauss',['rfcgauss','mfwgauss'],'math r=${SOURCES[0]} m=${SOURCES[1]} output="log(r)-log(m)"')
Plot('llgauss','lrfcgauss llbfilt',
     '''
     cmplx ${SOURCES[0:2]} |
     put label1='Ln(1+b2kx2)' unit1= label2='Ln[F(kx)]' | sfgraph title="Ln[F(kx)/F(0)] = p*Ln(1+b2kx2)"
     ''',stdin=0)


# Display panels 2 and 3


Result('panel2','rfcgauss llgauss vkfilt llfilt','TwoRows',vppen='xsize=10 ysize=10')
Result('panel3','wgauss fwgauss cgauss rfcgauss','TwoRows',vppen='xsize=10 ysize=10')


# -----------------------------------
# Inversion for stochastic parameters
# -----------------------------------

# Estimation of von Karman filter logarithm in spectral domain
# Optimization of (b,nu) parameters by separate least square and Gauss Newton algorithm


Flow('erfcgauss',['rfcgauss','mfwgauss'],
     '''
     math r=${SOURCES[0]} m=${SOURCES[1]} output="r/m" |
     sfkarman verb=y niter=100 a0=30.
     ''')


# Display panel 4

Flow('prfcgauss',['erfcgauss','mfwgauss'],'math r=${SOURCES[0]} m=${SOURCES[1]} output="r*m"')

Plot('fitfilt','prfcgauss rfcgauss',
     '''
     cat ${SOURCES[0:2]} axis=2 |
     put label1=kx unit1=1/m | sfgraph title="Filter estimated spectrum F(kx)"
     ''',stdin=0)

Result('panel4','fitfilt llgauss vkfilt llfilt','TwoRows',vppen='xsize=10 ysize=10')


# -----------
# Termination
# -----------


End()
