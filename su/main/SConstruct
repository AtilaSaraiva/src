import os, sys, string
sys.path.append('../..')
import configure

progs = '''
sinc
'''

try: # distributed version
    Import('env')
    env = env.Copy()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  sys.platform[:5] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-xO2','-g')
    SConscript('../lib/SConstruct')


env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../filt/lib','../lib'],
            LIBS=['su','rsf'])

mains = Split(progs)

for prog in mains:
    main = env.Program(prog + '.c')
    
    if root:
        env.Install(bindir,main[0])

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfsumain.py'
    
    docs = map(lambda prog: env.Doc(prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')

    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
 
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

#####################################################################

# 	$Id$

