import os, sys, string, re
sys.path.append('../..')
import configure

#############################################################################
# SU LIBRARY
#############################################################################
src = 'intsinc8 inttable8 mksinc sinc toeplitz'

try: # distribution version
    Import('env')
    env = env.Clone()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    incdir = os.path.join(root,'include')
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  env['PLATFORM'] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),
                                        '-xO2','-g')
    SConscript('../../api/c/SConstruct')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])
    libdir = '../../lib'
    incdir = '../../include'

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])


##############################################################################
# INCLUDES
##############################################################################

objects = []
includes = []
for source in Split(src):
    inc = env.Include(source,prefix='sf_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,inc)
    objects.append(obj)
    includes.append(inc)

##############################################################################
# MAIN LIBRARY
##############################################################################
lib = env.StaticLibrary('su',objects)
inc = env.Command('su.h',includes,Action(configure.merge))
env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

