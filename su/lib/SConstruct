import os, sys, string, re
sys.path.append('../..')
import configure

#############################################################################
# SU LIBRARY
#############################################################################
src = 'intsinc8 inttable8 mksinc sinc toeplitz'

try: # distribution version
    Import('env root libdir incdir')
    env = env.Clone()
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    libdir = '../../lib'
    incdir = '../../include'

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])


##############################################################################
# INCLUDES
##############################################################################

objects = []
includes = []
for source in Split(src):
    inc = env.Include(source,prefix='sf_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,inc)
    objects.append(obj)
    includes.append(inc)

##############################################################################
# MAIN LIBRARY
##############################################################################
lib = env.StaticLibrary('su',objects)
inc = env.Command('su.h',includes,Action(configure.merge))
env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

