import os, sys, re, string, types
sys.path.append('../../framework')
import bldutil

progs = '''
aastack agmig ai2refl avo beamspray cascade c2r cell2 cell3 cgscan
cmp2shot constfdmig2 cos2ang depth2time diffoc diffraction dimag dmo
dsr dsr2 envelope fincon findmo finstack fkamo fkdmo fold fourvc
fourvc0 fourvc2 freqint freqlet gazdag gdmo halfint headerattr
headermath hwt2d hwtex infill inmo inmo3 intbin intbin3 isin2ang
itaupmo itaupmo2 itaupmo3 itxmo iwarp iwarp2 iwarp3 kirchinv kirchnew
kirmod kirmod3 linsincos migsteep3 modrefl modrefl2 modrefl3 moveout
nmo nmo3 nmov nmow nmow_adj ovc oway1 pmig pnmo pnmo3d pp2psang
pp2psang2 pp2pstsic preconstkirch prestolt ptaupmo3 ptaupmo ptaupmoVTI
pveltran map2coh pveltranVTI pveltran3 pyramid radial radial2 radon
randrefl rays2 rays2a rays3 refer ricker ricker1 ricker2 rweab
rwesrmig rwezomig s2ofz s2ofz2 segyheader segyread segywrite shifts
shoot2 shot2cmp shotconstkirch shotholes shotprop sin slant srmva
srsyn sstep2 stolt stolt2 stoltstretch stretch tan2ang taupmo
time2depth tlagtoang2d tshift txpscan txpnmo velmod veltran voft vofz
vscan xlagtoang2d zoeppritz zomig zomva
'''

libsrc = 'segy'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
    alias = {'segyread': ['suread'],
             'segywrite': ['suwrite'],
             'stretch': map(lambda x: x+ 'stretch',
                            Split('log t2 t2cheb lmo nmo rad dat scale'))}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

dynlib = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[dynlib+'rsf'])

fftw = env.get('FFTW')
if fftw and not isinstance(fftw,bool):
        env.Prepend(LIBS=[fftw])

objects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

    if os.path.splitext(str(source))[0] in libsrc:
        objects.append(obj)
        includes.append(inc)

mains = Split(progs)

##############################################################################
# LIBRARY
##############################################################################
lib = env.StaticLibrary('rsfsegy',objects)
inc = env.Command('rsfsegy.h',includes,Action(bldutil.__merge))

env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        install = env.Install(bindir,main[0])

        if dynlib and env['PLATFORM'] == 'darwin':
             env.AddPostAction(install,
             'install_name_tool -change '
             'build/api/c/libdrsf.dylib '
             '%s/libdrsf.dylib %s' % (libdir,install[0]))

        if prog in alias.keys():
            for al in Split(alias[prog]):
                other = string.replace(str(main[0]),prog,al)
                env.InstallAs(os.path.join(bindir,other),main[0])
                doc = os.path.splitext(other)[0]
                docalias[doc] = 'sf'+prog

for prog in Split('cbanded ctridiagonal veltran'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfseismic.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)

    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
