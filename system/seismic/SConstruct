import os, sys, re, string, glob, types
sys.path.append('../..')
import configure

progs = '''
agmig ai2refl bin cascade c2r cell2 cell3 cgscan cmp2shot constfdmig2
cos2ang depth2time dimag dmo dsr dsr2 extract fincon finstack fkamo
fkdmo fourvc fourvc0 fourvc2 freqint freqlet gazdag halfint headerattr
headermath hwt2d hwtex imospray infill inmo inmo3 intbin isin2ang
itaupmo iwarp kirchinv kirchnew kirmod kirmod3 layer mig45 modrefl
modrefl2 modrefl3 mutter nmo pnmo pnmo3d pp2psang pp2psang2 pp2pstsic
preconstkirch prestolt ptaupmo pveltran radial radon randrefl rays2
rays2a rays3 refer ricker ricker1 rweab rwesrmig rwezomig s2ofz s2ofz2
segy2rsf segyheader segyread segywrite shoot2 shot2cmp shotconstkirch
shotholes shotprop sin slant srmva srsyn sstep2 stolt stolt2
stoltstretch stretch su2rsf tan2ang taupmo time2depth tlagtoang2d
tshift velmod veltran vscan voft vofz xlagtoang2d zoeppritz zomig
zomva
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
    alias = {'segyread': ['suread'],
             'segywrite': ['suwrite'],
             'stretch': map(lambda x: x+ 'stretch',
                            Split('log t2 t2cheb lmo nmo rad dat'))}
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

        if prog in alias.keys():
            for al in Split(alias[prog]):
                other = string.replace(str(main[0]),prog,al)
                env.InstallAs(os.path.join(bindir,other),main[0])

                if env['PLATFORM'] == 'cygwin':
                    other = string.replace(other,'.exe','')
                docalias[other] = 'sf'+prog

for prog in Split('cbanded ctridiagonal veltran'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfseismic.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)
