import os, sys, re, string, glob, types
sys.path.append('../..')
import configure

progs = '''
agc aliasp bandpass bin bin1 boxsmooth canny causint clip cmatmult
cosft costaper deriv dipfilter dwt enoint2 equal extract fern fft1
fft3 grad2 grad3 heat histogram igrad intshow inttest1 inttest2 impl1
impl2 impl3 jacobi jacobi2 lapfill linefit lpad mandelbrot matmult
max1 miss2 monof monof2 noise postfilter2 pow reg2tri remap1 roots
shapebin shapebin1 sharpen slice smooth smoothder smoothreg2 spectra
spectra2 spline splinefilter swtdenoise threshold trapez tri2reg
trirand unif2 unif3
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
    alias = {'pow':'tpow'}
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

src.remove('predicates.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

        if prog in alias.keys():
            other = string.replace(str(main[0]),prog,alias[prog])
            env.InstallAs(os.path.join(bindir,other),main[0])

            if env['PLATFORM'] == 'cygwin':
                other = string.replace(other,'.exe','')
            docalias[other] = 'sf'+prog

for prog in Split('gaussshape2 cmatmult'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfgeneric.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)



