import os, sys, re, string, types
sys.path.append('../../framework')
import bldutil

progs = '''
agc aliasp bandpass bin bin1 boxsmooth canny causint clip cmatmult
cmatmult2 cosft costaper deriv dipfilter dwt enoint2 equal extract
fern fft1 fft3 grad2 grad3 heat histogram igrad intshow inttest1
inttest2 impl1 impl2 impl3 jacobi jacobi2 lapfill laplac linear
linefit lpad mandelbrot matmult max1 miss2 monof monof2 mutter noise
polymask postfilter2 pow reg2tri remap1 roots shapebin shapebin1
sharpen slice smooth smoothder smoothreg2 spectra spectra2 spline
splinefilter swtdenoise threshold trapez tri2reg trishape trirand
unif2 unif3
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    alias = {'pow':'tpow'}
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')
src.remove(File('predicates.c'))

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

        if prog in alias.keys():
            other = string.replace(str(main[0]),prog,alias[prog])
            env.InstallAs(os.path.join(bindir,other),main[0])

            if env['PLATFORM'] == 'cygwin':
                other = string.replace(other,'.exe','')
            docalias[other] = 'sf'+prog

for prog in Split('gaussshape2 cmatmult'):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfgeneric.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs,alias=docalias)
    
    env.Install('../../framework/rsf',doc)
    env.Install(pkgdir,doc)
