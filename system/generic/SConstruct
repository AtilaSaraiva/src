import os, sys, re, string, glob, types
sys.path.append('../..')
import configure

progs = '''
agc bandpass bin1 causint clip cosft costaper deriv dwt fft1 fft3
igrad impl2 jacobi2 linefit noise pow remap1 roots slice smooth
smoothder spectra spectra2 spline threshold unif2 unif3
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
    alias = {'pow':'tpow'}
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

        if prog in alias.keys():
            other = string.replace(str(main[0]),prog,alias[prog])
            env.InstallAs(os.path.join(bindir,other),main[0])

            if env['PLATFORM'] == 'cygwin':
                other = string.replace(other,'.exe','')
            docalias[other] = 'sf'+prog
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfgeneric.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)



