# determine path to here, package name
import os
thispath = (os.popen('pwd').read()).strip('\n')
thisname = os.path.basename(thispath)

# import compiler variables, testflag
Import('vars', 'testflag')
#print 'thispath = '+thispath
#print 'thisname = '+thisname

# extract package dependencies from hclasspath file
deplist=[]
if os.path.exists(thispath+'/hclasspath'):
    f = open('./hclasspath','r')
    deplist = (f.read().strip('\n')).split(':')
    f.close()

#print ['deplist = ']+deplist

# extract nonstandard external header dependencies from hincpath file
extincs=[]
if os.path.exists(thispath+'/hincpath'):
    f = open('./hincpath','r')
    extincs=(f.read().strip('\n')).split(':')
    f.close()

# extract nonstandard external library dependencies from hlibpath file
extlibs=[]
if os.path.exists(thispath+'/hlibpath'):
    f = open('./hlibpath','r')
    extlibs=(f.read().strip('\n')).split(':')
    f.close()

#print ['extlibs = ']+extlibs

srclist=[]

# extract nonstandard source search path from hsrcpath file, if it exists,
# else set up standard search in src and/or lib if either/both exist
if os.path.exists(thispath+'/hsrcpath'):
    f = open('./hsrcpath','r')
    srclist = (f.read().strip('\n')).split(':')
    f.close()
else:
    if os.path.exists('./src'):
        srclist.append('src')
    if os.path.exists('./lib'):
        srclist.append('lib')

#print ['srclist = ']+srclist

cpplist = []
libdirlist = []
liblist = []

# start include list with this package
if os.path.exists(thispath+'/include'):
    cpplist.append(thispath+'/include')

# start library list with this package
if os.path.exists(thispath+'/lib'):
    libdirlist.append(thispath+'/lib')
    liblist.append('lib'+thisname+'.a')

# add other standard packages - headers in "include", library in "lib" with title
# = lib[basename of package].a 
for n in deplist:
    testpath=os.path.abspath(os.path.expandvars(n))
    testincl=testpath+'/include'
    if os.path.exists(testincl):
        cpplist.append(testincl)
    testlibdir=testpath+'/lib'
    testlib='lib'+os.path.basename(testpath)+'.a'
    #    print 'testing for '+testlibdir
    # only test for lib dir - lib may not yet be built! 
    if os.path.exists(testlibdir):
        liblist.append(testlib)
        libdirlist.append(testlibdir)

# add other possibly nonstandard sources of headers
# it is ALWAYS PRESUMED that header files live in final leaves
# of directory trees titled "include", so only path to parent dir
# should be included
for n in extincs:
    testpath=os.path.abspath(os.path.expandvars(n))
    testincl=testpath+'/include'
    if os.path.exists(testincl):
        cpplist.append(testincl)

# add other possibly nonstandard sources of libraries
# it CANNOT BE PRESUMED that library files live in any particular
# place, so full pathnames to external libraries must be given
for n in extlibs:
    libpath=os.path.abspath(os.path.expandvars(n))
    liblist.append(os.path.basename(libpath))
    libdirlist.append(os.path.dirname(libpath))

# finish with -lm - always!
liblist.append('-lm')

# test for lib - build library
if os.path.exists(thispath+'/lib'):
    # determine base name of library - same as package name
    libname = thisname
    # export environment and basename
    Export('vars', 'libname', 'cpplist', 'srclist', 'thispath')
    # build in lib
    SConscript('lib/SConscript')

#test for main - build executables 
if os.path.exists('main'):
    Export('vars', 'cpplist', 'liblist', 'thisname', 'libdirlist')
    SConscript('main/SConscript')

#test for test flag, test source directories - build executables, run tests 
if testflag == 'yes':
   if os.path.exists('testsrc'):
       Export('vars', 'cpplist','liblist','libdirlist')
       SConscript('testsrc/SConscript')
   if os.path.exists('test'):
       Export('vars', 'cpplist','liblist','libdirlist')
       SConscript('test/SConscript')






