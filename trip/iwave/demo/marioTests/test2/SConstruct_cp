#############################################################################
###################### COMMON DEFINITIONS - DO NOT ALTER ####################
#############################################################################
from rsf.proj import *
import os

# note that this choice makes rsf data produced here nonportable
WORKPATH        = '.'

#############################################################################
###################### END COMMON DEFINITIONS ###############################
#############################################################################

######################## LOCAL DEFINITIONS ##################################

######## abbreviations for commands used in flows - put these first, if
######## you use abbreviations. Note that Madagascar commands do not 
######## require abbreviations 
# Example:
#          CWPROOT         = os.getenv('CWPROOT')
#          ...
#          sunull          = os.path.join(CWPROOT,'bin/sunull')
CWPROOT         = os.getenv('CWPROOT')
sunull          = os.path.join(CWPROOT,'bin/sunull')
suconv          = os.path.join(CWPROOT,'bin/suconv')
suplane         = os.path.join(CWPROOT,'bin/suplane')
sutxtaper       = os.path.join(CWPROOT,'bin/sutxtaper')
sushw           = os.path.join(CWPROOT,'bin/sushw')
suchw           = os.path.join(CWPROOT,'bin/suchw')
sugain          = os.path.join(CWPROOT,'bin/sugain')
suwaveform      = os.path.join(CWPROOT,'bin/suwaveform')
supsimage       = os.path.join(CWPROOT,'bin/supsimage')
IWAVE           = os.path.join(os.getenv('RSFSRC'),'trip/iwave')
towed_array     = os.path.join(IWAVE,'trace/main/towed_array.x')
asg             = os.path.join(IWAVE,'asg/main/asg.x')
smoothmodel     = os.path.join(IWAVE,'demo/main/smoothmodel.x')

# half order of FD method
horder=2
# assumed min vel in medium (should be consitent with smoothmodel.cc)
CMIN=2000.0  # in m/s
CMAX=4000.0

# geometry parameters
fpeak=10.0              # peak/central frequency in Hz
nts=101.0               # axis length t (for source build)
xcent=250.0             # source center x
zcent=-250.0            # source center z
tcent=0.0               # source center t
lz=100.0                # source diam z
lx=100.0                # source diam x
gx_o=0               # starting x coor of receivers
gx_e=500             # ending x coor of receivers
gx_dx=20              # distance between receivers  
gelev=-40             # receiver depth

# computing dz and dx given peak frequency
# formula: wavelength = vel/fpeak
#          dx = meters/gridcell
#             = cycles/gridcell * meters/cycle
#             = 1/gpc * wavelength  
wavelength=CMIN/fpeak
GPC=10
gpc=2/horder*GPC
dfac=0.5

d1=wavelength/gpc # axis step depth for model
d2=wavelength/gpc # axis step horz. for model

dz=d1*dfac # axis step z for source build
dx=d2*dfac # axis step x for source build

nz=1+int(lz/dz)   # grid length z
nx=1+int(lx/dx)   # grid length x

# number of traces
ntr=int((gx_e-gx_o)/gx_dx)+1
T=.6                  # final time in seconds
dt=0.002              # axis step t
nt=int(T/dt)+1        # axis length t 

Flow('hdr.su', None,
     sunull + ' nt=' + str(nt) + ' ntr=' + str(ntr) + ' dt=' + str(dt) + ' | ' +
     sushw  + ' key=sx a=' + str(xcent) + ' c=0 j=' + str(ntr) + ' | ' +
     sushw  + ' key=gx a=' + str(gx_o) + ' b=' + str(gx_dx) + ' j=' + str(ntr) + ' | ' +
     sushw  + ' key=delrt a=0 | ' +
     sushw  + ' key=selev a=' + str(zcent) + ' | ' +
     sushw  + ' key=gelev a=' + str(gelev),
     stdin=0)

# create base wavelet (just time series, without source position
# information) via suwaveform
Flow('source_base.su', None,
     suwaveform + ' type=ricker1 fpeak=' + str(fpeak) + ' dt=' + str(dt) + ' > rick.su; ' + 
     suplane    + ' npl=1 nt=' + str(nts) + ' dt=' + str(dt) 
                + ' ntr=' + str(nz*nx) + ' len1=' + str(lz*lx) + '|' +
     sushw      + ' key=gelev a=' + str(-lz/2) + ' c=' + str(dz) + ' b=0 j=' + str(nz) +' | ' +
     sushw      + ' key=gx    a=' + str(-lx/2) + ' b=' + str(dx) + ' c=0 j=' + str(nz) +' | ' +
     suconv     + ' sufile=rick.su | ' +
     sutxtaper  + ' taper=3 key=gelev min=0 max=0 dx=' + str(lz/2) + ' | ' + 
     sutxtaper  + ' taper=3 key=gx min=0 max=0 dx=' + str(lx/2),
     stdin=0)

# add source coordinates from hdrfile to source AND receiver 
# coordinates from wavelet to create "dressed" wavelet for array
# source option in iwave. Note that iwave reads a source GATHER by
# detecting new source coordinates (sx, sy, selev) but assigns source
# trace GRID POSITIONS in the array by receiver coordinates (gx, gy, 
# gelev). The towed array app sets these coordinates up so that each 
# shot may have an array of sources, with the source traces in the 
# same position relative to the data source coordinates - hence 
# "towed_array".

Flow('source.su',['source_base.su', 'hdr.su'],
     towed_array + 
     '''
     data=${SOURCES[1]} 
     src=${SOURCES[0]} 
     towed=${TARGETS[0]}
     ''',
     stdin=0, stdout=0)


# build model
choose_vel=0
choose_den=2
model=1 #linear depth vel. profile model
o1=0    #depth
e1=500
n1=int((e1-o1)/d1)+1
o2=0    #horizontal
e2=500
n2=int((e2-o2)/d2)+1

vel_file='vel2.rsf'
den_file='den2.rsf'


#build_vel =  smoothmodel + ' model= ' + str(model) + ' choose=' + str(choose_vel)
#build_vel = build_vel + ' o1=' + str(o1) + ' e1=' + str(e1) + ' d1=' + str(d1)
#build_vel = build_vel + ' o2=' + str(o2) + ' e2=' + str(e2) + ' d2=' + str(d2)
#build_vel = build_vel + ' hfile=' + vel_file
#print build_vel
#os.system(build_vel)

#build_den =  smoothmodel + ' model= ' + str(model) + ' choose=' + str(choose_den)
#build_den = build_den + ' o1=' + str(o1) + ' e1=' + str(e1) + ' d1=' + str(d1)
#build_den = build_den + ' o2=' + str(o2) + ' e2=' + str(e2) + ' d2=' + str(d2)
#build_den = build_den + ' hfile=' + den_file
#print build_den
#os.system(build_den)

Flow('vel2',None,
     smoothmodel + ' model= ' + str(model) + ' choose=' + str(choose_vel) + 
                   ' o1=' + str(o1) + ' n1=' + str(n1) + ' d1=' + str(d1) +
                   ' o2=' + str(o2) + ' n2=' + str(n2) + ' d2=' + str(d2) +
                   ' hfile=' + vel_file,
     stdin=0, stdout=0)
# 'sfput id1=0 id2=1 dim=2 gdim=2' )

Flow('den2',None,
     smoothmodel + ' model= ' + str(model) + ' choose=' + str(choose_den) +
                   ' o1=' + str(o1) + ' n1=' + str(n1) + ' d1=' + str(d1) +
                   ' o2=' + str(o2) + ' n2=' + str(n2) + ' d2=' + str(d2) +
                   ' hfile=' + den_file,
     stdin=0, stdout=0)
# 'sfput id1=0 id2=1 dim=2 gdim=2' )

# trace-src output file
t=Flow(['output.su'],['source.su', 'hdr.su', 'vel2.rsf', 'den2.rsf'],
	asg  + ' order=2 cfl=0.75 cmin=1.0 cmax=4.5 dmin=0.5 dmax=3.0 fpeak=0.010 ' + 
	'srctype=array source=./source.su sampord=1 hdrfile=./hdr.su datafile=./output.su ' +
        'velocity=./vel2.rsf density=./den2.rsf ' +
        'dump_lda=1 dump_ldc=1 dump_term=1' +
        'nl1=.5 nr1=.5 nl2=.5 nr2=.5',
	stdin=0, stdout=0)
         
Result('output','output.su', 'suread endian=0 read=data < $SOURCE | put label1=Time label2=Distance d2=' + str(gx_dx) + ' o2=' + str(gx_o) + ' unit1=s unit2=km title="Ta-da!" label=Pressure unit=GPa |sfgrey')

End()

