config.py:CCFLAGS = '-O3 -xSSE4.2 -check-uninit -falign-functions=16 -restrict -vec-report3 -opt-report 3 -opt-report-phase=hlo -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE -DIWAVE_USE_MPI -DMPICH_IGNORE_CXX_SEEK'
config.py:##CCFLAGS = '-O3 -check-uninit -check-uninit -std=c99 -falign-functions=16 -vec-report1 -ftz -fp-stack-check -DIWAVE_USE_MPI -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE -parallel'
config.py:#CCFLAGS = '-O3 -check-uninit -std=c99 -falign-functions=16 -vec-report1 -ftz -fp-stack-check -DIWAVE_USE_MPI -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE -parallel'
config.py:CFLAGS = '-std=c99'
config.py:LINKFLAGS = '-parallel'
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
doc/Doxyfile:#---------------------------------------------------------------------------
include/doc_alternate.h:Movie output - uses IWAVE movie output facility, see <a
include/doc_alternate.h:<li>add "movie[n]=[code]" lines to par file to specify field(s) to be sampled. Legit codes for ASG model: p (pressure), v1, v2, v3 (components of velocity, in the internal axis ordering, i.e. v1=z-component, v2=x-component, v3=y-component. Any other code will be ignored. Thus for example
include/doc_alternate.h:will produce two movies, one of pressure, one of the y-component of velocity.</li>
include/doc_alternate.h:<li>add "moviestep=[real]" line to par file to specify time step between movie frames, in units of ms. Thus to sample ten frames per second, include "moviestep=100.0". Default = DEFSTEP*dt, where dt is the <i>internal</i> time step of the simulartor, and DEFSTEP is defined in <a href="../../../sample/include/movie.h">sample/include/movie.h</a> (so this default is not very useful, since it depends on dt which one doesn't know a priori - better to specify moviestep).</li>
include/doc_alternate.h:<li>only 2D movies are produced. Therefore no 1D movies at all, and only a single plane may be sampled in the 3D case. The sampling plane is perpindicular to one of the coordinate axes; which axis it's perp to is the value of the "movieaxis3d=[int]", legit values 0,1,2, default = 2 (this choice refers to IWAVE's internal axis ordering, so in the standard (z,x,y) ordering it's the (z,x) plane, but in the other common ordering (x,y,z) it's the (x,y) plane - depends on the x-axis, y-axis, and z-axis keyword settings, see <a href="../../../grid/doc/html/index.html">IWAVE Grid i/o package docs</a>).</li>
include/doc_alternate.h:Notes: axis information supplied mostly for test purposes - since the material 
include/doc_alternate.h:one-half grid cell along each axis. The option is provided mostly for test purposes:
include/doc_alternate.h:case. The pulse produced in 2D is the 3/2-derivative of a Gaussian, rather
include/doc_alternate.h:Array sources may be used to simulation incident plane waves or other extended source effects, or multipole near-point sources with nontrivial radiation patterns.
include/esg_selfdoc.h:" pressure-velocity form of acoustodynamics. Either pressure-free",
include/esg_selfdoc.h:"     datafile = [string] - name of (existing) SU (SEGY) trace - headers",
include/esg_selfdoc.h:"       velocity = [string] - RSF header file for sound (p-) velocity, ",
include/esg_selfdoc.h:"       density  = [string] or rho = [string] [Default: homogeneous, 1000 kg/m^3] - ",
include/esg_selfdoc.h:"           RSF header file for material density - if this keyword omitted, ",
include/esg_selfdoc.h:"     either 0 (greatest-integer sampling) or 1 (multilinear sampling)",
include/esg_selfdoc.h:"       [Defaults = 24, 24] - time and space orders for physical, PML domains.",
include/esg_selfdoc.h:"       k_phys, k_npml = [int], [int] - half-orders in space for (2,2k) schemes",
include/esg_selfdoc.h:"         npml_ampl = [float], [Default = 10.3616], - damping factor in",
include/esg_selfdoc.h:"         nl3,nr3 = [float], [float] [Defaults = 0.0, 0.0], for axis 3 - ",
include/esg_selfdoc.h:"        mpi_np3   = [int] [Default = 1].-",
include/esg_selfdoc.h:"       omp_nt    = [int] [Default = 1] number of OpenMP threads - significant ",
include/esg_selfdoc.h:"     Dump Flags - switch verbose output, written to cout[rank] in working directory ",
include/esg_selfdoc.h:"       dump_pi   = [int] [Default = 0] - dump parallel/dom decomp info",
include/esg_selfdoc.h:"       dump_lda  = [int] [Default = 0] - dump grid data for allocated arrays, including ",
include/esg_selfdoc.h:"       dump_ldc  = [int] [Default = 0] - dump grid data for arrays updated in this process ",
include/esg_selfdoc.h:"       dump_lds  = [int] [Default = 0] - dump grid data for send arrays",
include/esg_selfdoc.h:"       dump_ldr  = [int] [Default = 0] - dump grid data for receive arrays",
include/esg_selfdoc.h:"       dump_term = [int] [Default = 0] - dump trace sampling data",
include/esg_selfdoc.h:"       printact  = [int] [Default = 0] - timestep action output: 0 - no output, ",
include/esg_selfdoc.h:"                   1 - timestep number, 2 - detailed actions within timestep.",
include/esg_selfdoc.h:" Notes: axis information supplied mostly for test purposes - since the material ",
include/esg_selfdoc.h:" one-half grid cell along each axis. The option is provided mostly for test purposes:",
include/esg_selfdoc.h:" case. The pulse produced in 2D is the 3/2-derivative of a Gaussian, rather",
include/esg_selfdoc.h:"  internal simulator time stepping AND output traces - i.e.",
include/esg_selfdoc.h:"  is entirely up to the user - caveat emptor! ",
include/esg_selfdoc.h:" regular expression syntax - in particular, key or value strings with",
include/esg_selfdoc.h:" and both distributed (MPI) and thread-based (OpenMP) parallelism. For",
include/esg_selfdoc.h:" each coordinate axis. The grids are divided as evenly as possible into subgrids -",
include/esg_selfdoc.h:" for instance, between PML and non-PML subgrids. Can only be > 1 in ",
include/esg_selfdoc.h:" 4. Internal units - chosen to conform to unit choices made, explicitly",
include/esg_selfdoc.h:" O(1.e+3 - 1.e+4) MPa, densities = O(1.e+3) kg/m^3. ",
include/esg_selfdoc.h:" 'scale=-3' to the RSF header file for velocity, so that the data is",
include/esg_selfdoc.h:" named \"cout[rk].txt\" in the working directory, where [rk] is a fixed-width ",
include/esg_selfdoc.h:" half-step in each coordinate direction. The spatial dimension of the",
include/esg_selfdoc.h:" in z>0, and the source or receiver z-coordinate is less than the",
include/esg_selfdoc.h:" now well-known that for this type of scheme, the CFL condition is not",
include/esg_selfdoc.h:" pp.  272-293 derived a necessary and sufficient stability condition,",
include/esg_selfdoc.h:" - in that case, as we said, caveat emptor!   ",
include/esg_selfdoc.h:" half-orders k_phys, k_npml must also be specified. NOTE: in release 1.0",
include/esg_selfdoc.h:" (November 2009), the 2D 210 scheme is not functional - calling it will",
include/esg_selfdoc.h:" velocity used to compute simulation time step via CFL-type stability",
include/esg_selfdoc.h:" (2-2 through 2-12, 1-3D).  More conservative choices may result in",
include/doc_typical.h:    <li> datafile = [string] - filename for SU/SEGY trace output, name of
include/doc_typical.h:      <li>lambda   = [string] - name of RSF header file for Lame's first parameter </li>
include/doc_typical.h:      <li>mu       = [string] - name of RSF header file for Lame's second parameter or shear modulus </li>
include/doc_typical.h:      <li>density  = [string] or rho = [string] [Default: homogeneous, 1000 kg/m^3] - 
include/doc_typical.h:          name of RSF header file for material density - if this keyword omitted, 
include/doc_typical.h:    then all normal stresses grid x-coordinates must be multiples of 10.
include/doc_typical.h:    Note: p-wave velocity, s-wave velocity, lambda or mu RSF data structure 
include/doc_typical.h:    are obtained by shifting this grid by a half-step in each coordinate 
include/doc_typical.h:    shifting this primal grid by a half-step in two corresponding coordinate 
include/doc_typical.h:    the p-wave velocity, s-wave velocity, lambda or mu
include/doc_typical.h:      (greatest-integer sampling), 1 (multilinear sampling)
include/doc_typical.h:    inside (i.e. with greater normal coordinate) of a zero-pressure
include/doc_typical.h:    domain is in z>0, and the source or receiver z-coordinate is less
include/doc_typical.h:        sampord (see above - either chop or linear): 
include/doc_typical.h:      cmax = [float] [Default = CMAX_DEF - see esg/include/defaults.h ] 
include/doc_typical.h:      cmin = [float] [Default = CMIN_DEF - see esg/include/defaults.h ] 
include/doc_typical.h:      in Gustafsson and Wahlund, SIAM J. Sci. Comp. 26 (2004), pp. 272-293. 
include/doc_typical.h:      in the currently implemented family (2-2 through 2-12, 1-3D). More 
include/doc_typical.h:      [Defaults = 24] - encodes time and space orders,within families
include/doc_typical.h:        npml_ampl = [float], [Default = 10.3616], - damping factor in
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/typical.par:          nl1 = 0.0         z - neg
include/typical.par:          nr1 = 0.5         z - pos
include/typical.par:          nl2 = 0.5         x - neg
include/typical.par:          nr2 = 0.5         x - pos
include/typical.par:------------------------------------------------------------------------
include/typical.par:------------------------------------------------------------------------
include/doc_asgnotes.h:pp.  272-293 derived a necessary and sufficient stability condition. 
include/doc_asgnotes.h:<li>[Default] Use a prescribed fraction of the the maximum stable time step, computed from the Gustaffson criterion. This option is <i>adaptive</i>: it depends on the actual velocity and density (or equivalent) fields input to the simulation. The max stable step for the (2,2) scheme is scaled by a <i>CFL fraction</i> less than 1, to accommodate the stricter stability limits of higher-order schemes. 
include/doc_asgnotes.h:The default value of this CFL fraction (CFL_DEF, given in asg/include/defaults.h) is small enough to produce a stable step for all schemes implemented in IWAVE/asg. The user may optionally input a CFL fraction (parameter cfl), which must be less than or equal to CFL_DEF. Since higher order schemes have better dispersion characteristics with time steps well below the stability limit, specifying cfl to be well below CFL_DEF is usually a good idea. We have found that cfl=0.4 or cfl=0.5 give reasonably non-dispersive results for FD orders up to 10, for propagation distances of 50-100 wavelengths. </li>
include/doc_asgnotes.h:This option is static (non-adaptive) and implicitly defines a feasible set of models on a family of spatial grids for which the chosen time-space step relation is stable. The step is checked against the Gustaffson step for the default CFL fraction, and rejected (runtime error) if it exceeds this maximum stable step. IWAVE provides this second option to enable simple accuracy tests for inversion applications based on IWAVE, with uniform time step over a class of models. For simulation using the IWAVE package itself, the first option is usually more efficient.
include/doc_asgnotes.h:It is also possible to specify the total number of time steps, <i>provided</i> that dt has been set as just described (otherwise - an error!). To add this specification,
include/doc_asgnotes.h:If only dt is defined as described here, then nt is computed as in other use cases to approximate the time duration of the target traces - it is then substituted for the number of samples (SEGY keyword ns), as interpolation makes no sense in this case.
include/doc_asgnotes.h: internal simulator time stepping <i>and</i> output traces - i.e.
include/doc_asgnotes.h:   either dt, or both nt and dt,  must be set - setting nt alone, without dt, is prohibitied. This option is 
include/doc_asgnotes.h: is entirely up to the user - caveat emptor! 
include/undoc:  <li>makemovie    = <int> [Default: 0] - movie flag; 0 - no movie output, 1 - make movies</li>
include/undoc:  <li>movieaxis3D  = <int>   - 2D slice orthogonal to this axis is stored</li>
include/undoc:  <li>movieslice3D = <int>   - index of the 2D slice along movieaxis3D to store</li>
include/undoc:  <li>moviestep    = <float> - time interval at which movie frames are stored</li>
include/doc.h:stress-velocity form of elastic dynamics. Either pressure-free
include/doc.h:such as MPI-enabled invocation using mpirun or mpiexec, with
include/pointsrc.h:  RPNT    rs;             	/* source in-cell offsets */
include/esgn_indices.h:  Author: XW 01-19-2011
include/esgn_indices.h:/*----------------------------------------------------------------------------*/
include/esgn_indices.h:/*----------------------------------------------------------------------------*/
include/esgn_indices.h:Indices of arrays - isotropic elastic.
include/esgn_indices.h:D_P0  :  pressure or normal stress component along axis-0 direction.
include/esgn_indices.h:D_S0  :  shear stress component in axis-0, axis-1 plane
include/esgn_indices.h:/*----------------------------------------------------------------------------*/
include/esgn_indices.h:D_E_PRIME :  PML coefficient for prime grids (z-axis, x-axis, y-axis)
include/esgn_indices.h:D_E_DUAL  :  PML coefficient for dual grids  (z-axis, x-axis, y-axis)
include/esgn_indices.h:All pressure arrays must have same global coordinates - P0 is used to get
include/esgn_indices.h:/*----------------------------------------------------------------------------*/
include/esgn_indices.h:static const IPNT D_MP = {D_MP00, D_MP01, -1};
include/esgn_indices.h:static const IPNT D_S  = {D_S0 , D_S1 }; //MB replace with: {D_S0,-1}?
include/esgn_indices.h:/*----------------------------------------------------------------------------*/
include/defaults.h:/** m, ms, g (and g/cm^3 for density) - this is one unit 
include/esgn.h:  Author: XW 01-19-2011
include/esgn.h: * Staggered-grid finite difference solver for isotropic elastic wave equations 
include/esgn.h: * in grid/include/gridio.h <- "this is fixed" </p>
include/esgn.h: * - D_P0  : pressure or normal stress component along axis-0 direction
include/esgn.h: * - D_V0  : velocity
include/esgn.h: * - D_S0  : shear stress component in axis-0, axis-1 plane
include/esgn.h: * - D_MPij: pressure or normal stress multiplier (e.g., bulk modulus or Lame parameters)
include/esgn.h: * - D_MSij : shear stress component multiplier (e.g.,Lame second parameter)
include/esgn.h: * - D_MVx : velocity multiplier  (buoyancy)
include/esgn.h: *         sxz--------------vz        | 
include/esgn.h: *          vx--------------px (py, pz)
include/esgn.h: *    (i-1/2,j,k)        (i,j,k)
include/esgn.h:/*----------------------------------------------------------------------------
include/esgn.h: *----------------------------------------------------------------------------
include/esgn.h: * e.g., region I and III are overlaped at the upper-left corner for no special 
include/esgn.h:                       memory allocated in esg_readschemeinfo -> fd_mread -> iwave_static_init 
include/esgn.h:/* function declarations defined in esgn_model.c - assigned to FD_MODEL pointers */
include/smooth_pointsrc.h:      -\nabla \phi(r) \cdot v0(r,t)
include/smooth_pointsrc.h:      -\nabla \phi(r) p0(r,t),
include/smooth_pointsrc.h:      phi'(r) = - 2 * phipeak^2 * pi^2 * (r - rad) * exp(-phipeak^2 * pi^2 * (r - rad)^2 );
include/smooth_pointsrc.h:	int tmpflag;         /* 3 - option I(a), 2 - option I(b), 1 - option II (Ricker) */
include/archive/timesteps.h:/*----------------------------------------------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------------------------------------------*/
include/archive/timesteps.h:modified to keep original interface 19.06.09 - WWS
include/archive/timesteps.h:- change name to gts instead of ts
include/archive/timesteps.h:- define ts by calling gts
include/archive/timesteps.h:/*----------------------------------------------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------------------------------------------*/
include/archive/timesteps.h:Time step functions - linpre timestep
include/archive/timesteps.h:Auxilary functions - linpre timestep.
include/archive/timesteps.h:/*----------------------------------------*/
include/archive/timesteps.h:/*----------------------------------------*/
include/gauss.h:    single precision round-off error (i.e. O(10^7)). Scaled to unit
include/gauss.h:    single precision round-off error (i.e. O(10^7)). Scaled so that
include/gauss.h:    single precision round-off error (i.e. O(10^7)). Scaled so that
include/gauss.h:/** returns value of gaussian at a point, scaled by -(2 pi^2 fpeak^2)^-1 */
include/gauss.h:/** returns value of gaussian derivative at a point scaled by -(2 pi^2 fpeak^2)^-1  */
include/gauss.h:/** returns value of gaussian 2ndderivative at a point scaled by -(2 pi^2 fpeak^2)^-1 - same as normalized Ricker */
include/esgn_indices.h~:  Author: XW 01-19-2011
include/esgn_indices.h~:/*----------------------------------------------------------------------------*/
include/esgn_indices.h~:/*----------------------------------------------------------------------------*/
include/esgn_indices.h~:Indices of arrays - isotropic elastic.
include/esgn_indices.h~:D_P0  :  pressure or normal stress component along axis-0 direction.
include/esgn_indices.h~:D_S0  :  shear stress component in axis-0, axis-1 plane
include/esgn_indices.h~:/*----------------------------------------------------------------------------*/
include/esgn_indices.h~:D_E_PRIME :  PML coefficient for prime grids (z-axis, x-axis, y-axis)
include/esgn_indices.h~:D_E_DUAL  :  PML coefficient for dual grids  (z-axis, x-axis, y-axis)
include/esgn_indices.h~:All pressure arrays must have same global coordinates - P0 is used to get
include/esgn_indices.h~:/*----------------------------------------------------------------------------*/
include/esgn_indices.h~:static const IPNT D_MP = {D_MP00, D_MP01, -1};
include/esgn_indices.h~:static const IPNT D_S  = {D_S0 , D_S1 }; //MB replace with: {D_S0,-1}
include/esgn_indices.h~:/*----------------------------------------------------------------------------*/
include/esgn.h~:  Author: XW 01-19-2011
include/esgn.h~: * Staggered-grid finite difference solver for isotropic elastic wave equations 
include/esgn.h~: * in grid/include/gridio.h <- "this is fixed" </p>
include/esgn.h~: * - D_P0  : pressure or normal stress component along axis-0 direction
include/esgn.h~: * - D_V0  : velocity
include/esgn.h~: * - D_S0  : shear stress component in axis-0, axis-1 plane
include/esgn.h~: * - D_MPij: pressure or normal stress multiplier (e.g., bulk modulus or Lame parameters)
include/esgn.h~: * - D_MSij : shear stress component multiplier (e.g.,Lame second parameter)
include/esgn.h~: * - D_MVx : velocity multiplier  (buoyancy)
include/esgn.h~: *         sxz--------------vz        | 
include/esgn.h~: *          vx--------------px (py, pz)
include/esgn.h~: *    (i-1/2,j,k)        (i,j,k)
include/esgn.h~:/*----------------------------------------------------------------------------
include/esgn.h~: *----------------------------------------------------------------------------
include/esgn.h~: * e.g., region I and III are overlaped at the upper-left corner for no special 
include/esgn.h~:                       memory allocated in esg_readschemeinfo -> fd_mread -> iwave_static_init 
include/esgn.h~:/* function declarations defined in esgn_model.c - assigned to FD_MODEL pointers */
include/#esgn.h#:  Author: XW 01-19-2011
include/#esgn.h#: * Staggered-grid finite difference solver for isotropic elastic wave equations 
include/#esgn.h#: * in grid/include/gridio.h <- "this is fixed" </p>
include/#esgn.h#: * - D_P0  : pressure or normal stress component along axis-0 direction
include/#esgn.h#: * - D_V0  : velocity
include/#esgn.h#: * - D_S0  : shear stress component in axis-0, axis-1 plane
include/#esgn.h#: * - D_MPij: pressure or normal stress multiplier (e.g., bulk modulus or Lame parameters)
include/#esgn.h#: * - D_MSij : shear stress component multiplier (e.g.,Lame second parameter)
include/#esgn.h#: * - D_MVx : velocity multiplier  (buoyancy)
include/#esgn.h#: *         sxz--------------vz        | 
include/#esgn.h#: *          vx--------------px (py, pz)
include/#esgn.h#: *    (i-1/2,j,k)        (i,j,k)
include/#esgn.h#:/*----------------------------------------------------------------------------
include/#esgn.h#: *----------------------------------------------------------------------------
include/#esgn.h#: * e.g., region I and III are overlaped at the upper-left corner for no special 
include/#esgn.h#:                       memory allocated in esg_readschemeinfo -> fd_mread -> iwave_static_init 
include/esg_multi_sampler.h:/** ESG multi-sampler package. */
include/esg_multi_sampler.h:/** ESG pre-constructor */
include/esg_multi_sampler.h~:/** ESG multi-sampler package. */
include/esg_multi_sampler.h~:/** ESG pre-constructor */
include/ansol_esgn.h:	float alpha; //p-velocity
include/ansol_esgn.h:	float beta;  //s-velocity
include/ansol_esgn.h~:	float alpha; //p-velocity
include/ansol_esgn.h~:	float beta;  //s-velocity
include/ansol_esg_multi_sampler.h:/** ANSOL_ESG multi-sampler package. */
include/ansol_esg_multi_sampler.h:/** multi-sampler pre-constructor */
include/pointsrc.h~:  RPNT    rs;             	/* source in-cell offsets */
is:lib/pointsrc.c:	tr->srcin_flag = 0;
is:lib/pointsrc.c:		tr->srcin_flag = 1;
is:lib/pointsrc.c:	IASN(tr->is,IPNT_0);
is:lib/pointsrc.c:	RASN(tr->rs,RPNT_0);
is:lib/pointsrc.c:	tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
is:lib/pointsrc.c:	if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
is:lib/pointsrc.c:	if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
is:lib/pointsrc.c:	tr->order = 0;
is:lib/pointsrc.c:	ps_ffint(*par, "sampord", &(tr->order));
is:lib/pointsrc.c:	tr->fpsrc = NULL;
is:lib/pointsrc.c:	tr->fpdbg = NULL;
is:lib/pointsrc.c:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c:		tis[i] = tr->is[i];
is:lib/pointsrc.c:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c:	RASN( tr->src_d, RPNT_0);
is:lib/pointsrc.c:	if (tr->srcin_flag) {
is:lib/pointsrc.c:		tr->src_d[0] = REAL_ONE;
is:lib/pointsrc.c:		if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
is:lib/pointsrc.c:		if (fseek(tr->fpsrc,0L,SEEK_SET)) {
is:lib/pointsrc.c:		if (!fgettr(tr->fpsrc, &trsrc)) {
is:lib/pointsrc.c:		iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c:		tr->istart = (int)(tmpt0/((m->tsind).dt));
is:lib/pointsrc.c:		t0 = (m->tsind).dt * tr->istart;
is:lib/pointsrc.c:		/*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
is:lib/pointsrc.c:		tr->n = (int)(tmax/((m->tsind).dt)) + 1;
is:lib/pointsrc.c:		tr->w = (ireal *)usermalloc_(sizeof(ireal)*(tr->n));
is:lib/pointsrc.c:		lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
is:lib/pointsrc.c:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
is:lib/pointsrc.c:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
is:lib/pointsrc.c:		if (tr->srcin_flag) {
is:lib/pointsrc.c:			tr->w = getrick( &iw, (m->tsind).dt, fpeak );
is:lib/pointsrc.c:			tr->n = 2 * iw+1;
is:lib/pointsrc.c:			tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
is:lib/pointsrc.c:			tr->n = 2 * iw+1;
is:lib/pointsrc.c:		tr->istart = -iw;
is:lib/pointsrc.c:				tr->istart = -iw;
is:lib/pointsrc.c:				tr->istart = 0;
is:lib/pointsrc.c:/*			else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;*/
is:lib/pointsrc.c:		tr->idbg = 0;
is:lib/pointsrc.c:		ps_ffint(*par, "dump_wavelet", &(tr->idbg));
is:lib/pointsrc.c:		if (tr->idbg) {
is:lib/pointsrc.c:			memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
is:lib/pointsrc.c:			val.h=tr->n;
is:lib/pointsrc.c:			val.h=((m->tsind).dt)*tr->istart;
is:lib/pointsrc.c:			if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
is:lib/pointsrc.c:			fputtr(tr->fpdbg,&trdbg);
is:lib/pointsrc.c:			fflush(tr->fpdbg);
is:lib/pointsrc.c:			iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c:		if (tr->srcin_flag){
is:lib/pointsrc.c:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:				tr->scramp = refbou * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:				tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:		if (tr->srcin_flag){
is:lib/pointsrc.c:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c:  	if (tr->w) userfree_(&(tr->w)); 
is:lib/pointsrc.c:  	if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c:  	if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c:	fprintf(stderr,"     evaluating source for iv = %d, it = %d, and istart = %d\n",(m->tsind).iv,(m->tsind).it,tr->istart);
is:lib/pointsrc.c:	if (tr->srcin_flag){
is:lib/pointsrc.c://		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 1 ) ){
is:lib/pointsrc.c:		if ( ((m->tsind).it >= tr->istart) &&
is:lib/pointsrc.c:		     ((m->tsind).it <  tr->istart + tr->n) && 
is:lib/pointsrc.c:      				pointsource( tr->is,
is:lib/pointsrc.c:		  		             tr->rs,
is:lib/pointsrc.c:		  		             tr->order,
is:lib/pointsrc.c:		  		             tr->scramp,
is:lib/pointsrc.c:		  		             tr->src_d[i] * (tr->w)[ (m->tsind).it - tr->istart ],
is:lib/pointsrc.c:// 		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 0 ) ){
is:lib/pointsrc.c:		if ( ((m->tsind).it >= tr->istart) &&
is:lib/pointsrc.c:		     ((m->tsind).it <  tr->istart + tr->n) && 
is:lib/pointsrc.c:      				pointsource( tr->is,
is:lib/pointsrc.c:		  		             tr->rs,
is:lib/pointsrc.c:		  		             tr->order,
is:lib/pointsrc.c:		  		             tr->scramp,
is:lib/pointsrc.c:		  		             (tr->w)[ (m->tsind).it - tr->istart ],
is:lib/pointsrc.c:	fprintf(fp,"srcin_flag   = %d\n",tr->srcin_flag);
is:lib/pointsrc.c:	fprintf(fp,"pulse length = %d\n",tr->n);
is:lib/pointsrc.c:  	fprintf(fp,"istart       = %d\n",tr->istart);
is:lib/pointsrc.c:  	fprintf(fp,"order        = %d\n",tr->order);
is:lib/pointsrc.c:	fprintf(fp,"scramp       = %e\n",tr->scramp);
is:lib/pointsrc.c:      		fprintf(fp,"is[%d]=%d rs[%d]=%e src_d[%d]=%e\n", i, tr->is[i], i, tr->rs[i],i,tr->src_d[i]);
is:lib/pointsrc.c.bak:  IASN(tr->is,IPNT_0);
is:lib/pointsrc.c.bak:  RASN(tr->rs,RPNT_0);
is:lib/pointsrc.c.bak:  tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
is:lib/pointsrc.c.bak:  if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
is:lib/pointsrc.c.bak:  if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
is:lib/pointsrc.c.bak:  tr->order = 0;
is:lib/pointsrc.c.bak:  ps_ffint(*par, "sampord", &(tr->order));
is:lib/pointsrc.c.bak:  tr->fpsrc = NULL;
is:lib/pointsrc.c.bak:  tr->fpdbg = NULL;
is:lib/pointsrc.c.bak:    if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c.bak:    if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c.bak:    tis[i] = tr->is[i];
is:lib/pointsrc.c.bak:    if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c.bak:    if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c.bak:    tr->scramp =  4.0 * 3.1415927 * refvel * refvel * 
is:lib/pointsrc.c.bak:    tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c.bak:    if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
is:lib/pointsrc.c.bak:    if (fseek(tr->fpsrc,0L,SEEK_SET)) {
is:lib/pointsrc.c.bak:    if (!fgettr(tr->fpsrc, &trsrc)) {
is:lib/pointsrc.c.bak:    iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c.bak:    tr->istart = (int)(tmpt0/((m->tsind).dt));
is:lib/pointsrc.c.bak:    t0 = (m->tsind).dt * tr->istart;
is:lib/pointsrc.c.bak:    /*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
is:lib/pointsrc.c.bak:    tr->n = (int)(tmax/((m->tsind).dt)) + 1 - tr->istart;
is:lib/pointsrc.c.bak:    tr->w = (ireal *)malloc(sizeof(ireal)*(tr->n));
is:lib/pointsrc.c.bak:    lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
is:lib/pointsrc.c.bak:      if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
is:lib/pointsrc.c.bak:      if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
is:lib/pointsrc.c.bak:    tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
is:lib/pointsrc.c.bak:    tr->n = 2 * iw+1;
is:lib/pointsrc.c.bak:    tr->istart = -iw;
is:lib/pointsrc.c.bak:      if (!strcmp(wp,"zerophase")) tr->istart=-iw;
is:lib/pointsrc.c.bak:      else if (!strcmp(wp,"causal")) tr->istart=0;
is:lib/pointsrc.c.bak:      else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;
is:lib/pointsrc.c.bak:  tr->idbg = 0;
is:lib/pointsrc.c.bak:  ps_ffint(*par, "dump_wavelet", &(tr->idbg));
is:lib/pointsrc.c.bak:  if (tr->idbg) {
is:lib/pointsrc.c.bak:    memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
is:lib/pointsrc.c.bak:    val.h=tr->n;
is:lib/pointsrc.c.bak:    val.h=((m->tsind).dt)*tr->istart;
is:lib/pointsrc.c.bak:    if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
is:lib/pointsrc.c.bak:    fputtr(tr->fpdbg,&trdbg);
is:lib/pointsrc.c.bak:    fflush(tr->fpdbg);
is:lib/pointsrc.c.bak:    iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c.bak:  if (tr->w)       free(tr->w); 
is:lib/pointsrc.c.bak:  if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c.bak:  if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c.bak:  if ( ((m->tsind).it >= tr->istart) && 
is:lib/pointsrc.c.bak:       ((m->tsind).it < tr->istart + tr->n) &&
is:lib/pointsrc.c.bak:      pointsource(tr->is,
is:lib/pointsrc.c.bak:		  tr->rs,
is:lib/pointsrc.c.bak:		  tr->order,
is:lib/pointsrc.c.bak:		  tr->scramp,
is:lib/pointsrc.c.bak:		  (tr->w)[(m->tsind).it-tr->istart],
is:lib/pointsrc.c.bak:  fprintf(fp,"pulse length = %d\n",tr->n);
is:lib/pointsrc.c.bak:  fprintf(fp,"istart       = %d\n",tr->istart);
is:lib/pointsrc.c.bak:  fprintf(fp,"order        = %d\n",tr->order);
is:lib/pointsrc.c.bak:      fprintf(fp,"is[%d]=%d rs[%d]=%e\n", i, tr->is[i], i, tr->rs[i]);
is:lib/smooth_pointsrc.c:		x = x * d[i] - tr->xs[i];
is:lib/smooth_pointsrc.c:  if (r < tr->rad)  return 0.0;
is:lib/smooth_pointsrc.c:  gradphi = -compdgauss(r - tr->rad,  tr->phipeak )
is:lib/smooth_pointsrc.c:          * (2.0 * pi * pi * tr->phipeak * tr->phipeak)  * xd / r;
is:lib/smooth_pointsrc.c:	if (tr->tmpflag == 3) /* Option Ia */
is:lib/smooth_pointsrc.c:		p = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0)/ r;
is:lib/smooth_pointsrc.c:  else if (tr->tmpflag == 2) /* Option Ib */
is:lib/smooth_pointsrc.c:    p = cubic_interp(t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0)/ r;
is:lib/smooth_pointsrc.c:	else if (tr->tmpflag == 1)  /* Ricker */
is:lib/smooth_pointsrc.c:		p = comprick(t + tr->istart * dt - r / tr->c, tr->fpeak) / r;
is:lib/smooth_pointsrc.c:		x = ((ireal)(ind[i])) * d[i] - tr->xs[i];
is:lib/smooth_pointsrc.c:  if (r < tr->rad)  return 0.0;
is:lib/smooth_pointsrc.c:  gradphi = -compdgauss(r - tr->rad,  tr->phipeak)
is:lib/smooth_pointsrc.c:          * (2.0 * pi * pi * tr->phipeak * tr->phipeak) / r;
is:lib/smooth_pointsrc.c:	if (tr->tmpflag == 3)  /* Option Ia */
is:lib/smooth_pointsrc.c:		f0 = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0) / tr->c;
is:lib/smooth_pointsrc.c:		f1 = cubic_interp( t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0) / r;
is:lib/smooth_pointsrc.c:  else if (tr->tmpflag == 2)  /* Option Ib */
is:lib/smooth_pointsrc.c:    f0 = cubic_interp( t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0) / tr->c;
is:lib/smooth_pointsrc.c:		f1 = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0) / r;
is:lib/smooth_pointsrc.c:	else if (tr->tmpflag == 1) /* Ricker */
is:lib/smooth_pointsrc.c:		f0 = comprick( t + tr->istart * dt - r / tr->c, tr->fpeak) / tr->c;
is:lib/smooth_pointsrc.c:		f1 = compdgauss( t + tr->istart * dt - r / tr->c, tr->fpeak) / r;
is:lib/smooth_pointsrc.c:	return tr->bou * ( f0 + f1) * gradphi;;
is:lib/smooth_pointsrc.c:  tr->fpeak = FPEAK_DEF;  
is:lib/smooth_pointsrc.c:  tr->phipeak = FPEAK_DEF;        
is:lib/smooth_pointsrc.c:  RASN(tr->xs, RPNT_0);
is:lib/smooth_pointsrc.c:  for (i = 0; i < ndim; i++) tr->xs[i] = ( (float)(tg->is[i]) + tg->rs[i] ) * d[i];
is:lib/smooth_pointsrc.c:	tr->c = refvel;
is:lib/smooth_pointsrc.c:	tr->bou = refbou;
is:lib/smooth_pointsrc.c:	if (ps_ffreal(*par, "cutoff_peak", &(tr->phipeak)))
is:lib/smooth_pointsrc.c:    fprintf(stream,"parameter for the cutoff function (cutoff_width) = %e\n", tr->phipeak);
is:lib/smooth_pointsrc.c:  tr->rad = 1.4 / tr->phipeak; 
is:lib/smooth_pointsrc.c:  if (ps_ffreal(*par, "cutoff_rad", &(tr->rad)))
is:lib/smooth_pointsrc.c:    fprintf(stream, "rad of the flat area in the cutoff function = %e\n", tr->rad);
is:lib/smooth_pointsrc.c:  IASN(tr->ixs, IPNT_0);
is:lib/smooth_pointsrc.c:  IASN(tr->ixe, IPNT_0);
is:lib/smooth_pointsrc.c:		phiw[i] = 1 + (int)(floor( (tr->rad +  1.4 / tr->phipeak) / d[i] + 0.1));  
is:lib/smooth_pointsrc.c:		tr->ixs[i] = is[i] - phiw[i];
is:lib/smooth_pointsrc.c:		tr->ixe[i] = is[i] + phiw[i];    
is:lib/smooth_pointsrc.c:    tr->scramp = refamp * refdist * m->tsind.dt;
is:lib/smooth_pointsrc.c:    tr->scramp = m->tsind.dt;
is:lib/smooth_pointsrc.c:    if (!(tr->fpsrc = fopen(srcfile, "r"))) {
is:lib/smooth_pointsrc.c:    if (!fgettr(tr->fpsrc, &trsrc)) {
is:lib/smooth_pointsrc.c:    tr->n = vtoi(hdtype("ns"), val);
is:lib/smooth_pointsrc.c:    tr->dt = 0.001 * vtof(hdtype("dt"), val);
is:lib/smooth_pointsrc.c:    tr->istart = (int)(floor(tmpt0 / m->tsind.dt));
is:lib/smooth_pointsrc.c:    tr->t0 = (m->tsind).dt * tr->istart;
is:lib/smooth_pointsrc.c:    tr->w = (ireal *)malloc(sizeof(ireal)*(tr->n));
is:lib/smooth_pointsrc.c:		tr->w1 = (ireal *)malloc(sizeof(ireal)*(tr->n));
is:lib/smooth_pointsrc.c:    for (i = 0; i < tr->n; i++)  tr->w[i] = trsrc.data[i];
is:lib/smooth_pointsrc.c:			tr->tmpflag = 3;
is:lib/smooth_pointsrc.c:      tr->w1[0] = 0.0;
is:lib/smooth_pointsrc.c:      for (i = 1; i < tr->n; i++) 
is:lib/smooth_pointsrc.c:				q += 0.5 * tr->dt * (tr->w[i] + tr->w[i - 1]);
is:lib/smooth_pointsrc.c:				tr->w1[i] = q;
is:lib/smooth_pointsrc.c:      tr->tmpflag = 2;
is:lib/smooth_pointsrc.c:      tr->w1[0] = 0.0;
is:lib/smooth_pointsrc.c:      for (i = 1; i < tr->n - 1; i++) 
is:lib/smooth_pointsrc.c:				tr->w1[i] = (tr->w[i + 1] - tr->w[i - 1]) / (2.0 *  tr->dt);
is:lib/smooth_pointsrc.c:      tr->w1[tr->n- 1] = 0.0;
is:lib/smooth_pointsrc.c:		tr->tmpflag = 1;
is:lib/smooth_pointsrc.c:		if (ps_ffreal(*par,"fpeak", &(tr->fpeak))) 
is:lib/smooth_pointsrc.c:			fprintf(stream,"peak frequency (fpeak) = %e\n", tr->fpeak);
is:lib/smooth_pointsrc.c:    tr->w = getrick(&iw, (m->tsind).dt, tr->fpeak);
is:lib/smooth_pointsrc.c:    tr->w1 = getdgauss(&iw, (m->tsind).dt, tr->fpeak);
is:lib/smooth_pointsrc.c:		tr->istart = -iw;
is:lib/smooth_pointsrc.c:		tr->n = 2 * iw + 1;
is:lib/smooth_pointsrc.c:    tr->dt = m->tsind.dt;
is:lib/smooth_pointsrc.c:			if (!strcmp(wp,"zerophase")) tr->istart = -iw;
is:lib/smooth_pointsrc.c:			else if (!strcmp(wp,"causal")) tr->istart = 0;
is:lib/smooth_pointsrc.c:			else if (!strcmp(wp,"anticausal")) tr->istart = -2 * iw;
is:lib/smooth_pointsrc.c:  tr->sn = (int)((tr->rad + 1.4 / tr->phipeak) / tr->c / m->tsind.dt) + 1 + tr->n;
is:lib/smooth_pointsrc.c:  tr->idbg = 0;
is:lib/smooth_pointsrc.c:  ps_ffint(*par, "dump_wavelet", &(tr->idbg));
is:lib/smooth_pointsrc.c:  if ( (tr->idbg) && (rk==0) )
is:lib/smooth_pointsrc.c:    if (tr->idbg == 1)  memcpy(trdbg.data, tr->w, tr->n * sizeof(ireal));
is:lib/smooth_pointsrc.c:		if (tr->idbg == 2)  memcpy(trdbg.data, tr->w1, tr->n * sizeof(ireal));
is:lib/smooth_pointsrc.c:    val.u=1000.0*(tr->dt);
is:lib/smooth_pointsrc.c:    val.h=tr->n;
is:lib/smooth_pointsrc.c:    val.h=tr->dt * tr->istart;
is:lib/smooth_pointsrc.c:    if (!(tr->fpdbg=fopen("wavelet.debug","w"))) {
is:lib/smooth_pointsrc.c:    fputtr(tr->fpdbg,&trdbg);
is:lib/smooth_pointsrc.c:    fflush(tr->fpdbg);
is:lib/smooth_pointsrc.c:  if ( (m->tsind.it >= tr->istart) &&  (m->tsind.it <= tr->istart + tr->sn) )
is:lib/smooth_pointsrc.c:      for (ix[2] = iwave_max(tr->ixs[2], gs[2]); ix[2] < iwave_min(tr->ixe[2] + 1, ge[2] + 1); ix[2]++) 
is:lib/smooth_pointsrc.c:          for (ix[1] = iwave_max(tr->ixs[1], gs[1]); ix[1] < iwave_min(tr->ixe[1] + 1, ge[1] + 1); ix[1]++) 
is:lib/smooth_pointsrc.c:              for (ix[0] = iwave_max(tr->ixs[0], gs[0]); ix[0] < iwave_min(tr->ixe[0] + 1, ge[0] + 1); ix[0]++) 
is:lib/smooth_pointsrc.c:                  ps = bm * tr->scramp * vfun(ix, d, ndim, tr, t + 0.5 * m->tsind.dt, m->tsind.dt);
is:lib/smooth_pointsrc.c:        for (ix[2] = iwave_max(tr->ixs[2], gs[2]); ix[2] < iwave_min(tr->ixe[2] + ((i==2) ? 0 : 1), ge[2] + 1); ix[2]++) 
is:lib/smooth_pointsrc.c:            for (ix[1] = iwave_max(tr->ixs[1], gs[1]); ix[1] < iwave_min(tr->ixe[1] + ((i==1) ? 0 : 1), ge[1] + 1); ix[1]++) 
is:lib/smooth_pointsrc.c:                for (ix[0] = iwave_max(tr->ixs[0], gs[0]); ix[0] < iwave_min(tr->ixe[0] + ((i==0) ? 0 : 1), ge[0] + 1); ix[0]++) 
is:lib/smooth_pointsrc.c:                      ps = bou * tr->scramp * pfun(ix, d, ndim, tr, t + m->tsind.dt, i, m->tsind.dt);
is:lib/smooth_pointsrc.c:  fprintf(fp,"source sound vel = %f\n",tr->c);
is:lib/smooth_pointsrc.c:	fprintf(fp,"source bou       = %f\n", tr->bou);
is:lib/smooth_pointsrc.c:  fprintf(fp,"istart           = %d\n", tr->istart);
is:lib/smooth_pointsrc.c:	fprintf(fp,"n                = %d\n", tr->n);
is:lib/smooth_pointsrc.c:  fprintf(fp,"dt                = %f\n", tr->dt);
is:lib/smooth_pointsrc.c:  fprintf(fp,"sn               = %d\n", tr->sn);
is:lib/smooth_pointsrc.c:  fprintf(fp,"fpeak            = %f\n", tr->fpeak);
is:lib/smooth_pointsrc.c:	fprintf(fp,"phipeak          = %f\n", tr->phipeak);
is:lib/smooth_pointsrc.c:    fprintf(fp,"xs[%d]=%f\n", i, tr->xs[i]);
is:lib/smooth_pointsrc.c:    fprintf(fp,"ixs[%d]=%d ixe[%d]=%d\n", i, tr->ixs[i], i, tr->ixe[i]);
is:lib/pointsrc.c~:	tr->srcin_flag = 0;
is:lib/pointsrc.c~:		tr->srcin_flag = 1;
is:lib/pointsrc.c~:	IASN(tr->is,IPNT_0);
is:lib/pointsrc.c~:	RASN(tr->rs,RPNT_0);
is:lib/pointsrc.c~:	tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
is:lib/pointsrc.c~:	if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
is:lib/pointsrc.c~:	if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
is:lib/pointsrc.c~:	tr->order = 0;
is:lib/pointsrc.c~:	ps_ffint(*par, "sampord", &(tr->order));
is:lib/pointsrc.c~:	tr->fpsrc = NULL;
is:lib/pointsrc.c~:	tr->fpdbg = NULL;
is:lib/pointsrc.c~:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c~:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c~:		tis[i] = tr->is[i];
is:lib/pointsrc.c~:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
is:lib/pointsrc.c~:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
is:lib/pointsrc.c~:	RASN( tr->src_d, RPNT_0);
is:lib/pointsrc.c~:	if (tr->srcin_flag) {
is:lib/pointsrc.c~:		tr->src_d[0] = REAL_ONE;
is:lib/pointsrc.c~:		if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
is:lib/pointsrc.c~:		if (fseek(tr->fpsrc,0L,SEEK_SET)) {
is:lib/pointsrc.c~:		if (!fgettr(tr->fpsrc, &trsrc)) {
is:lib/pointsrc.c~:		iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c~:		tr->istart = (int)(tmpt0/((m->tsind).dt));
is:lib/pointsrc.c~:		t0 = (m->tsind).dt * tr->istart;
is:lib/pointsrc.c~:		/*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
is:lib/pointsrc.c~:		tr->n = (int)(tmax/((m->tsind).dt)) + 1;
is:lib/pointsrc.c~:		tr->w = (ireal *)usermalloc_(sizeof(ireal)*(tr->n));
is:lib/pointsrc.c~:		lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
is:lib/pointsrc.c~:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
is:lib/pointsrc.c~:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
is:lib/pointsrc.c~:		if (tr->srcin_flag) {
is:lib/pointsrc.c~:			tr->w = getrick( &iw, (m->tsind).dt, fpeak );
is:lib/pointsrc.c~:			tr->n = 2 * iw+1;
is:lib/pointsrc.c~:			tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
is:lib/pointsrc.c~:			tr->n = 2 * iw+1;
is:lib/pointsrc.c~:		tr->istart = -iw;
is:lib/pointsrc.c~:				tr->istart = -iw;
is:lib/pointsrc.c~:				tr->istart = 0;
is:lib/pointsrc.c~:/*			else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;*/
is:lib/pointsrc.c~:		tr->idbg = 0;
is:lib/pointsrc.c~:		ps_ffint(*par, "dump_wavelet", &(tr->idbg));
is:lib/pointsrc.c~:		if (tr->idbg) {
is:lib/pointsrc.c~:			memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
is:lib/pointsrc.c~:			val.h=tr->n;
is:lib/pointsrc.c~:			val.h=((m->tsind).dt)*tr->istart;
is:lib/pointsrc.c~:			if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
is:lib/pointsrc.c~:			fputtr(tr->fpdbg,&trdbg);
is:lib/pointsrc.c~:			fflush(tr->fpdbg);
is:lib/pointsrc.c~:			iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c~:		if (tr->srcin_flag){
is:lib/pointsrc.c~:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:				tr->scramp = refbou * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:				tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:		if (tr->srcin_flag){
is:lib/pointsrc.c~:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
is:lib/pointsrc.c~:  	if (tr->w) userfree_(&(tr->w)); 
is:lib/pointsrc.c~:  	if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
is:lib/pointsrc.c~:  	if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
is:lib/pointsrc.c~:	fprintf(stderr,"     evaluating source for iv = %d, it = %d, and istart = %d\n",(m->tsind).iv,(m->tsind).it,tr->istart);
is:lib/pointsrc.c~:	if (tr->srcin_flag){
is:lib/pointsrc.c~://		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 1 ) ){
is:lib/pointsrc.c~:		if ( ((m->tsind).it >= tr->istart) &&
is:lib/pointsrc.c~:		     ((m->tsind).it <  tr->istart + tr->n) && 
is:lib/pointsrc.c~:      				pointsource( tr->is,
is:lib/pointsrc.c~:		  		             tr->rs,
is:lib/pointsrc.c~:		  		             tr->order,
is:lib/pointsrc.c~:		  		             tr->scramp,
is:lib/pointsrc.c~:		  		             tr->src_d[i] * (tr->w)[ (m->tsind).it - tr->istart ],
is:lib/pointsrc.c~:// 		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 0 ) ){
is:lib/pointsrc.c~:		if ( ((m->tsind).it >= tr->istart) &&
is:lib/pointsrc.c~:		     ((m->tsind).it <  tr->istart + tr->n) && 
is:lib/pointsrc.c~:      				pointsource( tr->is,
is:lib/pointsrc.c~:		  		             tr->rs,
is:lib/pointsrc.c~:		  		             tr->order,
is:lib/pointsrc.c~:		  		             tr->scramp,
is:lib/pointsrc.c~:		  		             (tr->w)[ (m->tsind).it - tr->istart ],
is:lib/pointsrc.c~:	fprintf(fp,"srcin_flag   = %d\n",tr->srcin_flag);
is:lib/pointsrc.c~:	fprintf(fp,"pulse length = %d\n",tr->n);
is:lib/pointsrc.c~:  	fprintf(fp,"istart       = %d\n",tr->istart);
is:lib/pointsrc.c~:  	fprintf(fp,"order        = %d\n",tr->order);
is:lib/pointsrc.c~:	fprintf(fp,"scramp       = %e\n",tr->scramp);
is:lib/pointsrc.c~:      		fprintf(fp,"is[%d]=%d rs[%d]=%e src_d[%d]=%e\n", i, tr->is[i], i, tr->rs[i],i,tr->src_d[i]);
lib/esgn_model.c~:/*------------------- private data declarations ----------------------------*/
lib/esgn_model.c~:static int m_ndim = 0; /* dimension - need only compute once */
lib/esgn_model.c~:// /*--- private function declarations - assigned to FD_MODEL pointers ----------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  if (ind>-1 && ind<m_size) return m_names[ind];
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:    IPNT cpers;          /* workspace for periodic wrap info  - currently not used */
lib/esgn_model.c~:  /* decode dimension - only on rk 0 */
lib/esgn_model.c~:  im->specs=(void *)fd;
lib/esgn_model.c~:	    fprintf(stream,"ERROR: in esgn_modelinit - failed to read spatial geometry\n");
lib/esgn_model.c~:    fprintf(stream,"ERROR: in esg_modelinit - failed to read dim=%d\n",m_ndim);
lib/esgn_model.c~:  /* decode order - take care of deprecated cases */
lib/esgn_model.c~:  esgnp->k=1;
lib/esgn_model.c~: ps_flint(*pars,"order",&(esgnp->k));
lib/esgn_model.c~:    fprintf(stream,"NOTE: initializing ESG with half-order = %d\n",esgnp->k);
lib/esgn_model.c~:/*   if (ps_ffint(*pars,"order",&(esgnp->k))) { */
lib/esgn_model.c~:/*     fprintf(stream," RN: read k and is %d \n",esgnp->k); */
lib/esgn_model.c~:/*     /\* old-style iwave specs - deprecated *\/ */
lib/esgn_model.c~:/*       if (!strcmp(jnk,"22")) esgnp->k=1; */
lib/esgn_model.c~:/*       else if (!strcmp(jnk,"24")) esgnp->k=2; */
lib/esgn_model.c~:/*       else if (!strcmp(jnk,"210")) esgnp->k=5; */
lib/esgn_model.c~:/* 	  if ((err=ps_ffint(*pars,"k_phys",&(esgnp->k)))) { */
lib/esgn_model.c~:/*   /\* sanity-check order *\/ */
lib/esgn_model.c~:/*   if (esgnp->k<1 || esgnp->k>8) { */
lib/esgn_model.c~:/*     fprintf(stream,"half-order param = %d not in allowed range [1,7]\n",esgnp->k); */
lib/esgn_model.c~:  fd->fdpars 		= (void*)esgnp;
lib/esgn_model.c~:  fd->isarr 		= esg_isarr;
lib/esgn_model.c~:  fd->numsubsteps 	= esg_numsubsteps;
lib/esgn_model.c~:  fd->update 		= esg_update;
lib/esgn_model.c~:  fd->readgrid 		= esg_readgrid;
lib/esgn_model.c~:  fd->readtimegrid 	= esg_readtimegrid; 
lib/esgn_model.c~:  fd->readschemeinfo 	= esg_readschemeinfo;
lib/esgn_model.c~:  fd->set_grid_type 	= esg_set_grid_type;
lib/esgn_model.c~:  fd->build_sten_dep 	= esg_build_sten_dep;
lib/esgn_model.c~:  fd->create_sten 	= esg_create_sten;
lib/esgn_model.c~:  fd->ind2str 		= esg_ind2str;
lib/esgn_model.c~:  fd->alter_dom 	= esg_alter_dom;
lib/esgn_model.c~:  fd->readmedia		= esgn_readmedia;
lib/esgn_model.c~:  fd->parcopy 		= esgn_ts_parcopy;
lib/esgn_model.c~:  fd->fd_model_init 	= esg_modelinit;
lib/esgn_model.c~:  fd->fd_model_dest 	= esg_modeldest;
lib/esgn_model.c~:  fd->tsf = esg_step;
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  FD_MODEL * fdm = (FD_MODEL *)(model->specs);
lib/esgn_model.c~:    if (fdm->fdpars) {
lib/esgn_model.c~:      esgnp=(ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c~:      ld_pml = esgnp->ld_pml;
lib/esgn_model.c~:      if (esgnp->ld_pml) userfree_(ld_pml); //MB replaced: free(ld_pml);
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  ptgt->dt=psrc->dt;
lib/esgn_model.c~:    (ptgt->lam)[i]=(psrc->lam)[i];
lib/esgn_model.c~:  ptgt->ndim=psrc->ndim;
lib/esgn_model.c~:  ptgt->k = psrc->k;
lib/esgn_model.c~:  ptgt->ld_pml = psrc->ld_pml;
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  /* one-dimensionalize the eta arrays */
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:        fprintf(stream, "using PRIMAL grid on axis-%d\n", i);
lib/esgn_model.c~:        fprintf(stream, "using DUAL   grid on axis-%d\n", i);
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c~: * relation type: dependent of value -> DEP_F
lib/esgn_model.c~: *                dependent of 1st derivative wrt axis-z -> DEP_DFDZ
lib/esgn_model.c~: *                dependent of 1st derivative wrt axis-x -> DEP_DFDX
lib/esgn_model.c~: *                dependent of 1st derivative wrt axis-y -> DEP_DFDY
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c~:/*       int op = fdm->sten_dep_mat[ir][ip]; */
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  /* fdm = (FD_MODEL*)(model->specs); */
lib/esgn_model.c~:  ndim = model->g.dim;
lib/esgn_model.c~:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c~:  dc = &(model->ld_c); /* get computational domain */
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c~:  return create_sten2_2k(fdm,stream, esgnp->k, ndim, gtype, sten_dep_mat,sten);
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:  FD_MODEL * fdm = (FD_MODEL *)(model->specs); 
lib/esgn_model.c~:  ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c~:  get_d(dxs, model->g);
lib/esgn_model.c~:  get_n(ns, model->g);
lib/esgn_model.c~:  esgnp->ndim = ndim = (model->g).dim;
lib/esgn_model.c~:  for (idim = 0;idim < esgnp->ndim;idim ++) {
lib/esgn_model.c~:    esgnp->lam[idim] = (model->tsind).dt / dxs[idim];
lib/esgn_model.c~:    fprintf(stderr, "lam[%d] = %g\n", idim, esgnp->lam[idim]);
lib/esgn_model.c~:  esgnp->dt = (model->tsind).dt;
lib/esgn_model.c~:  //MB repalced: esgnp->ld_pml = (RDOM *)malloc(2*ndim*ndim*sizeof(RDOM));
lib/esgn_model.c~:  esgnp->ld_pml = (RDOM *)usermalloc_(2*ndim*ndim*sizeof(RDOM));
lib/esgn_model.c~:  ld_pml = esgnp->ld_pml;
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      dgea[iv][1] = iwave_min(gec[1], -1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      if (gec[1] <= ns[1]-1)  continue;
lib/esgn_model.c~:      dgsa[iv][1] = iwave_max(gsc[1], ns[1]-1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      dgea[iv][0] = iwave_min(gec[0], -1);  
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      if (gec[0] <= ns[0]-1)  continue;
lib/esgn_model.c~:      dgsa[iv][0] = iwave_max(gsc[0], ns[0]-1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      dgea[iv][2] = iwave_min(gec[2], -1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      if (gec[2] <= ns[2]-1)  continue;
lib/esgn_model.c~:      dgsa[iv][2] = iwave_max(gsc[2], ns[2]-1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      dgea[iv][1] = iwave_min(gec[1], -1);  
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      if (gec[1] <= ns[1]-1)  continue;
lib/esgn_model.c~:      dgsa[iv][1] = iwave_max(gsc[1], ns[1]-1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      dgea[iv][0] = iwave_min(gec[0], -1);
lib/esgn_model.c~:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c~:      if (gec[0] <= ns[0]-1)  continue;
lib/esgn_model.c~:      dgsa[iv][0] = iwave_max(gsc[0], ns[0]-1);
lib/esgn_model.c~:      ra_zero(&(esgnp->ld_pml[i]._s[iv]));
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:	FD_MODEL * fdm = (FD_MODEL *)(model->specs); 
lib/esgn_model.c~:  	ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c~:  	int ndim = (model->g).dim;  
lib/esgn_model.c~:      			ra_zero(&(esgnp->ld_pml[i]._s[iv]));
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/esgn_model.c~:	FD_MODEL * fdm = (FD_MODEL *)(model->specs);
lib/esgn_model.c~:    	ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c~:	int tot = (model->g.dim) * (model->g.dim) * 2;
lib/esgn_model.c~:    		rd_a_dump( &(esgnp->ld_pml[i]), stream );
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps.c:	int ndim = dom->_s[0].ndim;
lib/esgsteps.c:	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps.c:	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps.c:	//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c:	if (esgnp->k==1) {
lib/esgsteps.c:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:	//k=2, i.e., 2-4 scheme case
lib/esgsteps.c:	if (esgnp->k==2) {
lib/esgsteps.c:		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:	//k=5, i.e., 2-10 scheme case
lib/esgsteps.c:	if (esgnp->k==5) {
lib/esgsteps.c:		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:	if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c:		fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c:		if (esgnp->k==1) {
lib/esgsteps.c:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		//k=2, i.e., 2-4 scheme case
lib/esgsteps.c:		if (esgnp->k==2) {
lib/esgsteps.c:				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		//k=5, i.e., 2-10 scheme case
lib/esgsteps.c:		if (esgnp->k==5) {
lib/esgsteps.c:				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c:	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps.c:	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps.c:	int ndim = dom->_s[0].ndim;
lib/esgsteps.c:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c:		if (esgnp->k==1) {
lib/esgsteps.c:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		//k=2, i.e., 2-4 scheme case
lib/esgsteps.c:		if (esgnp->k==2) {
lib/esgsteps.c:			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		//k=5, i.e., 2-10 scheme case
lib/esgsteps.c:		if (esgnp->k==5) {
lib/esgsteps.c:			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c:		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:	int ndim = dom->_s[0].ndim;
lib/esgsteps_mod.c:// 	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps_mod.c:// 	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps_mod.c:	//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c:	if (esgnp->k==1) {
lib/esgsteps_mod.c:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:	//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c:	if (esgnp->k==2) {
lib/esgsteps_mod.c:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 	//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c:// // 	if (esgnp->k==5) {
lib/esgsteps_mod.c:// // 		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 	if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c:	if(esgnp->k !=2){
lib/esgsteps_mod.c:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c:		if (esgnp->k==1) {
lib/esgsteps_mod.c:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:		//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c:		if (esgnp->k==2) {
lib/esgsteps_mod.c:				fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 		//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c:// // 		if (esgnp->k==5) {
lib/esgsteps_mod.c:// // 				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c:// // 			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps_mod.c:		if (esgnp->k!=2){
lib/esgsteps_mod.c:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// 	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps_mod.c:// 	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:	int ndim = dom->_s[0].ndim;
lib/esgsteps_mod.c:	vmax = dom->_s[D_V0]._s0[0];
lib/esgsteps_mod.c:	for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/esgsteps_mod.c:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c:		if (esgnp->k==1) {
lib/esgsteps_mod.c:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:		//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c:		if (esgnp->k==2) {
lib/esgsteps_mod.c:				fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 		//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c:// // 		if (esgnp->k==5) {
lib/esgsteps_mod.c:// // 			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c:// // 		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c:		if (esgnp->k!=2) {
lib/esgsteps_mod.c:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps_mod.c:	vmax = dom->_s[D_V0]._s0[0];
lib/esgsteps_mod.c:	for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c:/*----------------------------------------------------------------------------*/
lib/esg_movie.c:  return -1;
lib/esg_movie.c:  mt->iselect=esg_movie_select;
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c~:	int ndim = dom->_s[0].ndim;
lib/esgsteps_mod.c~:// 	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps_mod.c~:// 	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps_mod.c~:	//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c~:	if (esgnp->k==1) {
lib/esgsteps_mod.c~:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:	//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c~:	if (esgnp->k==2) {
lib/esgsteps_mod.c~:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 	//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c~:// // 	if (esgnp->k==5) {
lib/esgsteps_mod.c~:// // 		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 	if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c~:	if(esgnp->k !=2){
lib/esgsteps_mod.c~:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c~:		if (esgnp->k==1) {
lib/esgsteps_mod.c~:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:		//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c~:		if (esgnp->k==2) {
lib/esgsteps_mod.c~:				fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 		//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c~:// // 		if (esgnp->k==5) {
lib/esgsteps_mod.c~:// // 				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c~:// // 			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps_mod.c~:		if (esgnp->k!=2){
lib/esgsteps_mod.c~:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// 	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps_mod.c~:// 	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c~:	int ndim = dom->_s[0].ndim;
lib/esgsteps_mod.c~:	vmax = dom->_s[D_V0]._s0[0];
lib/esgsteps_mod.c~:	for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/esgsteps_mod.c~:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps_mod.c~:		if (esgnp->k==1) {
lib/esgsteps_mod.c~:			fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:		//k=2, i.e., 2-4 scheme case
lib/esgsteps_mod.c~:		if (esgnp->k==2) {
lib/esgsteps_mod.c~:				fprintf(stderr,"       2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 		//k=5, i.e., 2-10 scheme case
lib/esgsteps_mod.c~:// // 		if (esgnp->k==5) {
lib/esgsteps_mod.c~:// // 			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps_mod.c~:// // 		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps_mod.c~:		if (esgnp->k!=2) {
lib/esgsteps_mod.c~:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps_mod.c~:	vmax = dom->_s[D_V0]._s0[0];
lib/esgsteps_mod.c~:	for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:   2-10 stagger finite difference in 2D for isotropic elastic wave
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:#define C24 4.166666666666666666666667e-2
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c: * Normal stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_2d.c: * Shear stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_2d.c: * Velocity component vz updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_2d.c: * Velocity component vx updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:  	/* sanity test - storage mode */
lib/esgn210_2d.c: 	 if ((dom->_s)[D_P0]._dims[0].n > NSTORE) return E_NOTIMESTEP;
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:  s = dom->_s;
lib/esgn210_2d.c:  rs = rdom->_s;
lib/esgn210_2d.c:  cs = cdom->_s;
lib/esgn210_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn210_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn210_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_2d.c:    gye_pml_I = gys-1;
lib/esgn210_2d.c:    gxe_pml_III = gxs-1;
lib/esgn210_2d.c:      px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn210_2d.c:      px_pml_I_a   = tsz * ld_pml[0]._s[D_P0]._dims[0].n0-nx;
lib/esgn210_2d.c:      py_pml_I_a   = tsz * ld_pml[0]._s[D_P1]._dims[0].n0-nx;
lib/esgn210_2d.c:      px_pml_II_a  = tsz * ld_pml[2]._s[D_P0]._dims[0].n0-nx;
lib/esgn210_2d.c:      py_pml_II_a  = tsz * ld_pml[2]._s[D_P1]._dims[0].n0-nx;
lib/esgn210_2d.c:      px_pml_III_a = tsz * ld_pml[4]._s[D_P0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn210_2d.c:      py_pml_III_a = tsz * ld_pml[4]._s[D_P1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn210_2d.c:      px_pml_IV_a  = tsz * ld_pml[6]._s[D_P0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn210_2d.c:      py_pml_IV_a  = tsz * ld_pml[6]._s[D_P1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn210_2d.c:      mp00_a       = tsz * s[D_MP00]._dims[0].n0 - nx;
lib/esgn210_2d.c:      mp01_a       = tsz * s[D_MP01]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn210_2d.c:    _px     = s[D_P0]._s + (gxs - s[D_P0 ]._dims[0].gs) + (gys - s[D_P0 ]._dims[1].gs + tid) * s[D_P0 ]._dims[0].n0;
lib/esgn210_2d.c:    _py     = s[D_P1]._s + (gxs - s[D_P1 ]._dims[0].gs) + (gys - s[D_P1 ]._dims[1].gs + tid) * s[D_P1 ]._dims[0].n0;
lib/esgn210_2d.c:    _px_x_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_x_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _px_y_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_y_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _mp00   = cs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0;
lib/esgn210_2d.c:    _mp01   = cs[D_MP01]._s + (gxs - s[D_MP01]._dims[0].gs) + (gys - s[D_MP01]._dims[1].gs + tid) * s[D_MP01]._dims[0].n0;
lib/esgn210_2d.c:    _vx3    = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0 + 1;
lib/esgn210_2d.c:    _vy2    = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy1    = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy0    = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn210_2d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn210_2d.c:        dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px_x_I) = ((*_px_x_I) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_py_x_I) = ((*_py_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_px_y_I) = ((*_px_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_2d.c:          (*_py_y_I) = ((*_py_y_I) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:    _px   += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn210_2d.c:    _py   += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn210_2d.c:    _mp00 += (gye_pml_I + 1 + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn210_2d.c:    _mp01 += (gye_pml_I + 1 + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn210_2d.c:    _vx3  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _vy2  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn210_2d.c:    _px_x_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_x_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _px_y_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_y_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _px_x_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_x_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _px_y_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_y_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn210_2d.c:      for ( _pxend = _px + gxe_pml_III-gxs_pml_III+1; _px < _pxend; )
lib/esgn210_2d.c:        dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px_x_III) = ((*_px_x_III) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_py_x_III) = ((*_py_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:           (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt); 
lib/esgn210_2d.c:      for ( _pxend = _px + gxs_pml_IV-gxe_pml_III-1; _px < _pxend; )
lib/esgn210_2d.c:        dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _pxend = _px + gxe_pml_IV-gxs_pml_IV+1; _px < _pxend; )
lib/esgn210_2d.c:        dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px_x_IV) = ((*_px_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_py_x_IV) = ((*_py_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx;
lib/esgn210_2d.c:    _px   += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn210_2d.c:    _py   += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn210_2d.c:    _mp00 += (gys_pml_II + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn210_2d.c:    _mp01 += (gys_pml_II + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn210_2d.c:    _vx3  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _vy2  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn210_2d.c:    _px_x_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_x_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _px_y_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn210_2d.c:    _py_y_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn210_2d.c:        dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px_x_II) = ((*_px_x_II) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_py_x_II) = ((*_py_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_px_y_II) = ((*_px_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_2d.c:          (*_py_y_II) = ((*_py_y_II) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:  s = dom->_s;
lib/esgn210_2d.c:  rs = rdom->_s;
lib/esgn210_2d.c:  cs = cdom->_s;
lib/esgn210_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn210_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn210_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_2d.c:    gye_pml_I = gys-1;
lib/esgn210_2d.c:    gxe_pml_III = gxs-1;
lib/esgn210_2d.c:      sxy_a         = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      ms0_a         = tsz * s[D_MS0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vx_a          = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vy_a          = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn210_2d.c:      sxy_pml_I_a   = tsz * ld_pml[0]._s[D_S0]._dims[0].n0-nx;
lib/esgn210_2d.c:      sxy_pml_II_a  = tsz * ld_pml[2]._s[D_S0]._dims[0].n0-nx;   
lib/esgn210_2d.c:      sxy_pml_III_a = tsz * ld_pml[4]._s[D_S0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);  
lib/esgn210_2d.c:      sxy_pml_IV_a  = tsz * ld_pml[6]._s[D_S0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn210_2d.c:    _sxy     = s[D_S0]._s + (gxs - s[D_S0 ]._dims[0].gs) + (gys - s[D_S0 ]._dims[1].gs + tid) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_x_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_y_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _ms0     = cs[D_MS0]._s + (gxs - s[D_MS0]._dims[0].gs) + (gys - s[D_MS0]._dims[1].gs + tid) * s[D_MS0]._dims[0].n0;
lib/esgn210_2d.c:    _vy3     = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0 + 2;
lib/esgn210_2d.c:    _vx1     = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx0     = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _epx     = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn210_2d.c:    _epy     = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn210_2d.c:        dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_sxy_x_I) = ((*_sxy_x_I) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_sxy_y_I) = ((*_sxy_y_I) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:    _sxy  += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _ms0  += (gye_pml_I + 1 + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn210_2d.c:    _vy3  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _vx2  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn210_2d.c:    _sxy_x_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_y_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_x_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_y_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn210_2d.c:      for ( _sxyend = _sxy + gxe_pml_III-gxs_pml_III+1; _sxy < _sxyend; )
lib/esgn210_2d.c:        dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_sxy_x_III) = ((*_sxy_x_III) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _sxyend = _sxy + gxs_pml_IV-gxe_pml_III-1; _sxy < _sxyend; )
lib/esgn210_2d.c:        dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _sxyend = _sxy + gxe_pml_IV-gxs_pml_IV+1; _sxy < _sxyend; )
lib/esgn210_2d.c:        dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_sxy_x_IV) = ((*_sxy_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx;
lib/esgn210_2d.c:    _sxy  += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _ms0  += (gys_pml_II + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn210_2d.c:    _vy3  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _vx2  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn210_2d.c:    _sxy_x_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy_y_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn210_2d.c:        dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_sxy_x_II) = ((*_sxy_x_II) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_sxy_y_II) = ((*_sxy_y_II) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:  s = dom->_s;
lib/esgn210_2d.c:  rs = rdom->_s;
lib/esgn210_2d.c:  cs = cdom->_s;
lib/esgn210_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn210_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn210_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_2d.c:    gye_pml_I = gys-1;
lib/esgn210_2d.c:    gxe_pml_III = gxs-1;
lib/esgn210_2d.c:      vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vx_pml_I_a   = tsz * ld_pml[0]._s[D_V0]._dims[0].n0-nx;
lib/esgn210_2d.c:      vx_pml_II_a  = tsz * ld_pml[2]._s[D_V0]._dims[0].n0-nx; 
lib/esgn210_2d.c:      vx_pml_III_a = tsz * ld_pml[4]._s[D_V0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn210_2d.c:      vx_pml_IV_a  = tsz * ld_pml[6]._s[D_V0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn210_2d.c:      mvx_a        = tsz * s[D_MV0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn210_2d.c:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn210_2d.c:    _vx     = s[D_V0]._s + (gxs - s[D_V0 ]._dims[0].gs) + (gys - s[D_V0 ]._dims[1].gs + tid) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _vx_x_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx_y_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _mvx    = cs[D_MV0]._s + (gxs - s[D_MV0]._dims[0].gs) + (gys - s[D_MV0]._dims[1].gs + tid) * s[D_MV0]._dims[0].n0;
lib/esgn210_2d.c:    _px3    = rs[D_P0]._s + (gxs - s[D_P0]._dims[0].gs) + (gys - s[D_P0]._dims[1].gs + tid) * s[D_P0]._dims[0].n0 + 2;
lib/esgn210_2d.c:    _sxy2   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy1   = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy0   = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _epx    = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn210_2d.c:    _epy    = rs[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn210_2d.c:        dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vx_x_I) = ((*_vx_x_I) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_vx_y_I) = ((*_vx_y_I) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:    _vx   += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _mvx  += (gye_pml_I + 1 + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn210_2d.c:    _px3  += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn210_2d.c:    _sxy2 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn210_2d.c:    _vx_x_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx_y_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx_x_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx_y_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn210_2d.c:      for ( _vxend = _vx + gxe_pml_III-gxs_pml_III+1; _vx < _vxend; )
lib/esgn210_2d.c:        dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vx_x_III) = ((*_vx_x_III) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _vxend = _vx + gxs_pml_IV-gxe_pml_III-1; _vx < _vxend; )
lib/esgn210_2d.c:        dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _vxend = _vx + gxe_pml_IV-gxs_pml_IV+1; _vx < _vxend; )
lib/esgn210_2d.c:        dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vx_x_IV) = ((*_vx_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx;
lib/esgn210_2d.c:    _vx   += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn210_2d.c:    _mvx  += (gys_pml_II + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn210_2d.c:    _px3  += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn210_2d.c:    _sxy2 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn210_2d.c:    _vx_x_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    _vx_y_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn210_2d.c:        dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vx_x_II) = ((*_vx_x_II) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_vx_y_II) = ((*_vx_y_II) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:  s = dom->_s;
lib/esgn210_2d.c:  rs = rdom->_s;
lib/esgn210_2d.c:  cs = cdom->_s;
lib/esgn210_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn210_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn210_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_2d.c:    gye_pml_I = gys-1;
lib/esgn210_2d.c:    gxe_pml_III = gxs-1;
lib/esgn210_2d.c:      vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn210_2d.c:      vy_pml_I_a   = tsz * ld_pml[0]._s[D_V1]._dims[0].n0-nx;
lib/esgn210_2d.c:      vy_pml_II_a  = tsz * ld_pml[2]._s[D_V1]._dims[0].n0-nx;
lib/esgn210_2d.c:      vy_pml_III_a = tsz * ld_pml[4]._s[D_V1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn210_2d.c:      vy_pml_IV_a  = tsz * ld_pml[6]._s[D_V1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn210_2d.c:      mvy_a        = tsz * s[D_MV1]._dims[0].n0 - nx;
lib/esgn210_2d.c:      py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn210_2d.c:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn210_2d.c:    _vy     = s[D_V1]._s + (gxs - s[D_V1 ]._dims[0].gs) + (gys - s[D_V1 ]._dims[1].gs + tid) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _vy_x_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy_y_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _mvy    = cs[D_MV1]._s + (gxs - s[D_MV1]._dims[0].gs) + (gys - s[D_MV1]._dims[1].gs + tid) * s[D_MV1]._dims[0].n0;
lib/esgn210_2d.c:    _sxy3   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0 + 1;
lib/esgn210_2d.c:    _py1    = rs[D_P1]._s + (gxs - s[D_P1]._dims[0].gs) + (gys - s[D_P1]._dims[1].gs + tid) * s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _py0    = _py1 - s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _epx    = rs[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn210_2d.c:    _epy    = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn210_2d.c:        dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vy_x_I) = ((*_vy_x_I) * (1.0f -etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_vy_y_I) = ((*_vy_y_I) * (1.0f -etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:    _vy   += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _mvy  += (gye_pml_I + 1 + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn210_2d.c:    _sxy3 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _py2  += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn210_2d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn210_2d.c:    _vy_x_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy_y_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy_x_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy_y_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn210_2d.c:      for ( _vyend = _vy + gxe_pml_III-gxs_pml_III+1; _vy < _vyend; )
lib/esgn210_2d.c:        dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vy_x_III) = ((*_vy_x_III) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt); 
lib/esgn210_2d.c:      for ( _vyend = _vy + gxs_pml_IV-gxe_pml_III-1; _vy < _vyend; )
lib/esgn210_2d.c:        dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      for ( _vyend = _vy + gxe_pml_IV-gxs_pml_IV+1; _vy < _vyend; )
lib/esgn210_2d.c:        dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vy_x_IV) = ((*_vy_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx;
lib/esgn210_2d.c:    _vy   += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn210_2d.c:    _mvy  += (gys_pml_II + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn210_2d.c:    _sxy3 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn210_2d.c:    _py2  += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn210_2d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn210_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_2d.c:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn210_2d.c:    _vy_x_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    _vy_y_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn210_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn210_2d.c:        dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn210_2d.c:        dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn210_2d.c:          (*_vy_x_II) = ((*_vy_x_II) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_2d.c:          (*_vy_y_II) = ((*_vy_y_II) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn210_2d.c:          (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn210_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_2d.c:/*---- END POINTER BRANCH ----------------------------------------------------*/
lib/esgn_read.c: * load geometry grid from p-wave, or s-wave velocity, or Lame constants (lambda or mu)
lib/esgn_read.c:    g->dim = 0;
lib/esgn_read.c:      g->axes[i].n = tmp;
lib/esgn_read.c:      if (ps_ffreal(par, key, &(g->axes[i].d)))  g->axes[i].d=1.0;
lib/esgn_read.c:      if (ps_ffreal(par, key, &(g->axes[i].o)))  g->axes[i].o=0.0;
lib/esgn_read.c:      if (g->axes[i].n > 1)  g->dim = iwave_max(g->dim,i+1);
lib/esgn_read.c:      tmp--;
lib/esgn_read.c:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c:      g->axes[tmp].id = 0;
lib/esgn_read.c:      tmp--;
lib/esgn_read.c:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c:      g->axes[tmp].id = 1;
lib/esgn_read.c:      tmp--;
lib/esgn_read.c:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c:      g->axes[tmp].id = 2;
lib/esgn_read.c:  grid g = model->g;
lib/esgn_read.c:    fprintf(stream,"NOTE: esg_readtimegrid - using default cmax = %e\n",cmax);
lib/esgn_read.c:    fprintf(stream,"NOTE: esg_readtimegrid - using default cfl = %e\n",cfl);
lib/esgn_read.c:    fprintf(stream,"Error: esg_readtimegrid - either min dx=%e or cfl=%e "
lib/esgn_read.c:  (model->tsind).dt = a*cfl/cmax;
lib/esgn_read.c:  fprintf(stream, "esg_readtimegrid a = %g  cfl = %g  cmax = %g  dt = %g\n", a, cfl, cmax, (model->tsind).dt);
lib/esgn_read.c:  RDOM dom = model->ld_a;
lib/esgn_read.c:   *  mp01 = lambda = vp * vp * rho - 2 * vs * vs * rho
lib/esgn_read.c:  int is_vel;    /* p-velocity and s-velocity is given */
lib/esgn_read.c:  ireal cmax = CMAX_DEF; /* max p-velocity from input */
lib/esgn_read.c:  ireal cmin = CMIN_DEF; /* min p-velocity from input */
lib/esgn_read.c:  int mult_ms;  /* multiple read flag for mu or s-velocity */
lib/esgn_read.c:  FD_MODEL * fdm = (FD_MODEL *)model->specs;
lib/esgn_read.c:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c:  ndim = model->g.dim;
lib/esgn_read.c:            fdm->ind2str(D_MP00), err);
lib/esgn_read.c:            fdm->ind2str(D_MP00), err);
lib/esgn_read.c:    fprintf(stream, "Note: esg_readmedia - using default cmax = %e\n", cmax);
lib/esgn_read.c:    fprintf(stream, "Note: esg_readmedia - using default cmin = %e\n", cmin);
lib/esgn_read.c:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c:  /* reference values - first set defaults -----------------------------------*/
lib/esgn_read.c:  /* lambda mu have the same unit with kappa ---------------------------------*/
lib/esgn_read.c:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c:  /* detect which parameters are provided ------------------------------------*/
lib/esgn_read.c:      reflambda = refpvel*refpvel*refden - 2*refmu;
lib/esgn_read.c:      reflambda = refpvel*refpvel/refbuoy - 2*refmu;
lib/esgn_read.c:  /* check reference p-velocity for comformance */
lib/esgn_read.c:    fprintf(stream, "Error: esg_readmedia - p-velocity out of bounds\n");
lib/esgn_read.c:   * read Lame constants or p and s-velocity into D_MP00, D_MP01
lib/esgn_read.c:              fdm->ind2str(D_MP00));
lib/esgn_read.c:              fdm->ind2str(D_MP01));
lib/esgn_read.c:      fprintf(stream, "Error: esg_readmedia from rsfread - lambda\n");
lib/esgn_read.c:    for (i=0; i<(ndim-1)*ndim/2; i++) {
lib/esgn_read.c:      fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c:              "Error: esg_readmedia from rsfread - mukey (single) = %s\n", mukey);
lib/esgn_read.c:      fprintf(stream, "Error: esg_readmedia from rsfread - pvelocity\n");
lib/esgn_read.c:    for (i=0; i<(ndim-1)*ndim/2; i++) {
lib/esgn_read.c:      fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c:              "Error: esg_readmedia from rsfread - svelkey (single) = %s\n", svelkey);
lib/esgn_read.c:    /* velocity check - performed only in case velocity is read directly */
lib/esgn_read.c:              "Error: esg_readmedia - pvelocity field read from ");
lib/esgn_read.c:  /* buoyancy - first look for multiple buoyancy */
lib/esgn_read.c:                "Error: esg_readmedia from rsfread - buoykey = %s\n", buoykey);
lib/esgn_read.c:                  "Error: esg_readmedia from rsfread - denkey = %s\n", denkey);
lib/esgn_read.c:                  "Error: esg_readmedia from rsfread - rhokey = %s\n", rhokey);
lib/esgn_read.c:              "Error: esg_readmedia from rsfread - mukey = %s\n", mukey);
lib/esgn_read.c:        fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c:                  "Error: esg_readmedia from rsfread - buoykey (single) = %s\n", buoykey);
lib/esgn_read.c:                    "Error: esg_readmedia from rsfread - denkey = %s\n", denkey);
lib/esgn_read.c:                    "Error: esg_readmedia from rsfread - rhokey = %s\n", rhokey);
lib/esgn_read.c:            rd_gset(&dom, D_MP01, ii, q-2*q1);            
lib/esgn_read.c:      for (i = 0;i < ndim*(ndim-1)/2;i ++) {
lib/esgn_read.c:      for (i = 0;i < ndim*(ndim-1)/2;i ++) {
lib/esgn_read.c:                q2 = ra_gget(&B1tmp, ii);  /* s-velocity */
lib/esgn_read.c:                  q2 = ra_gget(&B1tmp, kk);  /* s-velocity */
lib/esgn_read.c:/*----------------------------------------------------------------------------*/
lib/esgn_read.c:  dom = &(model->ld_a);
lib/esgn_read.c:  ndim = model->g.dim;
lib/esgn_read.c:  /* read cmax -------------------------------------------------------------*/
lib/esgn_read.c:    fprintf(stream,"NOTE: esgn_setetas - using default cmax = %e\n",cmax);
lib/esgn_read.c:  /* read pml amplitude ----------------------------------------------------*/
lib/esgn_read.c:    dd = model->g.axes[idim].d;
lib/esgn_read.c:    v1 = v0 + dd * (ireal)(model->g.axes[idim].n - 1);
lib/esgn_read.c:    L0 = model->nls[idim] * dd; /* PML width in ireal length units */
lib/esgn_read.c:    L1 = model->nrs[idim] * dd; /* PML width in ireal length units */
lib/esgn_read.c:        s = (s - v0) / L0;
lib/esgn_read.c:        s = (s - v1) / L1;
lib/esgn_read.c:        s = (s - v0) / L0;
lib/esgn_read.c:        s = (s - v1) / L1;
lib/esgn_read.c:/* helper function - not in header file */
lib/esgn_read.c:    fprintf(stream,"NOTE: sgn_readpmlgrid - using default fpeak = %e\n",fpeak);
lib/esgn_read.c:    fprintf(stream,"NOTE: sgn_readpmlgrid - using default cmax = %e\n",cmax);
lib/esgn_read.c:/*----------------------------------------------------------------------------*/
lib/esgn_read.c:  sgnm->ns  has IPNT type and contains physical domain size.
lib/esgn_read.c:  sgnm->nsl has IPNT type and contains left PML domains' sizes.
lib/esgn_read.c:  sgnm->nsr has IPNT type and contains right PML domains' sizes.
lib/esgn_read.c:  IASN(model->nls, IPNT_0);  /* default left PML width */
lib/esgn_read.c:  IASN(model->nrs, IPNT_0);  /* default right PML width */
lib/esgn_read.c:  if ((err=init_elastic_geom_par(&(model->g),*pars,stream))) {
lib/esgn_read.c:  get_d(d,model->g);
lib/esgn_read.c:  err=esg_readpmlgrid(model->nls,model->nrs,d, (model->g).dim, *pars,stream);
Binary file lib/esg_movie.o matches
Binary file lib/esgn210_2d.o matches
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:		if ( fabs(rs[0]-0.5)<1e-9 ) {
lib/pointsrc.c:			rs[0] -= 0.5;
lib/pointsrc.c:			--is[0];	
lib/pointsrc.c:		if ( fabs(rs[1]-0.5)<1e-9 ) {
lib/pointsrc.c:			rs[1] -= 0.5;
lib/pointsrc.c:			--is[1];	
lib/pointsrc.c:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c:	 	      is[1]>gs[1]-1 &&
lib/pointsrc.c:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c:		      is[1]>gs[1]-1 &&
lib/pointsrc.c:	 	      is[2]>gs[2]-1 &&
lib/pointsrc.c:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c:				fac=1.0-rs[0];
lib/pointsrc.c:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c:      			is[0]--;
lib/pointsrc.c:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c:	  		     is[1]>gs[1]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*(1.0-rs[1]);
lib/pointsrc.c:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c:	  		     is[1]>gs[1]-1 &&
lib/pointsrc.c:			  	fac=rs[0]*(1.0-rs[1]);
lib/pointsrc.c:      			is[0]--;
lib/pointsrc.c:      			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:	  		    is[1]>gs[1]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*rs[1];
lib/pointsrc.c:      			is[1]--;
lib/pointsrc.c:      			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:	  		    is[1]>gs[1]-1 &&
lib/pointsrc.c:      			is[0]--;is[1]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=rs[0]*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c:			is[0]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*rs[1]*(1.0-rs[2]);
lib/pointsrc.c:			is[1]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=rs[0]*rs[1]*(1.0-rs[2]);
lib/pointsrc.c:			is[0]--;is[1]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*(1.0-rs[1])*rs[2];
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=rs[0]*(1.0-rs[1])*rs[2];
lib/pointsrc.c:			is[0]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:				fac=(1.0-rs[0])*rs[1]*rs[2];
lib/pointsrc.c:			is[1]--;
lib/pointsrc.c:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c:			is[1]>gs[1]-1 &&
lib/pointsrc.c:			is[2]>gs[2]-1 &&
lib/pointsrc.c:			is[0]--;is[1]--;
lib/pointsrc.c:			is[2]--;
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:	int     iw;           	/* half-width */
lib/pointsrc.c:	ireal   tmp0, tmp1, q; 	/* workspace for in-place trapezoidal rule */
lib/pointsrc.c:	ireal refkappa;        	/* near-source bulk modulus */
lib/pointsrc.c:	tr->srcin_flag = 0;
lib/pointsrc.c:		tr->srcin_flag = 1;
lib/pointsrc.c:	get_d(d, m->gl);
lib/pointsrc.c:	rd_ndim(&m->ld_a, D_MP00, &ndim);
lib/pointsrc.c:	IASN(tr->is,IPNT_0);
lib/pointsrc.c:	RASN(tr->rs,RPNT_0);
lib/pointsrc.c:	tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
lib/pointsrc.c:	if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
lib/pointsrc.c:	if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
lib/pointsrc.c:	tr->order = 0;
lib/pointsrc.c:	ps_ffint(*par, "sampord", &(tr->order));
lib/pointsrc.c:	tr->fpsrc = NULL;
lib/pointsrc.c:	tr->fpdbg = NULL;
lib/pointsrc.c:	/* extract near-source bulk modulus from grid - necessary for
lib/pointsrc.c:	   grid, check neighboring grid points - in that case, at least one
lib/pointsrc.c:	rd_gse(&(m->ld_a), D_MP00, gs, ge);
lib/pointsrc.c:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c:	if (iflag) refkappa = rd_gget(&(m->ld_a), D_MP00, tis);
lib/pointsrc.c:	/* extract near-source bouyancy from grid - necessary for
lib/pointsrc.c:	   WWS, 04.03.09: need to do this here too - to avoid failure if
lib/pointsrc.c:	   neighboring grid points - in that case, at least one of these
lib/pointsrc.c:	rd_gse(&(m->ld_a), D_MV0, gs, ge);
lib/pointsrc.c:		tis[i] = tr->is[i];
lib/pointsrc.c:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c:	if (iflag) refbou = rd_gget(&(m->ld_a), D_MV0, tis);
lib/pointsrc.c:	   slightly different points - this of course does not matter if
lib/pointsrc.c:		fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/pointsrc.c:	RASN( tr->src_d, RPNT_0);
lib/pointsrc.c:	if (tr->srcin_flag) {
lib/pointsrc.c:		tr->src_d[0] = REAL_ONE;
lib/pointsrc.c:		if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
lib/pointsrc.c:			fprintf(stream, "Error: pointsrc_init - failed to open source file\n");
lib/pointsrc.c:		if (fseek(tr->fpsrc,0L,SEEK_SET)) {
lib/pointsrc.c:			fprintf(stream,"Error: pointsrc_init - failed to seek to start of file\n");
lib/pointsrc.c:		if (!fgettr(tr->fpsrc, &trsrc)) {
lib/pointsrc.c:			fprintf(stream,"Error: pointsrc_init - failed to read source file\n");
lib/pointsrc.c:		iwave_fclose(tr->fpsrc);
lib/pointsrc.c:		   at an external sample rate - read headers relevant for single dilat
lib/pointsrc.c:		tr->istart = (int)(tmpt0/((m->tsind).dt));
lib/pointsrc.c:		t0 = (m->tsind).dt * tr->istart;
lib/pointsrc.c:		/*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
lib/pointsrc.c:		tmax = iwave_max(tmpt0 + tmpnt * tmpdt, tg->t0 + tg->nt * ((m->tsind).dt));
lib/pointsrc.c:		tr->n = (int)(tmax/((m->tsind).dt)) + 1;
lib/pointsrc.c:		tr->w = (ireal *)usermalloc_(sizeof(ireal)*(tr->n));
lib/pointsrc.c:		lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
lib/pointsrc.c:		for (i = tmpnt; i < lnt; i++) resc[i] = trsrc.data[tmpnt-1];
lib/pointsrc.c:			/* integrate once - trapezoidal rule in-place 
lib/pointsrc.c:				w[j] <- sum_{i=1}^{i=j} 0.5*dt*(w[i-1]+w[i])
lib/pointsrc.c:			tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
lib/pointsrc.c:				fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c:			tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
lib/pointsrc.c:				fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c:			/* check that reference distance is positive - only legal option */
lib/pointsrc.c:		if (tr->srcin_flag) {
lib/pointsrc.c:			tr->w = getrick( &iw, (m->tsind).dt, fpeak );
lib/pointsrc.c:			tr->n = 2 * iw+1;
lib/pointsrc.c:			tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
lib/pointsrc.c:			tr->n = 2 * iw+1;
lib/pointsrc.c:		/* source phase - default is zero-phase */
lib/pointsrc.c:		tr->istart = -iw;
lib/pointsrc.c:				tr->istart = -iw;
lib/pointsrc.c:				tr->istart = 0;
lib/pointsrc.c:/*			else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;*/
lib/pointsrc.c:		tr->idbg = 0;
lib/pointsrc.c:		ps_ffint(*par, "dump_wavelet", &(tr->idbg));
lib/pointsrc.c:		if (tr->idbg) {
lib/pointsrc.c:			memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
lib/pointsrc.c:			val.u=1000.0*((m->tsind).dt);
lib/pointsrc.c:			val.h=tr->n;
lib/pointsrc.c:			val.h=((m->tsind).dt)*tr->istart;
lib/pointsrc.c:			if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
lib/pointsrc.c:			fputtr(tr->fpdbg,&trdbg);
lib/pointsrc.c:			fflush(tr->fpdbg);
lib/pointsrc.c:			iwave_fclose(tr->fpdbg);
lib/pointsrc.c:	   - 4 pi c^2 dt (from rhs of equation 9, using kappa/rho=c^2 - RHS of 
lib/pointsrc.c:	   - r (reference distance for normalization, per eqn 13);
lib/pointsrc.c:	   - reference amplitude;
lib/pointsrc.c:	   - reciprocal of cell volume, for delta function.
lib/pointsrc.c:		if (tr->srcin_flag){
lib/pointsrc.c:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:				tr->scramp = refbou * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:				tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:		if (tr->srcin_flag){
lib/pointsrc.c:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:  	if (tr->w) userfree_(&(tr->w)); 
lib/pointsrc.c:  	if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
lib/pointsrc.c:  	if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:	fprintf(stderr,"     evaluating source for iv = %d, it = %d, and istart = %d\n",(m->tsind).iv,(m->tsind).it,tr->istart);
lib/pointsrc.c:	if (tr->srcin_flag){
lib/pointsrc.c:		/* key dimn off velocity field - NO-OP if iv!=1 */
lib/pointsrc.c://		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 1 ) ){
lib/pointsrc.c:		if ( ((m->tsind).it >= tr->istart) &&
lib/pointsrc.c:		     ((m->tsind).it <  tr->istart + tr->n) && 
lib/pointsrc.c:                     ((m->tsind).iv == 1) ){
lib/pointsrc.c:    			for (i=0; i < (m->ld_a)._s[D_V0].ndim; i++) {
lib/pointsrc.c:      				pointsource( tr->is,
lib/pointsrc.c:		  		             tr->rs,
lib/pointsrc.c:		  		             tr->order,
lib/pointsrc.c:		  		             tr->scramp,
lib/pointsrc.c:		  		             tr->src_d[i] * (tr->w)[ (m->tsind).it - tr->istart ],
lib/pointsrc.c:       		  	 	             (m->ld_c)._s[D_V[i]],
lib/pointsrc.c:		/* key dimn off pressure field - NO-OP if iv!=0 */
lib/pointsrc.c:// 		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 0 ) ){
lib/pointsrc.c:		if ( ((m->tsind).it >= tr->istart) &&
lib/pointsrc.c:		     ((m->tsind).it <  tr->istart + tr->n) && 
lib/pointsrc.c:                     ((m->tsind).iv == 0) ){
lib/pointsrc.c:    			for (i=0; i < (m->ld_a)._s[D_P0].ndim; i++) {
lib/pointsrc.c:      				pointsource( tr->is,
lib/pointsrc.c:		  		             tr->rs,
lib/pointsrc.c:		  		             tr->order,
lib/pointsrc.c:		  		             tr->scramp,
lib/pointsrc.c:		  		             (tr->w)[ (m->tsind).it - tr->istart ],
lib/pointsrc.c:       		  	 	             (m->ld_c)._s[D_P[i]],
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c:  	fprintf(fp,"/*---------------------------------------------------------*/\n");
lib/pointsrc.c:	fprintf(fp,"srcin_flag   = %d\n",tr->srcin_flag);
lib/pointsrc.c:	fprintf(fp,"pulse length = %d\n",tr->n);
lib/pointsrc.c:  	fprintf(fp,"istart       = %d\n",tr->istart);
lib/pointsrc.c:  	fprintf(fp,"order        = %d\n",tr->order);
lib/pointsrc.c:	fprintf(fp,"scramp       = %e\n",tr->scramp);
lib/pointsrc.c:      		fprintf(fp,"is[%d]=%d rs[%d]=%e src_d[%d]=%e\n", i, tr->is[i], i, tr->rs[i],i,tr->src_d[i]);
Binary file lib/esgn210_3d.o matches
lib/esgn24_2d.c~:   2-4 stagger finite difference in 2D for isotropic elastic wave
lib/esgn24_2d.c~:#define C24 4.166666666666666666666667e-2
lib/esgn24_2d.c~:// Normal stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c~:// Shear stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c~://Velocity component vz updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c~://Velocity component vx updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:  	/* sanity test - storage mode */
lib/esgn24_2d.c~:  	if ((dom->_s)[D_P0]._dims[0].n > NSTORE) return E_NOTIMESTEP;
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:	s = dom->_s;
lib/esgn24_2d.c~:	rs = rdom->_s;
lib/esgn24_2d.c~:	cs = cdom->_s;
lib/esgn24_2d.c~:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c~:	lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c~:	lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c~:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c~:		gye_pml_I = gys-1;
lib/esgn24_2d.c~:		gxe_pml_III = gxs-1;
lib/esgn24_2d.c~:		px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:		py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:		px_pml_I_a   = tsz * ld_pml[0]._s[D_P0]._dims[0].n0-nx;
lib/esgn24_2d.c~:		py_pml_I_a   = tsz * ld_pml[0]._s[D_P1]._dims[0].n0-nx;
lib/esgn24_2d.c~:		px_pml_II_a  = tsz * ld_pml[2]._s[D_P0]._dims[0].n0-nx;
lib/esgn24_2d.c~:		py_pml_II_a  = tsz * ld_pml[2]._s[D_P1]._dims[0].n0-nx;
lib/esgn24_2d.c~:		px_pml_III_a = tsz * ld_pml[4]._s[D_P0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c~:		py_pml_III_a = tsz * ld_pml[4]._s[D_P1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c~:		px_pml_IV_a  = tsz * ld_pml[6]._s[D_P0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c~:		py_pml_IV_a  = tsz * ld_pml[6]._s[D_P1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c~:		mp00_a       = tsz * s[D_MP00]._dims[0].n0 - nx;
lib/esgn24_2d.c~:		mp01_a       = tsz * s[D_MP01]._dims[0].n0 - nx;
lib/esgn24_2d.c~:		vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:		vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:			fprintf(stderr,"starting and ending y-axis pml_I indexes: (%d,%d)\n",gys_pml_I,gye_pml_I);
lib/esgn24_2d.c~:	_px     = s[D_P0]._s + (gxs - s[D_P0 ]._dims[0].gs) + (gys - s[D_P0 ]._dims[1].gs + tid) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c~:	_py     = s[D_P1]._s + (gxs - s[D_P1 ]._dims[0].gs) + (gys - s[D_P1 ]._dims[1].gs + tid) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c~:	_px_x_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_x_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	_px_y_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_y_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	_mp00   = cs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c~:	_mp01   = cs[D_MP01]._s + (gxs - s[D_MP01]._dims[0].gs) + (gys - s[D_MP01]._dims[1].gs + tid) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c~:	_vx3    = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0 + 1;
lib/esgn24_2d.c~:	_vy2    = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:	_vy1    = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:	_vy0    = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:	_epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c~:	_epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c~:		vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c~:			dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c~:			dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:			(*_px_x_I) = ((*_px_x_I) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c~:			(*_py_x_I) = ((*_py_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c~:			(*_px_y_I) = ((*_px_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_2d.c~:			(*_py_y_I) = ((*_py_y_I) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_2d.c~:			/* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:			index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c~:			index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c~:		_epx    -= nx; 
lib/esgn24_2d.c~:	index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c~:	index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c~:	_px   += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c~:	_py   += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c~:	_mp00 += (gye_pml_I + 1 + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c~:	_mp01 += (gye_pml_I + 1 + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c~:	_vx3  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:	_vy2  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:	_vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:	_vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:	_epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:	_epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c~:	_px_x_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_x_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	_px_y_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_y_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	_px_x_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_x_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	_px_y_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:	_py_y_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:	index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c~:	index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c~:	index_x = (_px_x_III - s_pml[D_P0]._s) % s_pml[D_P0]._dims[0].n0 + s_pml[D_P0]._dims[0].gs;
lib/esgn24_2d.c~:	index_y = (_px_x_III - s_pml[D_P0]._s) / s_pml[D_P0]._dims[1].n0 + s_pml[D_P0]._dims[1].gs;
lib/esgn24_2d.c~:	vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c~:	for ( _pxend = _px + gxe_pml_III-gxs_pml_III+1; _px < _pxend; )
lib/esgn24_2d.c~:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c~:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:		(*_px_x_III) = ((*_px_x_III) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c~:		(*_py_x_III) = ((*_py_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c~:		/* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:	for ( _pxend = _px + gxs_pml_IV-gxe_pml_III-1; _px < _pxend; )
lib/esgn24_2d.c~:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c~:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:	for ( _pxend = _px + gxe_pml_IV-gxs_pml_IV+1; _px < _pxend; )
lib/esgn24_2d.c~:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c~:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:		(*_px_x_IV) = ((*_px_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c~:		(*_py_x_IV) = ((*_py_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c~:	_vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx;
lib/esgn24_2d.c~:    _px   += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _py   += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _mp00 += (gys_pml_II + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c~:    _mp01 += (gys_pml_II + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c~:    _vx3  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vy2  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c~:    _px_x_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:    _py_x_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _px_y_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c~:    _py_y_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:      vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c~:        dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:	(*_px_x_II) = ((*_px_x_II) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_py_x_II) = ((*_py_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_px_y_II) = ((*_px_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_2d.c~:        (*_py_y_II) = ((*_py_y_II) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:  s = dom->_s;
lib/esgn24_2d.c~:  rs = rdom->_s;
lib/esgn24_2d.c~:  cs = cdom->_s;
lib/esgn24_2d.c~:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c~:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c~:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c~:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c~:    gye_pml_I = gys-1;
lib/esgn24_2d.c~:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c~:      sxy_a         = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      ms0_a         = tsz * s[D_MS0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      vx_a          = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      vy_a          = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      sxy_pml_I_a   = tsz * ld_pml[0]._s[D_S0]._dims[0].n0-nx;
lib/esgn24_2d.c~:      sxy_pml_II_a  = tsz * ld_pml[2]._s[D_S0]._dims[0].n0-nx;   
lib/esgn24_2d.c~:      sxy_pml_III_a = tsz * ld_pml[4]._s[D_S0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);  
lib/esgn24_2d.c~:      sxy_pml_IV_a  = tsz * ld_pml[6]._s[D_S0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c~:    _sxy     = s[D_S0]._s + (gxs - s[D_S0 ]._dims[0].gs) + (gys - s[D_S0 ]._dims[1].gs + tid) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_x_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_y_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _ms0     = cs[D_MS0]._s + (gxs - s[D_MS0]._dims[0].gs) + (gys - s[D_MS0]._dims[1].gs + tid) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c~:    _vy3     = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0 + 2;
lib/esgn24_2d.c~:    _vx1     = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx0     = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx     = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c~:    _epy     = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c~:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c~:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_sxy_x_I) = ((*_sxy_x_I) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_sxy_y_I) = ((*_sxy_y_I) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_2d.c~:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:    _sxy  += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _ms0  += (gye_pml_I + 1 + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c~:    _vy3  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vx2  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c~:    _sxy_x_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_y_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_x_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_y_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c~:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c~:      for ( _sxyend = _sxy + gxe_pml_III-gxs_pml_III+1; _sxy < _sxyend; )
lib/esgn24_2d.c~:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_sxy_x_III) = ((*_sxy_x_III) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      for ( _sxyend = _sxy + gxs_pml_IV-gxe_pml_III-1; _sxy < _sxyend; )
lib/esgn24_2d.c~:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c~:      for ( _sxyend = _sxy + gxe_pml_IV-gxs_pml_IV+1; _sxy < _sxyend; )
lib/esgn24_2d.c~:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_sxy_x_IV) = ((*_sxy_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx;
lib/esgn24_2d.c~:    _sxy  += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _ms0  += (gys_pml_II + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c~:    _vy3  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vx2  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c~:    _sxy_x_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy_y_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c~:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_sxy_x_II) = ((*_sxy_x_II) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_sxy_y_II) = ((*_sxy_y_II) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_2d.c~:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:  s = dom->_s;
lib/esgn24_2d.c~:  rs = rdom->_s;
lib/esgn24_2d.c~:  cs = cdom->_s;
lib/esgn24_2d.c~:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c~:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c~:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c~:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c~:    gye_pml_I = gys-1;
lib/esgn24_2d.c~:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c~:      vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      vx_pml_I_a   = tsz * ld_pml[0]._s[D_V0]._dims[0].n0-nx;
lib/esgn24_2d.c~:      vx_pml_II_a  = tsz * ld_pml[2]._s[D_V0]._dims[0].n0-nx; 
lib/esgn24_2d.c~:      vx_pml_III_a = tsz * ld_pml[4]._s[D_V0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c~:      vx_pml_IV_a  = tsz * ld_pml[6]._s[D_V0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c~:      mvx_a        = tsz * s[D_MV0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:    _vx     = s[D_V0]._s + (gxs - s[D_V0 ]._dims[0].gs) + (gys - s[D_V0 ]._dims[1].gs + tid) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_x_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_y_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _mvx    = cs[D_MV0]._s + (gxs - s[D_MV0]._dims[0].gs) + (gys - s[D_MV0]._dims[1].gs + tid) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c~:    _px3    = rs[D_P0]._s + (gxs - s[D_P0]._dims[0].gs) + (gys - s[D_P0]._dims[1].gs + tid) * s[D_P0]._dims[0].n0 + 2;
lib/esgn24_2d.c~:    _sxy2   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy1   = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy0   = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx    = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c~:    _epy    = rs[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c~:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c~:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:	(*_vx_x_I) = ((*_vx_x_I) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_vx_y_I) = ((*_vx_y_I) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:    _vx   += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _mvx  += (gye_pml_I + 1 + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c~:    _px3  += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy2 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c~:    _vx_x_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_y_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_x_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_y_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c~:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c~:      for ( _vxend = _vx + gxe_pml_III-gxs_pml_III+1; _vx < _vxend; )
lib/esgn24_2d.c~:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:	(*_vx_x_III) = ((*_vx_x_III) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      for ( _vxend = _vx + gxs_pml_IV-gxe_pml_III-1; _vx < _vxend; )
lib/esgn24_2d.c~:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:      for ( _vxend = _vx + gxe_pml_IV-gxs_pml_IV+1; _vx < _vxend; )
lib/esgn24_2d.c~:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vx_x_IV) = ((*_vx_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx;
lib/esgn24_2d.c~:    _vx   += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _mvx  += (gys_pml_II + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c~:    _px3  += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy2 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c~:    _vx_x_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:    _vx_y_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c~:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c~:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vx_x_II) = ((*_vx_x_II) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_vx_y_II) = ((*_vx_y_II) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c~:  s = dom->_s;
lib/esgn24_2d.c~:  rs = rdom->_s;
lib/esgn24_2d.c~:  cs = cdom->_s;
lib/esgn24_2d.c~:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c~:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c~:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c~:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c~:    gye_pml_I = gys-1;
lib/esgn24_2d.c~:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c~:      vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      vy_pml_I_a   = tsz * ld_pml[0]._s[D_V1]._dims[0].n0-nx;
lib/esgn24_2d.c~:      vy_pml_II_a  = tsz * ld_pml[2]._s[D_V1]._dims[0].n0-nx;
lib/esgn24_2d.c~:      vy_pml_III_a = tsz * ld_pml[4]._s[D_V1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c~:      vy_pml_IV_a  = tsz * ld_pml[6]._s[D_V1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c~:      mvy_a        = tsz * s[D_MV1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn24_2d.c~:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c~:    _vy     = s[D_V1]._s + (gxs - s[D_V1 ]._dims[0].gs) + (gys - s[D_V1 ]._dims[1].gs + tid) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_x_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_y_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _mvy    = cs[D_MV1]._s + (gxs - s[D_MV1]._dims[0].gs) + (gys - s[D_MV1]._dims[1].gs + tid) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy3   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0 + 1;
lib/esgn24_2d.c~:    _py1    = rs[D_P1]._s + (gxs - s[D_P1]._dims[0].gs) + (gys - s[D_P1]._dims[1].gs + tid) * s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _py0    = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _epx    = rs[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c~:    _epy    = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c~:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c~:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c~:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vy_x_I) = ((*_vy_x_I) * (1.0f -etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_vy_y_I) = ((*_vy_y_I) * (1.0f -etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:    _vy   += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _mvy  += (gye_pml_I + 1 + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy3 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _py2  += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c~:    _vy_x_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_y_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_x_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_y_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c~:      for ( _vyend = _vy + gxe_pml_III-gxs_pml_III+1; _vy < _vyend; )
lib/esgn24_2d.c~:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vy_x_III) = ((*_vy_x_III) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      for ( _vyend = _vy + gxs_pml_IV-gxe_pml_III-1; _vy < _vyend; )
lib/esgn24_2d.c~:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c~:      for ( _vyend = _vy + gxe_pml_IV-gxs_pml_IV+1; _vy < _vyend; )
lib/esgn24_2d.c~:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vy_x_IV) = ((*_vy_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx;
lib/esgn24_2d.c~:    _vy   += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _mvy  += (gys_pml_II + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c~:    _sxy3 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c~:    _py2  += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c~:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c~:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c~:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c~:    _vy_x_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    _vy_y_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c~:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c~:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c~:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c~:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c~:        (*_vy_x_II) = ((*_vy_x_II) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c~:        (*_vy_y_II) = ((*_vy_y_II) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_2d.c~:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c~:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:   2-4 stagger finite difference in 2D for isotropic elastic wave
lib/esgn24_2d_mod.c~:#define C24 4.166666666666666666666667e-2
lib/esgn24_2d_mod.c~:// 	+	||----------------------------------------------||	 +
lib/esgn24_2d_mod.c~:// 	+	------------------------------------------------||	 +
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:	s = dom->_s;
lib/esgn24_2d_mod.c~:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c~:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c~:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c~:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c~:		width[0]  = n_[0]-1;
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:				vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:				vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_px_x_I[ i_[1] ][ i_[0] ] = ( _px_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_py_x_I[ i_[1] ][ i_[0] ] = ( _py_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_px_y_I[ i_[1] ][ i_[0] ] = ( _px_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:				_py_y_I[ i_[1] ][ i_[0] ] = ( _py_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c~:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c~:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c~:	offset_V0_IV[0]  = n_[0] - pml_IV_width_x + gs_V0[0];
lib/esgn24_2d_mod.c~:	offset_V1_IV[0]  = n_[0] - pml_IV_width_x + gs_V1[0];
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_px_x_III[ i_[1] ][ i_[0] ] = ( _px_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:			_py_x_III[ i_[1] ][ i_[0] ] = ( _py_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:		for ( index[0] = 0; index[0] < pml_IV_width_x-1; index[0]++ ){
lib/esgn24_2d_mod.c~:// if( index[0]==pml_IV_width_x-1-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_px_x_IV[ i_[1] ][ i_[0] ] = ( _px_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:			_py_x_IV[ i_[1] ][ i_[0] ] = ( _py_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:		width[0] = n_[0]-1;
lib/esgn24_2d_mod.c~:		width[1] = pml_II_width_y-1;
lib/esgn24_2d_mod.c~:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c~:		offset_V0[1] = n_[1] - pml_II_width_y + gs_V0[1] + tid;
lib/esgn24_2d_mod.c~:		offset_V1[1] = n_[1] - pml_II_width_y + gs_V1[1] + tid;
lib/esgn24_2d_mod.c~:		//main loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:				vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:				vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_px_x_II[ i_[1] ][ i_[0] ] = ( _px_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_py_x_II[ i_[1] ][ i_[0] ] = ( _py_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_px_y_II[ i_[1] ][ i_[0] ] = ( _px_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:				_py_y_II[ i_[1] ][ i_[0] ] = ( _py_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[0]  = n_[0] - 1; //excluding corners!
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			_px[ i_[1] ][ i_[0] ] = ( _px[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) + dfdx*aux ) / (1.0f + etaxdt);	
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:	width[0]  = n_[0] - 1;//excluding corners!
lib/esgn24_2d_mod.c~:	i_[1]   = n_[1]-1 + offset_[1];
lib/esgn24_2d_mod.c~:	i_V0[1] = n_[1]-1 + offset_V0[1];
lib/esgn24_2d_mod.c~:	i_V1[1] = n_[1]-1 + offset_V1[1];
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			_px[ i_[1] ][ i_[0] ] = ( _px[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) + dfdx*aux ) / (1.0f + etaxdt);	
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c~:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:	width[1]  = n_[1] - 1;//excluding corners!
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c~:			_py[ i_[1] ][ i_[0] ] = ( _py[ i_[1] ][ i_[0] ]*(1.0f - etaydt) + dfdy*aux ) / (1.0f + etaydt);	
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c~:	width[1] = n_[1] - 1;//excluding corners!
lib/esgn24_2d_mod.c~:	i_[0]    = n_[0]-1 + offset_[0];
lib/esgn24_2d_mod.c~:	i_V0[0]  = n_[0]-1 + offset_V0[0];
lib/esgn24_2d_mod.c~:	i_V1[0]  = n_[0]-1 + offset_V1[0];
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c~:			_py[ i_[1] ][ i_[0] ] = ( _py[ i_[1] ][ i_[0] ]*(1.0f - etaydt) + dfdy*aux ) / (1.0f + etaydt);	
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c~:	width[1] = s[D_P1]._dims[1].gs - s[D_P1]._dims[1].gs0; //halo y-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		i_[1] = offset_[1] - index[1];
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c~:			_py[ i_[1] ][ i_[0] ] = - _py[ offset_[1]+index[1] ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c~:	width[1] = s[D_P1]._dims[1].ge0 - s[D_P1]._dims[1].ge; //halo y-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c~:			_py[ i_[1] ][ i_[0] ] = - _py[ offset_[1]-index[1] ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c~:	width[0] = s[D_P0]._dims[0].gs - s[D_P0]._dims[0].gs0; //halo x-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:			i_[0] = offset_[0] - index[0];
lib/esgn24_2d_mod.c~:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			_px[ i_[1] ][ i_[0] ] = - _px[ i_[1] ][ offset_[0]+index[0] ]; //odd extension
lib/esgn24_2d_mod.c~:	width[0] = s[D_P0]._dims[0].ge0 - s[D_P0]._dims[0].ge; //halo x-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			_px[ i_[1] ][ i_[0] ] = - _px[ i_[1] ][ offset_[0]-index[0] ]; //odd extension
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:	s = dom->_s;
lib/esgn24_2d_mod.c~:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c~:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c~:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c~:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:				vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_sxy_x_I[ i_[1] ][ i_[0] ] = ( _sxy_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_sxy_y_I[ i_[1] ][ i_[0] ] = ( _sxy_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c~:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c~:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c~:	offset_V0_IV[0]  = n_[0] - pml_IV_width_x + gs_V0[0];
lib/esgn24_2d_mod.c~:	offset_V1_IV[0]  = n_[0] - pml_IV_width_x + gs_V1[0];
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_sxy_x_III[ i_[1] ][ i_[0] ] = ( _sxy_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:// if( index[0]==pml_IV_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_sxy_x_IV[ i_[1] ][ i_[0] ] = ( _sxy_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c~:		offset_V0[1] = n_[1] - pml_II_width_y + gs_V0[1] + tid;
lib/esgn24_2d_mod.c~:		offset_V1[1] = n_[1] - pml_II_width_y + gs_V1[1] + tid;
lib/esgn24_2d_mod.c~:		//main loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c~:				vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_sxy_x_II[ i_[1] ][ i_[0] ] = ( _sxy_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_sxy_y_II[ i_[1] ][ i_[0] ] = ( _sxy_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[1] = gs_[1] - s[D_S0]._dims[1].gs0; //halo y-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		i_[1] = offset_[1] - index[1];
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c~:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ offset_[1]+index[1]-1 ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c~:	width[1] = s[D_S0]._dims[1].ge0 - s[D_S0]._dims[1].ge; //halo y-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c~:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ offset_[1]-index[1]+1 ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c~:	width[0] = gs_[0] - s[D_S0]._dims[0].gs0; //halo x-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:			i_[0] = offset_[0] - index[0];
lib/esgn24_2d_mod.c~:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ i_[1] ][ offset_[0]+index[0]-1 ]; //odd extension
lib/esgn24_2d_mod.c~:	width[0] = s[D_S0]._dims[0].ge0 - s[D_S0]._dims[0].ge; //halo x-width
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:		//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ i_[1] ][ offset_[0]-index[0]+1 ]; //odd extension
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:	s = dom->_s;
lib/esgn24_2d_mod.c~:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c~:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c~:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c~:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:				px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c~:				sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:				sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_vx_x_I[ i_[1] ][ i_[0] ] = ( _vx_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_vx_y_I[ i_[1] ][ i_[0] ] = ( _vx_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c~:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c~:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c~:	offset_P0_IV[0]  = n_[0] - pml_IV_width_x + gs_P0[0];
lib/esgn24_2d_mod.c~:	offset_S0_IV[0]  = n_[0] - pml_IV_width_x + gs_S0[0];
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_vx_x_III[ i_[1] ][ i_[0] ] = ( _vx_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_vx_x_IV[ i_[1] ][ i_[0] ] = ( _vx_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:		offset_[1]   = n_[1]   - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c~:		offset_P0[1] = n_[1] - pml_II_width_y + gs_P0[1] + tid;
lib/esgn24_2d_mod.c~:		offset_S0[1] = n_[1] - pml_II_width_y + gs_S0[1] + tid;
lib/esgn24_2d_mod.c~:		//main loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:				px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c~:				sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:				sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_vx_x_II[ i_[1] ][ i_[0] ] = ( _vx_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_vx_y_II[ i_[1] ][ i_[0] ] = ( _vx_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c~:	s = dom->_s;
lib/esgn24_2d_mod.c~:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c~:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c~:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c~:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c~:		//loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c~:				sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c~:				py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_vy_x_I[ i_[1] ][ i_[0] ] = ( _vy_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_vy_y_I[ i_[1] ][ i_[0] ] = ( _vy_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c~:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c~:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c~:	offset_IV [0]    = n_[0] - pml_IV_width_x + gs_ [0];
lib/esgn24_2d_mod.c~:	offset_S0_IV[0]  = n_[0] - pml_IV_width_x + gs_S0[0];
lib/esgn24_2d_mod.c~:	offset_P1_IV[0]  = n_[0] - pml_IV_width_x + gs_P1[0];
lib/esgn24_2d_mod.c~:	//loop in y-direction
lib/esgn24_2d_mod.c~:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c~:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_vy_x_III[ i_[1] ][ i_[0] ] = ( _vy_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c~:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:// if( index[0]==pml_IV_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c~:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c~:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c~:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:			_vy_x_IV[ i_[1] ][ i_[0] ] = ( _vy_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c~:		offset_S0[1] = n_[1] - pml_II_width_y + gs_S0[1] + tid;
lib/esgn24_2d_mod.c~:		offset_P1[1] = n_[1] - pml_II_width_y + gs_P1[1] + tid;
lib/esgn24_2d_mod.c~:		//main loop in y-direction
lib/esgn24_2d_mod.c~:			//loop in x-direction
lib/esgn24_2d_mod.c~:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c~:				sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c~:				sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c~:				py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c~:				dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c~:				dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c~:				_vy_x_II[ i_[1] ][ i_[0] ] = ( _vy_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c~:				_vy_y_II[ i_[1] ][ i_[0] ] = ( _vy_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
Binary file lib/esgn24_2d_mod.o matches
Binary file lib/esgn24_3d.o matches
lib/esgn_model.c:/*------------------- private data declarations ----------------------------*/
lib/esgn_model.c:static int m_ndim = 0; /* dimension - need only compute once */
lib/esgn_model.c:// /*--- private function declarations - assigned to FD_MODEL pointers ----------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  if (ind>-1 && ind<m_size) return m_names[ind];
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:    IPNT cpers;          /* workspace for periodic wrap info  - currently not used */
lib/esgn_model.c:  /* decode dimension - only on rk 0 */
lib/esgn_model.c:  im->specs=(void *)fd;
lib/esgn_model.c:	    fprintf(stream,"ERROR: in esgn_modelinit - failed to read spatial geometry\n");
lib/esgn_model.c:    fprintf(stream,"ERROR: in esg_modelinit - failed to read dim=%d\n",m_ndim);
lib/esgn_model.c:  /* decode order - take care of deprecated cases */
lib/esgn_model.c:  esgnp->k=1;
lib/esgn_model.c: ps_flint(*pars,"order",&(esgnp->k));
lib/esgn_model.c:    fprintf(stream,"NOTE: initializing ESG with half-order = %d\n",esgnp->k);
lib/esgn_model.c:/*   if (ps_ffint(*pars,"order",&(esgnp->k))) { */
lib/esgn_model.c:/*     fprintf(stream," RN: read k and is %d \n",esgnp->k); */
lib/esgn_model.c:/*     /\* old-style iwave specs - deprecated *\/ */
lib/esgn_model.c:/*       if (!strcmp(jnk,"22")) esgnp->k=1; */
lib/esgn_model.c:/*       else if (!strcmp(jnk,"24")) esgnp->k=2; */
lib/esgn_model.c:/*       else if (!strcmp(jnk,"210")) esgnp->k=5; */
lib/esgn_model.c:/* 	  if ((err=ps_ffint(*pars,"k_phys",&(esgnp->k)))) { */
lib/esgn_model.c:/*   /\* sanity-check order *\/ */
lib/esgn_model.c:/*   if (esgnp->k<1 || esgnp->k>8) { */
lib/esgn_model.c:/*     fprintf(stream,"half-order param = %d not in allowed range [1,7]\n",esgnp->k); */
lib/esgn_model.c:  fd->fdpars 		= (void*)esgnp;
lib/esgn_model.c:  fd->isarr 		= esg_isarr;
lib/esgn_model.c:  fd->numsubsteps 	= esg_numsubsteps;
lib/esgn_model.c:  fd->update 		= esg_update;
lib/esgn_model.c:  fd->readgrid 		= esg_readgrid;
lib/esgn_model.c:  fd->readtimegrid 	= esg_readtimegrid; 
lib/esgn_model.c:  fd->readschemeinfo 	= esg_readschemeinfo;
lib/esgn_model.c:  fd->set_grid_type 	= esg_set_grid_type;
lib/esgn_model.c:  fd->build_sten_dep 	= esg_build_sten_dep;
lib/esgn_model.c:  fd->create_sten 	= esg_create_sten;
lib/esgn_model.c:  fd->ind2str 		= esg_ind2str;
lib/esgn_model.c:  fd->alter_dom 	= esg_alter_dom;
lib/esgn_model.c:  fd->readmedia		= esgn_readmedia;
lib/esgn_model.c:  fd->parcopy 		= esgn_ts_parcopy;
lib/esgn_model.c:  fd->fd_model_init 	= esg_modelinit;
lib/esgn_model.c:  fd->fd_model_dest 	= esg_modeldest;
lib/esgn_model.c:  fd->tsf = esg_step;
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  FD_MODEL * fdm = (FD_MODEL *)(model->specs);
lib/esgn_model.c:    if (fdm->fdpars) {
lib/esgn_model.c:      esgnp=(ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c:      ld_pml = esgnp->ld_pml;
lib/esgn_model.c:      if (esgnp->ld_pml) userfree_(ld_pml); //MB replaced: free(ld_pml);
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  ptgt->dt=psrc->dt;
lib/esgn_model.c:    (ptgt->lam)[i]=(psrc->lam)[i];
lib/esgn_model.c:  ptgt->ndim=psrc->ndim;
lib/esgn_model.c:  ptgt->k = psrc->k;
lib/esgn_model.c:  ptgt->ld_pml = psrc->ld_pml;
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  /* one-dimensionalize the eta arrays */
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:        fprintf(stream, "using PRIMAL grid on axis-%d\n", i);
lib/esgn_model.c:        fprintf(stream, "using DUAL   grid on axis-%d\n", i);
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c: * relation type: dependent of value -> DEP_F
lib/esgn_model.c: *                dependent of 1st derivative wrt axis-z -> DEP_DFDZ
lib/esgn_model.c: *                dependent of 1st derivative wrt axis-x -> DEP_DFDX
lib/esgn_model.c: *                dependent of 1st derivative wrt axis-y -> DEP_DFDY
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c:/*       int op = fdm->sten_dep_mat[ir][ip]; */
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  /* fdm = (FD_MODEL*)(model->specs); */
lib/esgn_model.c:  ndim = model->g.dim;
lib/esgn_model.c:  nss = ndim*(ndim-1)/2;
lib/esgn_model.c:  dc = &(model->ld_c); /* get computational domain */
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c:  return create_sten2_2k(fdm,stream, esgnp->k, ndim, gtype, sten_dep_mat,sten);
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:  FD_MODEL * fdm = (FD_MODEL *)(model->specs); 
lib/esgn_model.c:  ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c:  get_d(dxs, model->g);
lib/esgn_model.c:  get_n(ns, model->g);
lib/esgn_model.c:  esgnp->ndim = ndim = (model->g).dim;
lib/esgn_model.c:  for (idim = 0;idim < esgnp->ndim;idim ++) {
lib/esgn_model.c:    esgnp->lam[idim] = (model->tsind).dt / dxs[idim];
lib/esgn_model.c:    fprintf(stderr, "lam[%d] = %g\n", idim, esgnp->lam[idim]);
lib/esgn_model.c:  esgnp->dt = (model->tsind).dt;
lib/esgn_model.c:  //MB repalced: esgnp->ld_pml = (RDOM *)malloc(2*ndim*ndim*sizeof(RDOM));
lib/esgn_model.c:  esgnp->ld_pml = (RDOM *)usermalloc_(2*ndim*ndim*sizeof(RDOM));
lib/esgn_model.c:  ld_pml = esgnp->ld_pml;
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      dgea[iv][1] = iwave_min(gec[1], -1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      if (gec[1] <= ns[1]-1)  continue;
lib/esgn_model.c:      dgsa[iv][1] = iwave_max(gsc[1], ns[1]-1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      dgea[iv][0] = iwave_min(gec[0], -1);  
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      if (gec[0] <= ns[0]-1)  continue;
lib/esgn_model.c:      dgsa[iv][0] = iwave_max(gsc[0], ns[0]-1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      dgea[iv][2] = iwave_min(gec[2], -1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      if (gec[2] <= ns[2]-1)  continue;
lib/esgn_model.c:      dgsa[iv][2] = iwave_max(gsc[2], ns[2]-1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      dgea[iv][1] = iwave_min(gec[1], -1);  
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      if (gec[1] <= ns[1]-1)  continue;
lib/esgn_model.c:      dgsa[iv][1] = iwave_max(gsc[1], ns[1]-1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      dgea[iv][0] = iwave_min(gec[0], -1);
lib/esgn_model.c:      rd_gse(&(model->ld_c), iv, gsc, gec);
lib/esgn_model.c:      if (gec[0] <= ns[0]-1)  continue;
lib/esgn_model.c:      dgsa[iv][0] = iwave_max(gsc[0], ns[0]-1);
lib/esgn_model.c:      ra_zero(&(esgnp->ld_pml[i]._s[iv]));
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:	FD_MODEL * fdm = (FD_MODEL *)(model->specs); 
lib/esgn_model.c:  	ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c:  	int ndim = (model->g).dim;  
lib/esgn_model.c:      			ra_zero(&(esgnp->ld_pml[i]._s[iv]));
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:/*----------------------------------------------------------------------------*/
lib/esgn_model.c:	FD_MODEL * fdm = (FD_MODEL *)(model->specs);
lib/esgn_model.c:    	ESGN_TS_PARS * esgnp = (ESGN_TS_PARS *)(fdm->fdpars);
lib/esgn_model.c:	int tot = (model->g.dim) * (model->g.dim) * 2;
lib/esgn_model.c:    		rd_a_dump( &(esgnp->ld_pml[i]), stream );
Binary file lib/esgn_model.o matches
lib/esgn_read.c~: * load geometry grid from p-wave, or s-wave velocity, or Lame constants (lambda or mu)
lib/esgn_read.c~:    g->dim = 0;
lib/esgn_read.c~:      g->axes[i].n = tmp;
lib/esgn_read.c~:      if (ps_ffreal(par, key, &(g->axes[i].d)))  g->axes[i].d=1.0;
lib/esgn_read.c~:      if (ps_ffreal(par, key, &(g->axes[i].o)))  g->axes[i].o=0.0;
lib/esgn_read.c~:      if (g->axes[i].n > 1)  g->dim = iwave_max(g->dim,i+1);
lib/esgn_read.c~:      tmp--;
lib/esgn_read.c~:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c~:      g->axes[tmp].id = 0;
lib/esgn_read.c~:      tmp--;
lib/esgn_read.c~:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c~:      g->axes[tmp].id = 1;
lib/esgn_read.c~:      tmp--;
lib/esgn_read.c~:      if (tmp < 0 || tmp > RARR_MAX_NDIM-1) {
lib/esgn_read.c~:      g->axes[tmp].id = 2;
lib/esgn_read.c~:  grid g = model->g;
lib/esgn_read.c~:    fprintf(stream,"NOTE: esg_readtimegrid - using default cmax = %e\n",cmax);
lib/esgn_read.c~:    fprintf(stream,"NOTE: esg_readtimegrid - using default cfl = %e\n",cfl);
lib/esgn_read.c~:    fprintf(stream,"Error: esg_readtimegrid - either min dx=%e or cfl=%e "
lib/esgn_read.c~:  (model->tsind).dt = a*cfl/cmax;
lib/esgn_read.c~:  fprintf(stream, "esg_readtimegrid a = %g  cfl = %g  cmax = %g  dt = %g\n", a, cfl, cmax, (model->tsind).dt);
lib/esgn_read.c~:  RDOM dom = model->ld_a;
lib/esgn_read.c~:   *  mp01 = lambda = vp * vp * rho - 2 * vs * vs * rho
lib/esgn_read.c~:  int is_vel;    /* p-velocity and s-velocity is given */
lib/esgn_read.c~:  ireal cmax = CMAX_DEF; /* max p-velocity from input */
lib/esgn_read.c~:  ireal cmin = CMIN_DEF; /* min p-velocity from input */
lib/esgn_read.c~:  int mult_ms;  /* multiple read flag for mu or s-velocity */
lib/esgn_read.c~:  FD_MODEL * fdm = (FD_MODEL *)model->specs;
lib/esgn_read.c~:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c~:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c~:  ndim = model->g.dim;
lib/esgn_read.c~:            fdm->ind2str(D_MP00), err);
lib/esgn_read.c~:            fdm->ind2str(D_MP00), err);
lib/esgn_read.c~:    fprintf(stream, "Note: esg_readmedia - using default cmax = %e\n", cmax);
lib/esgn_read.c~:    fprintf(stream, "Note: esg_readmedia - using default cmin = %e\n", cmin);
lib/esgn_read.c~:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c~:  /* reference values - first set defaults -----------------------------------*/
lib/esgn_read.c~:  /* lambda mu have the same unit with kappa ---------------------------------*/
lib/esgn_read.c~:  /*--------------------------------------------------------------------------*/
lib/esgn_read.c~:  /* detect which parameters are provided ------------------------------------*/
lib/esgn_read.c~:      reflambda = refpvel*refpvel*refden - 2*refmu;
lib/esgn_read.c~:      reflambda = refpvel*refpvel/refbuoy - 2*refmu;
lib/esgn_read.c~:  /* check reference p-velocity for comformance */
lib/esgn_read.c~:    fprintf(stream, "Error: esg_readmedia - p-velocity out of bounds\n");
lib/esgn_read.c~:   * read Lame constants or p and s-velocity into D_MP00, D_MP01
lib/esgn_read.c~:              fdm->ind2str(D_MP00));
lib/esgn_read.c~:              fdm->ind2str(D_MP01));
lib/esgn_read.c~:      fprintf(stream, "Error: esg_readmedia from rsfread - lambda\n");
lib/esgn_read.c~:    for (i=0; i<(ndim-1)*ndim/2; i++) {
lib/esgn_read.c~:      fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c~:              "Error: esg_readmedia from rsfread - mukey (single) = %s\n", mukey);
lib/esgn_read.c~:      fprintf(stream, "Error: esg_readmedia from rsfread - pvelocity\n");
lib/esgn_read.c~:    for (i=0; i<(ndim-1)*ndim/2; i++) {
lib/esgn_read.c~:      fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c~:              "Error: esg_readmedia from rsfread - svelkey (single) = %s\n", svelkey);
lib/esgn_read.c~:    /* velocity check - performed only in case velocity is read directly */
lib/esgn_read.c~:              "Error: esg_readmedia - pvelocity field read from ");
lib/esgn_read.c~:  /* buoyancy - first look for multiple buoyancy */
lib/esgn_read.c~:                "Error: esg_readmedia from rsfread - buoykey = %s\n", buoykey);
lib/esgn_read.c~:                  "Error: esg_readmedia from rsfread - denkey = %s\n", denkey);
lib/esgn_read.c~:                  "Error: esg_readmedia from rsfread - rhokey = %s\n", rhokey);
lib/esgn_read.c~:              "Error: esg_readmedia from rsfread - mukey = %s\n", mukey);
lib/esgn_read.c~:        fprintf(stream, "Error: esg_readmedia from rsfread - cannot allocate tmp0 array\n");
lib/esgn_read.c~:                  "Error: esg_readmedia from rsfread - buoykey (single) = %s\n", buoykey);
lib/esgn_read.c~:                    "Error: esg_readmedia from rsfread - denkey = %s\n", denkey);
lib/esgn_read.c~:                    "Error: esg_readmedia from rsfread - rhokey = %s\n", rhokey);
lib/esgn_read.c~:            rd_gset(&dom, D_MP01, ii, q-2*q1);            
lib/esgn_read.c~:      for (i = 0;i < ndim*(ndim-1)/2;i ++) {
lib/esgn_read.c~:      for (i = 0;i < ndim*(ndim-1)/2;i ++) {
lib/esgn_read.c~:                q2 = ra_gget(&B1tmp, ii);  /* s-velocity */
lib/esgn_read.c~:                  q2 = ra_gget(&B1tmp, kk);  /* s-velocity */
lib/esgn_read.c~:/*----------------------------------------------------------------------------*/
lib/esgn_read.c~:  dom = &(model->ld_a);
lib/esgn_read.c~:  ndim = model->g.dim;
lib/esgn_read.c~:  /* read cmax -------------------------------------------------------------*/
lib/esgn_read.c~:    fprintf(stream,"NOTE: esgn_setetas - using default cmax = %e\n",cmax);
lib/esgn_read.c~:  /* read pml amplitude ----------------------------------------------------*/
lib/esgn_read.c~:    dd = model->g.axes[idim].d;
lib/esgn_read.c~:    v1 = v0 + dd * (ireal)(model->g.axes[idim].n - 1);
lib/esgn_read.c~:    L0 = model->nls[idim] * dd; /* PML width in ireal length units */
lib/esgn_read.c~:    L1 = model->nrs[idim] * dd; /* PML width in ireal length units */
lib/esgn_read.c~:        s = (s - v0) / L0;
lib/esgn_read.c~:        s = (s - v1) / L1;
lib/esgn_read.c~:        s = (s - v0) / L0;
lib/esgn_read.c~:        s = (s - v1) / L1;
lib/esgn_read.c~:/* helper function - not in header file */
lib/esgn_read.c~:    fprintf(stream,"NOTE: sgn_readpmlgrid - using default fpeak = %e\n",fpeak);
lib/esgn_read.c~:    fprintf(stream,"NOTE: sgn_readpmlgrid - using default cmax = %e\n",cmax);
lib/esgn_read.c~:/*----------------------------------------------------------------------------*/
lib/esgn_read.c~:  sgnm->ns  has IPNT type and contains physical domain size.
lib/esgn_read.c~:  sgnm->nsl has IPNT type and contains left PML domains' sizes.
lib/esgn_read.c~:  sgnm->nsr has IPNT type and contains right PML domains' sizes.
lib/esgn_read.c~:  IASN(model->nls, IPNT_0);  /* default left PML width */
lib/esgn_read.c~:  IASN(model->nrs, IPNT_0);  /* default right PML width */
lib/esgn_read.c~:  if ((err=init_elastic_geom_par(&(model->g),*pars,stream))) {
lib/esgn_read.c~:  get_d(d,model->g);
lib/esgn_read.c~:  err=esg_readpmlgrid(model->nls,model->nrs,d, (model->g).dim, *pars,stream);
Binary file lib/esgsteps.o matches
Binary file lib/esgsteps_mod.o matches
Binary file lib/gauss.o matches
Binary file lib/esgn24_2d.o matches
lib/esgn24_2d.c:   2-4 stagger finite difference in 2D for isotropic elastic wave
lib/esgn24_2d.c:#define C24 4.166666666666666666666667e-2
lib/esgn24_2d.c:// Normal stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c:// Shear stress updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c://Velocity component vz updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c://Velocity component vx updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:  	/* sanity test - storage mode */
lib/esgn24_2d.c:  	if ((dom->_s)[D_P0]._dims[0].n > NSTORE) return E_NOTIMESTEP;
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:	s = dom->_s;
lib/esgn24_2d.c:	rs = rdom->_s;
lib/esgn24_2d.c:	cs = cdom->_s;
lib/esgn24_2d.c:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c:	lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c:	lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c:		gye_pml_I = gys-1;
lib/esgn24_2d.c:		gxe_pml_III = gxs-1;
lib/esgn24_2d.c:		px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn24_2d.c:		py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn24_2d.c:		px_pml_I_a   = tsz * ld_pml[0]._s[D_P0]._dims[0].n0-nx;
lib/esgn24_2d.c:		py_pml_I_a   = tsz * ld_pml[0]._s[D_P1]._dims[0].n0-nx;
lib/esgn24_2d.c:		px_pml_II_a  = tsz * ld_pml[2]._s[D_P0]._dims[0].n0-nx;
lib/esgn24_2d.c:		py_pml_II_a  = tsz * ld_pml[2]._s[D_P1]._dims[0].n0-nx;
lib/esgn24_2d.c:		px_pml_III_a = tsz * ld_pml[4]._s[D_P0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c:		py_pml_III_a = tsz * ld_pml[4]._s[D_P1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c:		px_pml_IV_a  = tsz * ld_pml[6]._s[D_P0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c:		py_pml_IV_a  = tsz * ld_pml[6]._s[D_P1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c:		mp00_a       = tsz * s[D_MP00]._dims[0].n0 - nx;
lib/esgn24_2d.c:		mp01_a       = tsz * s[D_MP01]._dims[0].n0 - nx;
lib/esgn24_2d.c:		vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c:		vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c:			fprintf(stderr,"starting and ending y-axis pml_I indexes: (%d,%d)\n",gys_pml_I,gye_pml_I);
lib/esgn24_2d.c:	_px     = s[D_P0]._s + (gxs - s[D_P0 ]._dims[0].gs) + (gys - s[D_P0 ]._dims[1].gs + tid) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c:	_py     = s[D_P1]._s + (gxs - s[D_P1 ]._dims[0].gs) + (gys - s[D_P1 ]._dims[1].gs + tid) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c:	_px_x_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_x_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	_px_y_I = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_y_I = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	_mp00   = cs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c:	_mp01   = cs[D_MP01]._s + (gxs - s[D_MP01]._dims[0].gs) + (gys - s[D_MP01]._dims[1].gs + tid) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c:	_vx3    = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0 + 1;
lib/esgn24_2d.c:	_vy2    = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:	_vy1    = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:	_vy0    = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:	_epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c:	_epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c:		vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c:			dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c:			dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c:			(*_px_x_I) = ((*_px_x_I) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c:			(*_py_x_I) = ((*_py_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c:			(*_px_y_I) = ((*_px_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_2d.c:			(*_py_y_I) = ((*_py_y_I) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_2d.c:			/* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:			index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c:			index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c:		_epx    -= nx; 
lib/esgn24_2d.c:	index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c:	index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c:	_px   += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c:	_py   += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c:	_mp00 += (gye_pml_I + 1 + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c:	_mp01 += (gye_pml_I + 1 + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c:	_vx3  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:	_vy2  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:	_vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:	_vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:	_epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:	_epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c:	_px_x_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_x_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	_px_y_III = s_pml[D_P0]._s + (gxs_pml_III - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_y_III = s_pml[D_P1]._s + (gxs_pml_III - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	_px_x_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_x_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	_px_y_IV = s_pml[D_P0]._s + (gxs_pml_IV - s_pml[D_P0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:	_py_y_IV = s_pml[D_P1]._s + (gxs_pml_IV - s_pml[D_P1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:	index_x = (_px - s[D_P0]._s) % s[D_P0]._dims[0].n0 + s[D_P0]._dims[0].gs;
lib/esgn24_2d.c:	index_y = (_px - s[D_P0]._s) / s[D_P0]._dims[1].n0 + s[D_P0]._dims[1].gs;
lib/esgn24_2d.c:	index_x = (_px_x_III - s_pml[D_P0]._s) % s_pml[D_P0]._dims[0].n0 + s_pml[D_P0]._dims[0].gs;
lib/esgn24_2d.c:	index_y = (_px_x_III - s_pml[D_P0]._s) / s_pml[D_P0]._dims[1].n0 + s_pml[D_P0]._dims[1].gs;
lib/esgn24_2d.c:	vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c:	for ( _pxend = _px + gxe_pml_III-gxs_pml_III+1; _px < _pxend; )
lib/esgn24_2d.c:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c:		(*_px_x_III) = ((*_px_x_III) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c:		(*_py_x_III) = ((*_py_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c:		/* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:	for ( _pxend = _px + gxs_pml_IV-gxe_pml_III-1; _px < _pxend; )
lib/esgn24_2d.c:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c:	for ( _pxend = _px + gxe_pml_IV-gxs_pml_IV+1; _px < _pxend; )
lib/esgn24_2d.c:		dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c:		dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c:		(*_px_x_IV) = ((*_px_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c:		(*_py_x_IV) = ((*_py_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c:	_vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx;
lib/esgn24_2d.c:    _px   += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c:    _py   += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c:    _mp00 += (gys_pml_II + tid - iy) * s[D_MP00]._dims[0].n0;
lib/esgn24_2d.c:    _mp01 += (gys_pml_II + tid - iy) * s[D_MP01]._dims[0].n0;
lib/esgn24_2d.c:    _vx3  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _vy2  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c:    _px_x_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:    _py_x_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _px_y_II = s_pml[D_P0]._s + (gxs - s_pml[D_P0]._dims[0].gs) + (gys_pml_II - s_pml[D_P0]._dims[1].gs + tid) * s_pml[D_P0]._dims[0].n0;
lib/esgn24_2d.c:    _py_y_II = s_pml[D_P1]._s + (gxs - s_pml[D_P1]._dims[0].gs) + (gys_pml_II - s_pml[D_P1]._dims[1].gs + tid) * s_pml[D_P1]._dims[0].n0;
lib/esgn24_2d.c:      vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_2d.c:        dfdx = (vx0 - vx3 + (vx2 - vx1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vy0++) - (*_vy3++) + ((*_vy2++) - (*_vy1++)) * 27.0) * lay;
lib/esgn24_2d.c:	(*_px_x_II) = ((*_px_x_II) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_py_x_II) = ((*_py_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_px_y_II) = ((*_px_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_2d.c:        (*_py_y_II) = ((*_py_y_II) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _vy1 += vy_a; _vy2 += vy_a; _vy3 += vy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:  s = dom->_s;
lib/esgn24_2d.c:  rs = rdom->_s;
lib/esgn24_2d.c:  cs = cdom->_s;
lib/esgn24_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c:    gye_pml_I = gys-1;
lib/esgn24_2d.c:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c:      sxy_a         = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      ms0_a         = tsz * s[D_MS0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      vx_a          = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      vy_a          = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c:      sxy_pml_I_a   = tsz * ld_pml[0]._s[D_S0]._dims[0].n0-nx;
lib/esgn24_2d.c:      sxy_pml_II_a  = tsz * ld_pml[2]._s[D_S0]._dims[0].n0-nx;   
lib/esgn24_2d.c:      sxy_pml_III_a = tsz * ld_pml[4]._s[D_S0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);  
lib/esgn24_2d.c:      sxy_pml_IV_a  = tsz * ld_pml[6]._s[D_S0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c:    _sxy     = s[D_S0]._s + (gxs - s[D_S0 ]._dims[0].gs) + (gys - s[D_S0 ]._dims[1].gs + tid) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_x_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_y_I = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _ms0     = cs[D_MS0]._s + (gxs - s[D_MS0]._dims[0].gs) + (gys - s[D_MS0]._dims[1].gs + tid) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c:    _vy3     = rs[D_V1]._s + (gxs - s[D_V1]._dims[0].gs) + (gys - s[D_V1]._dims[1].gs + tid) * s[D_V1]._dims[0].n0 + 2;
lib/esgn24_2d.c:    _vx1     = rs[D_V0]._s + (gxs - s[D_V0]._dims[0].gs) + (gys - s[D_V0]._dims[1].gs + tid) * s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx0     = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _epx     = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c:    _epy     = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_sxy_x_I) = ((*_sxy_x_I) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_sxy_y_I) = ((*_sxy_y_I) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:    _sxy  += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _ms0  += (gye_pml_I + 1 + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c:    _vy3  += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _vx2  += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c:    _sxy_x_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_y_III = s_pml[D_S0]._s + (gxs_pml_III - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_x_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_y_IV = s_pml[D_S0]._s + (gxs_pml_IV - s_pml[D_S0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c:      for ( _sxyend = _sxy + gxe_pml_III-gxs_pml_III+1; _sxy < _sxyend; )
lib/esgn24_2d.c:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_sxy_x_III) = ((*_sxy_x_III) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      for ( _sxyend = _sxy + gxs_pml_IV-gxe_pml_III-1; _sxy < _sxyend; )
lib/esgn24_2d.c:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c:      for ( _sxyend = _sxy + gxe_pml_IV-gxs_pml_IV+1; _sxy < _sxyend; )
lib/esgn24_2d.c:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_sxy_x_IV) = ((*_sxy_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx;
lib/esgn24_2d.c:    _sxy  += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _ms0  += (gys_pml_II + tid - iy) * s[D_MS0]._dims[0].n0;
lib/esgn24_2d.c:    _vy3  += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _vx2  += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c:    _sxy_x_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy_y_II = s_pml[D_S0]._s + (gxs - s_pml[D_S0]._dims[0].gs) + (gys_pml_II - s_pml[D_S0]._dims[1].gs + tid) * s_pml[D_S0]._dims[0].n0;
lib/esgn24_2d.c:      vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_2d.c:        dfdx = (vy0 - vy3 + (vy2 - vy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_vx0++) - (*_vx3++) + ((*_vx2++) - (*_vx1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_sxy_x_II) = ((*_sxy_x_II) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_sxy_y_II) = ((*_sxy_y_II) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_2d.c:          /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _vx1 += vx_a; _vx2 += vx_a; _vx3 += vx_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:  s = dom->_s;
lib/esgn24_2d.c:  rs = rdom->_s;
lib/esgn24_2d.c:  cs = cdom->_s;
lib/esgn24_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c:    gye_pml_I = gys-1;
lib/esgn24_2d.c:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c:      vx_a         = tsz * s[D_V0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      vx_pml_I_a   = tsz * ld_pml[0]._s[D_V0]._dims[0].n0-nx;
lib/esgn24_2d.c:      vx_pml_II_a  = tsz * ld_pml[2]._s[D_V0]._dims[0].n0-nx; 
lib/esgn24_2d.c:      vx_pml_III_a = tsz * ld_pml[4]._s[D_V0]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c:      vx_pml_IV_a  = tsz * ld_pml[6]._s[D_V0]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c:      mvx_a        = tsz * s[D_MV0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      px_a         = tsz * s[D_P0]._dims[0].n0 - nx;
lib/esgn24_2d.c:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c:    _vx     = s[D_V0]._s + (gxs - s[D_V0 ]._dims[0].gs) + (gys - s[D_V0 ]._dims[1].gs + tid) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _vx_x_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx_y_I = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _mvx    = cs[D_MV0]._s + (gxs - s[D_MV0]._dims[0].gs) + (gys - s[D_MV0]._dims[1].gs + tid) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c:    _px3    = rs[D_P0]._s + (gxs - s[D_P0]._dims[0].gs) + (gys - s[D_P0]._dims[1].gs + tid) * s[D_P0]._dims[0].n0 + 2;
lib/esgn24_2d.c:    _sxy2   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy1   = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy0   = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _epx    = rs[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c:    _epy    = rs[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c:	(*_vx_x_I) = ((*_vx_x_I) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_vx_y_I) = ((*_vx_y_I) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:    _vx   += (gye_pml_I + 1 + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _mvx  += (gye_pml_I + 1 + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c:    _px3  += (gye_pml_I + 1 + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c:    _sxy2 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EP[1]]._s + (gye_pml_I + 1 + tid - s[D_EP[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c:    _vx_x_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx_y_III = s_pml[D_V0]._s + (gxs_pml_III - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx_x_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx_y_IV = s_pml[D_V0]._s + (gxs_pml_IV - s_pml[D_V0]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c:      for ( _vxend = _vx + gxe_pml_III-gxs_pml_III+1; _vx < _vxend; )
lib/esgn24_2d.c:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c:	(*_vx_x_III) = ((*_vx_x_III) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      for ( _vxend = _vx + gxs_pml_IV-gxe_pml_III-1; _vx < _vxend; )
lib/esgn24_2d.c:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c:      for ( _vxend = _vx + gxe_pml_IV-gxs_pml_IV+1; _vx < _vxend; )
lib/esgn24_2d.c:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vx_x_IV) = ((*_vx_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx;
lib/esgn24_2d.c:    _vx   += (gys_pml_II + tid - iy) * s[D_V0 ]._dims[0].n0;
lib/esgn24_2d.c:    _mvx  += (gys_pml_II + tid - iy) * s[D_MV0]._dims[0].n0;
lib/esgn24_2d.c:    _px3  += (gys_pml_II + tid - iy) * s[D_P0 ]._dims[0].n0;
lib/esgn24_2d.c:    _sxy2 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EP[1]]._s + (gys_pml_II - s[D_EP[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c:    _vx_x_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:    _vx_y_II = s_pml[D_V0]._s + (gxs - s_pml[D_V0]._dims[0].gs) + (gys_pml_II - s_pml[D_V0]._dims[1].gs + tid) * s_pml[D_V0]._dims[0].n0;
lib/esgn24_2d.c:      px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_2d.c:        dfdx = (px0 - px3 + (px2 - px1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_sxy0++) - (*_sxy3++) + ((*_sxy2++) - (*_sxy1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vx_x_II) = ((*_vx_x_II) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_vx_y_II) = ((*_vx_y_II) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _sxy1 += sxy_a; _sxy2 += sxy_a; _sxy3 += sxy_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d.c:  s = dom->_s;
lib/esgn24_2d.c:  rs = rdom->_s;
lib/esgn24_2d.c:  cs = cdom->_s;
lib/esgn24_2d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d.c:    gye_pml_I = gys-1;
lib/esgn24_2d.c:    gxe_pml_III = gxs-1;
lib/esgn24_2d.c:      vy_a         = tsz * s[D_V1]._dims[0].n0 - nx;
lib/esgn24_2d.c:      vy_pml_I_a   = tsz * ld_pml[0]._s[D_V1]._dims[0].n0-nx;
lib/esgn24_2d.c:      vy_pml_II_a  = tsz * ld_pml[2]._s[D_V1]._dims[0].n0-nx;
lib/esgn24_2d.c:      vy_pml_III_a = tsz * ld_pml[4]._s[D_V1]._dims[0].n0-(gxe_pml_III-gxs_pml_III+1);
lib/esgn24_2d.c:      vy_pml_IV_a  = tsz * ld_pml[6]._s[D_V1]._dims[0].n0-(gxe_pml_IV-gxs_pml_IV+1);
lib/esgn24_2d.c:      mvy_a        = tsz * s[D_MV1]._dims[0].n0 - nx;
lib/esgn24_2d.c:      py_a         = tsz * s[D_P1]._dims[0].n0 - nx;
lib/esgn24_2d.c:      sxy_a        = tsz * s[D_S0]._dims[0].n0 - nx;
lib/esgn24_2d.c:    _vy     = s[D_V1]._s + (gxs - s[D_V1 ]._dims[0].gs) + (gys - s[D_V1 ]._dims[1].gs + tid) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _vy_x_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy_y_I = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _mvy    = cs[D_MV1]._s + (gxs - s[D_MV1]._dims[0].gs) + (gys - s[D_MV1]._dims[1].gs + tid) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c:    _sxy3   = rs[D_S0]._s + (gxs - s[D_S0]._dims[0].gs) + (gys - s[D_S0]._dims[1].gs + tid) * s[D_S0]._dims[0].n0 + 1;
lib/esgn24_2d.c:    _py1    = rs[D_P1]._s + (gxs - s[D_P1]._dims[0].gs) + (gys - s[D_P1]._dims[1].gs + tid) * s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _py0    = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _epx    = rs[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_2d.c:    _epy    = rs[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs + tid);        /* 1D */
lib/esgn24_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vy_x_I) = ((*_vy_x_I) * (1.0f -etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_vy_y_I) = ((*_vy_y_I) * (1.0f -etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:    _vy   += (gye_pml_I + 1 + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _mvy  += (gye_pml_I + 1 + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c:    _sxy3 += (gye_pml_I + 1 + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _py2  += (gye_pml_I + 1 + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EV[1]]._s + (gye_pml_I + 1 + tid - s[D_EV[1]]._dims[0].gs);        /* 1D */
lib/esgn24_2d.c:    _vy_x_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy_y_III = s_pml[D_V1]._s + (gxs_pml_III - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy_x_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy_y_IV = s_pml[D_V1]._s + (gxs_pml_IV - s_pml[D_V1]._dims[0].gs) + (gye_pml_I + 1 - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c:      for ( _vyend = _vy + gxe_pml_III-gxs_pml_III+1; _vy < _vyend; )
lib/esgn24_2d.c:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vy_x_III) = ((*_vy_x_III) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      for ( _vyend = _vy + gxs_pml_IV-gxe_pml_III-1; _vy < _vyend; )
lib/esgn24_2d.c:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c:      for ( _vyend = _vy + gxe_pml_IV-gxs_pml_IV+1; _vy < _vyend; )
lib/esgn24_2d.c:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vy_x_IV) = ((*_vy_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx;
lib/esgn24_2d.c:    _vy   += (gys_pml_II + tid - iy) * s[D_V1 ]._dims[0].n0;
lib/esgn24_2d.c:    _mvy  += (gys_pml_II + tid - iy) * s[D_MV1]._dims[0].n0;
lib/esgn24_2d.c:    _sxy3 += (gys_pml_II + tid - iy) * s[D_S0 ]._dims[0].n0;
lib/esgn24_2d.c:    _py2  += (gys_pml_II + tid - iy) * s[D_P1 ]._dims[0].n0;
lib/esgn24_2d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_2d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_2d.c:    _epy = s[D_EV[1]]._s + (gys_pml_II - s[D_EV[1]]._dims[0].gs + tid);           /* 1D */
lib/esgn24_2d.c:    _vy_x_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    _vy_y_II = s_pml[D_V1]._s + (gxs - s_pml[D_V1]._dims[0].gs) + (gys_pml_II - s_pml[D_V1]._dims[1].gs + tid) * s_pml[D_V1]._dims[0].n0;
lib/esgn24_2d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_2d.c:      sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_2d.c:        dfdx = (sxy0 - sxy3 + (sxy2 - sxy1) * 27.0) * lax; 
lib/esgn24_2d.c:        dfdy = ((*_py0++) - (*_py3++) + ((*_py2++) - (*_py1++)) * 27.0) * lay;
lib/esgn24_2d.c:        (*_vy_x_II) = ((*_vy_x_II) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_2d.c:        (*_vy_y_II) = ((*_vy_y_II) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_2d.c:        /* (*_px) = ((*_px) * (1.0 - etaxdt) + delta) / (1.0 + etaxdt); */
lib/esgn24_2d.c:      _py1 += py_a; _py2 += py_a; _py3 += py_a; _epx -= nx; _epy += tsz;
lib/esgn24_2d.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c.bak:	 is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	 is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	 is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	 is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	 is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	 is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	fac=1.0-rs[0];
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:      is[0]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*(1.0-rs[1]);
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	fac=rs[0]*(1.0-rs[1]);
lib/pointsrc.c.bak:      is[0]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*rs[1];
lib/pointsrc.c.bak:      is[1]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:      is[0]--;is[1]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=rs[0]*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c.bak:      is[0]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*rs[1]*(1.0-rs[2]);
lib/pointsrc.c.bak:      is[1]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=rs[0]*rs[1]*(1.0-rs[2]);
lib/pointsrc.c.bak:      is[0]--;is[1]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*(1.0-rs[1])*rs[2];
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=rs[0]*(1.0-rs[1])*rs[2];
lib/pointsrc.c.bak:      is[0]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:	fac=(1.0-rs[0])*rs[1]*rs[2];
lib/pointsrc.c.bak:      is[1]--;
lib/pointsrc.c.bak:      if (is[0]>gs[0]-1 &&
lib/pointsrc.c.bak:	  is[1]>gs[1]-1 &&
lib/pointsrc.c.bak:	  is[2]>gs[2]-1 &&
lib/pointsrc.c.bak:      is[0]--;is[1]--;
lib/pointsrc.c.bak:      is[2]--;
lib/pointsrc.c.bak:  int iw;                   /* half-width */
lib/pointsrc.c.bak:  ireal tmp0, tmp1, q;      /* workspace for in-place trapezoidal rule */
lib/pointsrc.c.bak:  ireal refkappa;           /* near-source bulk modulus */
lib/pointsrc.c.bak:  get_d(d, m->gl);
lib/pointsrc.c.bak:  rd_ndim(&m->ld_a, D_MP00, &ndim);
lib/pointsrc.c.bak:  IASN(tr->is,IPNT_0);
lib/pointsrc.c.bak:  RASN(tr->rs,RPNT_0);
lib/pointsrc.c.bak:  tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
lib/pointsrc.c.bak:  if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
lib/pointsrc.c.bak:  if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
lib/pointsrc.c.bak:  tr->order = 0;
lib/pointsrc.c.bak:  ps_ffint(*par, "sampord", &(tr->order));
lib/pointsrc.c.bak:  tr->fpsrc = NULL;
lib/pointsrc.c.bak:  tr->fpdbg = NULL;
lib/pointsrc.c.bak:  /* extract near-source bulk modulus from grid - necessary for
lib/pointsrc.c.bak:     grid, check neighboring grid points - in that case, at least one
lib/pointsrc.c.bak:  rd_gse(&(m->ld_a), D_MP00, gs, ge);
lib/pointsrc.c.bak:    if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c.bak:    if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c.bak:  if (iflag) refkappa = rd_gget(&(m->ld_a), D_MP00, tis);
lib/pointsrc.c.bak:  /* extract near-source bouyancy from grid - necessary for
lib/pointsrc.c.bak:     WWS, 04.03.09: need to do this here too - to avoid failure if
lib/pointsrc.c.bak:     neighboring grid points - in that case, at least one of these
lib/pointsrc.c.bak:  rd_gse(&(m->ld_a), D_MV0, gs, ge);
lib/pointsrc.c.bak:    tis[i] = tr->is[i];
lib/pointsrc.c.bak:    if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c.bak:    if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c.bak:  if (iflag) refbou = rd_gget(&(m->ld_a), D_MV0, tis);
lib/pointsrc.c.bak:     slightly different points - this of course does not matter if
lib/pointsrc.c.bak:    fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/pointsrc.c.bak:     - 4 pi c^2 dt (from rhs of equation 9, using kappa/rho=c^2 - RHS of 
lib/pointsrc.c.bak:     - r (reference distance for normalization, per eqn 13);
lib/pointsrc.c.bak:     - reference amplitude;
lib/pointsrc.c.bak:     - reciprocal of cell volume, for delta function.
lib/pointsrc.c.bak:    tr->scramp =  4.0 * 3.1415927 * refvel * refvel * 
lib/pointsrc.c.bak:      refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c.bak:    tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c.bak:    if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
lib/pointsrc.c.bak:      fprintf(stream, "Error: pointsrc_init - failed to open source file\n");
lib/pointsrc.c.bak:    if (fseek(tr->fpsrc,0L,SEEK_SET)) {
lib/pointsrc.c.bak:      fprintf(stream,"Error: pointsrc_init - failed to seek to start of file\n");
lib/pointsrc.c.bak:    if (!fgettr(tr->fpsrc, &trsrc)) {
lib/pointsrc.c.bak:      fprintf(stream,"Error: pointsrc_init - failed to read source file\n");
lib/pointsrc.c.bak:    iwave_fclose(tr->fpsrc);
lib/pointsrc.c.bak:       at an external sample rate - read headers relevant for single dilat
lib/pointsrc.c.bak:    tr->istart = (int)(tmpt0/((m->tsind).dt));
lib/pointsrc.c.bak:    t0 = (m->tsind).dt * tr->istart;
lib/pointsrc.c.bak:    /*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
lib/pointsrc.c.bak:    tmax = iwave_max(tmpt0 + tmpnt * tmpdt, tg->t0 + tg->nt * ((m->tsind).dt));
lib/pointsrc.c.bak:    tr->n = (int)(tmax/((m->tsind).dt)) + 1 - tr->istart;
lib/pointsrc.c.bak:    tr->w = (ireal *)malloc(sizeof(ireal)*(tr->n));
lib/pointsrc.c.bak:    lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
lib/pointsrc.c.bak:    for (i = tmpnt; i < lnt; i++) resc[i] = trsrc.data[tmpnt-1];
lib/pointsrc.c.bak:      /* integrate once - trapezoidal rule in-place 
lib/pointsrc.c.bak:	 w[j] <- sum_{i=1}^{i=j} 0.5*dt*(w[i-1]+w[i])
lib/pointsrc.c.bak:      tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c.bak:      if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
lib/pointsrc.c.bak:	fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c.bak:      tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c.bak:      if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
lib/pointsrc.c.bak:	fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c.bak:    /* check that reference distance is positive - only legal option */
lib/pointsrc.c.bak:    tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
lib/pointsrc.c.bak:    tr->n = 2 * iw+1;
lib/pointsrc.c.bak:    /* source phase - default is zero-phase */
lib/pointsrc.c.bak:    tr->istart = -iw;
lib/pointsrc.c.bak:      if (!strcmp(wp,"zerophase")) tr->istart=-iw;
lib/pointsrc.c.bak:      else if (!strcmp(wp,"causal")) tr->istart=0;
lib/pointsrc.c.bak:      else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;
lib/pointsrc.c.bak:  tr->idbg = 0;
lib/pointsrc.c.bak:  ps_ffint(*par, "dump_wavelet", &(tr->idbg));
lib/pointsrc.c.bak:  if (tr->idbg) {
lib/pointsrc.c.bak:    memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
lib/pointsrc.c.bak:    val.u=1000.0*((m->tsind).dt);
lib/pointsrc.c.bak:    val.h=tr->n;
lib/pointsrc.c.bak:    val.h=((m->tsind).dt)*tr->istart;
lib/pointsrc.c.bak:    if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
lib/pointsrc.c.bak:    fputtr(tr->fpdbg,&trdbg);
lib/pointsrc.c.bak:    fflush(tr->fpdbg);
lib/pointsrc.c.bak:    iwave_fclose(tr->fpdbg);
lib/pointsrc.c.bak:  if (tr->w)       free(tr->w); 
lib/pointsrc.c.bak:  if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
lib/pointsrc.c.bak:  if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
lib/pointsrc.c.bak:  /* key dimn off pressure field - NO-OP if iv!=0 */
lib/pointsrc.c.bak:  if ( ((m->tsind).it >= tr->istart) && 
lib/pointsrc.c.bak:       ((m->tsind).it < tr->istart + tr->n) &&
lib/pointsrc.c.bak:       ((m->tsind).iv == 0) ) {
lib/pointsrc.c.bak:    for (i=0; i < (m->ld_a)._s[D_P0].ndim; i++) {
lib/pointsrc.c.bak:      pointsource(tr->is,
lib/pointsrc.c.bak:		  tr->rs,
lib/pointsrc.c.bak:		  tr->order,
lib/pointsrc.c.bak:		  tr->scramp,
lib/pointsrc.c.bak:		  (tr->w)[(m->tsind).it-tr->istart],
lib/pointsrc.c.bak:       		  (m->ld_c)._s[D_P[i]]);
lib/pointsrc.c.bak:  fprintf(fp,"/*---------------------------------------------------------*/\n");
lib/pointsrc.c.bak:  fprintf(fp,"pulse length = %d\n",tr->n);
lib/pointsrc.c.bak:  fprintf(fp,"istart       = %d\n",tr->istart);
lib/pointsrc.c.bak:  fprintf(fp,"order        = %d\n",tr->order);
lib/pointsrc.c.bak:      fprintf(fp,"is[%d]=%d rs[%d]=%e\n", i, tr->is[i], i, tr->rs[i]);
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps.c~:	int ndim = dom->_s[0].ndim;
lib/esgsteps.c~:	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps.c~:	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps.c~:	//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c~:	if (esgnp->k==1) {
lib/esgsteps.c~:		fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:	//k=2, i.e., 2-4 scheme case
lib/esgsteps.c~:	if (esgnp->k==2) {
lib/esgsteps.c~:		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:	//k=5, i.e., 2-10 scheme case
lib/esgsteps.c~:	if (esgnp->k==5) {
lib/esgsteps.c~:		if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:	if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c~:		fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c~:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c~:		if (esgnp->k==1) {
lib/esgsteps.c~:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		//k=2, i.e., 2-4 scheme case
lib/esgsteps.c~:		if (esgnp->k==2) {
lib/esgsteps.c~:				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		//k=5, i.e., 2-10 scheme case
lib/esgsteps.c~:		if (esgnp->k==5) {
lib/esgsteps.c~:				//fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c~:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c~:	pmax = dom->_s[D_P0]._s0[0];
lib/esgsteps.c~:	for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps.c~:	int ndim = dom->_s[0].ndim;
lib/esgsteps.c~:		//nothing implemented for k=1, i.e., 2-2 scheme
lib/esgsteps.c~:		if (esgnp->k==1) {
lib/esgsteps.c~:			fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		//k=2, i.e., 2-4 scheme case
lib/esgsteps.c~:		if (esgnp->k==2) {
lib/esgsteps.c~:			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		//k=5, i.e., 2-10 scheme case
lib/esgsteps.c~:		if (esgnp->k==5) {
lib/esgsteps.c~:			if (ndim==3) fprintf(stderr,"ERROR: 2-%d scheme not implemented for %dD\n",esgnp->k*2,ndim);
lib/esgsteps.c~:		if(esgnp->k !=2 && esgnp->k !=5){
lib/esgsteps.c~:			fprintf(stderr,"order = %d not implemented for 2D or 3D\n",esgnp->k*2);
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:      f[i+*iw]= fac*exp(-st*st);
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:      f[i+*iw]= -2 * st * fac*exp(-st*st);
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:      f[i+*iw]= -2*pi*pi*fpeak*fpeak*fac*exp(-st*st)*(1.0-2.0*st*st);
lib/gauss.c:   precision round-off error (i.e. O(10^7)). The Gaussian is
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c:  return -exp(-st*t*t)/(2*st);
lib/gauss.c:  return t*exp(-st*t*t);
lib/gauss.c:  return (1-2*st*t2)*exp(-st*t2);
Binary file lib/pointsrc.o matches
Binary file lib/esgn_read.o matches
lib/smooth_pointsrc.c:  t -= t0;
lib/smooth_pointsrc.c:  if ( (i < 0) || (i >= n-1) ) return 0.0;
lib/smooth_pointsrc.c:  else if (i >= n-2)
lib/smooth_pointsrc.c:    i0 = n - 4;
lib/smooth_pointsrc.c:    i1 = n - 3;
lib/smooth_pointsrc.c:    i2 = n - 2;
lib/smooth_pointsrc.c:    i3 = n - 1;
lib/smooth_pointsrc.c:    i0 = i - 1;
lib/smooth_pointsrc.c:  l0 = -						(t - ti1 )* (t - ti2) * (t - ti3) / 6.0 / dt3;
lib/smooth_pointsrc.c:  l1 =  (t - ti0)							*	(t - ti2) * (t - ti3) / 2.0 / dt3;
lib/smooth_pointsrc.c:  l2 = -(t - ti0) * (t - ti1 )						* (t - ti3) / 2.0 / dt3;
lib/smooth_pointsrc.c:  l3 =  (t - ti0) * (t - ti1 )* (t - ti2)             / 6.0 / dt3;
lib/smooth_pointsrc.c:		x = x * d[i] - tr->xs[i];
lib/smooth_pointsrc.c:  if (r < tr->rad)  return 0.0;
lib/smooth_pointsrc.c:  gradphi = -compdgauss(r - tr->rad,  tr->phipeak )
lib/smooth_pointsrc.c:          * (2.0 * pi * pi * tr->phipeak * tr->phipeak)  * xd / r;
lib/smooth_pointsrc.c:	if (tr->tmpflag == 3) /* Option Ia */
lib/smooth_pointsrc.c:		p = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0)/ r;
lib/smooth_pointsrc.c:  else if (tr->tmpflag == 2) /* Option Ib */
lib/smooth_pointsrc.c:    p = cubic_interp(t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0)/ r;
lib/smooth_pointsrc.c:	else if (tr->tmpflag == 1)  /* Ricker */
lib/smooth_pointsrc.c:		p = comprick(t + tr->istart * dt - r / tr->c, tr->fpeak) / r;
lib/smooth_pointsrc.c:		x = ((ireal)(ind[i])) * d[i] - tr->xs[i];
lib/smooth_pointsrc.c:  if (r < tr->rad)  return 0.0;
lib/smooth_pointsrc.c:  gradphi = -compdgauss(r - tr->rad,  tr->phipeak)
lib/smooth_pointsrc.c:          * (2.0 * pi * pi * tr->phipeak * tr->phipeak) / r;
lib/smooth_pointsrc.c:	if (tr->tmpflag == 3)  /* Option Ia */
lib/smooth_pointsrc.c:		f0 = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0) / tr->c;
lib/smooth_pointsrc.c:		f1 = cubic_interp( t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0) / r;
lib/smooth_pointsrc.c:  else if (tr->tmpflag == 2)  /* Option Ib */
lib/smooth_pointsrc.c:    f0 = cubic_interp( t - r / tr->c, tr->dt, tr->w1, tr->n, tr->t0) / tr->c;
lib/smooth_pointsrc.c:		f1 = cubic_interp( t - r / tr->c, tr->dt, tr->w, tr->n, tr->t0) / r;
lib/smooth_pointsrc.c:	else if (tr->tmpflag == 1) /* Ricker */
lib/smooth_pointsrc.c:		f0 = comprick( t + tr->istart * dt - r / tr->c, tr->fpeak) / tr->c;
lib/smooth_pointsrc.c:		f1 = compdgauss( t + tr->istart * dt - r / tr->c, tr->fpeak) / r;
lib/smooth_pointsrc.c:	return tr->bou * ( f0 + f1) * gradphi;;
lib/smooth_pointsrc.c:  int iw;                   /* half-width */
lib/smooth_pointsrc.c:  RPNT rs;                  /* source in-cell offsets */
lib/smooth_pointsrc.c:  ireal refkappa;           /* near-source bulk modulus */
lib/smooth_pointsrc.c:  tr->fpeak = FPEAK_DEF;  
lib/smooth_pointsrc.c:  tr->phipeak = FPEAK_DEF;        
lib/smooth_pointsrc.c:  get_d(d, m->gl);
lib/smooth_pointsrc.c:  rd_ndim(&m->ld_a, D_MP00, &ndim);
lib/smooth_pointsrc.c:  is[0] = tg->is[0]; rs[0]=tg->rs[0]; tis[0] = is[0];
lib/smooth_pointsrc.c:  if (ndim > 1) { is[1]=tg->is[1]; rs[1]=tg->rs[1]; tis[1]=is[1]; }
lib/smooth_pointsrc.c:  if (ndim > 2) { is[2]=tg->is[2]; rs[2]=tg->rs[2]; tis[2]=is[2]; } 
lib/smooth_pointsrc.c:  RASN(tr->xs, RPNT_0);
lib/smooth_pointsrc.c:  for (i = 0; i < ndim; i++) tr->xs[i] = ( (float)(tg->is[i]) + tg->rs[i] ) * d[i];
lib/smooth_pointsrc.c:	/* extract near-source bulk modulus from grid - necessary for
lib/smooth_pointsrc.c:     grid, check neighboring grid points - in that case, at least one
lib/smooth_pointsrc.c:  rd_gse(&(m->ld_a), D_MP00, gs, ge);
lib/smooth_pointsrc.c:    if ( (is[i] < gs[i]) && (is[i] + 1 > gs[i]-1) ) tis[i]++;
lib/smooth_pointsrc.c:    if ( (is[i] > ge[i]) && (is[i] - 1 < ge[i]+1) ) tis[i]--;
lib/smooth_pointsrc.c:  if (iflag) refkappa = rd_gget(&(m->ld_a), D_MP00, tis);
lib/smooth_pointsrc.c:  /* extract near-source bouyancy from grid - necessary for
lib/smooth_pointsrc.c:     WWS, 04.03.09: need to do this here too - to avoid failure if
lib/smooth_pointsrc.c:     neighboring grid points - in that case, at least one of these
lib/smooth_pointsrc.c:  rd_gse(&(m->ld_a), D_MV0, gs, ge);
lib/smooth_pointsrc.c:    if ( (is[i] < gs[i]) && (is[i]+1 > gs[i]-1) ) tis[i]++;
lib/smooth_pointsrc.c:    if ( (is[i] > ge[i]) && (is[i]-1 < ge[i]+1) ) tis[i]--;
lib/smooth_pointsrc.c:  if (iflag) refbou = rd_gget(&(m->ld_a), D_MV0, tis);
lib/smooth_pointsrc.c:     slightly different points - this of course does not matter if
lib/smooth_pointsrc.c:	tr->c = refvel;
lib/smooth_pointsrc.c:	tr->bou = refbou;
lib/smooth_pointsrc.c:	if (ps_ffreal(*par, "cutoff_peak", &(tr->phipeak)))
lib/smooth_pointsrc.c:    fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/smooth_pointsrc.c:    fprintf(stream,"parameter for the cutoff function (cutoff_width) = %e\n", tr->phipeak);
lib/smooth_pointsrc.c:  tr->rad = 1.4 / tr->phipeak; 
lib/smooth_pointsrc.c:  if (ps_ffreal(*par, "cutoff_rad", &(tr->rad)))
lib/smooth_pointsrc.c:    fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/smooth_pointsrc.c:    fprintf(stream, "rad of the flat area in the cutoff function = %e\n", tr->rad);
lib/smooth_pointsrc.c:  IASN(tr->ixs, IPNT_0);
lib/smooth_pointsrc.c:  IASN(tr->ixe, IPNT_0);
lib/smooth_pointsrc.c:		phiw[i] = 1 + (int)(floor( (tr->rad +  1.4 / tr->phipeak) / d[i] + 0.1));  
lib/smooth_pointsrc.c:		tr->ixs[i] = is[i] - phiw[i];
lib/smooth_pointsrc.c:		tr->ixe[i] = is[i] + phiw[i];    
lib/smooth_pointsrc.c:     - dt - RHS of the difference scheme is multiplied by the time step
lib/smooth_pointsrc.c:     - r (reference distance for normalization, per eqn 13);
lib/smooth_pointsrc.c:     - reference amplitude;
lib/smooth_pointsrc.c:    tr->scramp = refamp * refdist * m->tsind.dt;
lib/smooth_pointsrc.c:    tr->scramp = m->tsind.dt;
lib/smooth_pointsrc.c:    if (!(tr->fpsrc = fopen(srcfile, "r"))) {
lib/smooth_pointsrc.c:      fprintf(stream, "Error: pointsrc_init - failed to open source file\n");
lib/smooth_pointsrc.c:    if (!fgettr(tr->fpsrc, &trsrc)) {
lib/smooth_pointsrc.c:      fprintf(stream,"Error: pointsrc_init - failed to read source file\n");
lib/smooth_pointsrc.c:		at an external sample rate - read headers relevant for single dilat
lib/smooth_pointsrc.c:    tr->n = vtoi(hdtype("ns"), val);
lib/smooth_pointsrc.c:    tr->dt = 0.001 * vtof(hdtype("dt"), val);
lib/smooth_pointsrc.c:    tr->istart = (int)(floor(tmpt0 / m->tsind.dt));
lib/smooth_pointsrc.c:    tr->t0 = (m->tsind).dt * tr->istart;
lib/smooth_pointsrc.c:    tr->w = (ireal *)malloc(sizeof(ireal)*(tr->n));
lib/smooth_pointsrc.c:		tr->w1 = (ireal *)malloc(sizeof(ireal)*(tr->n));
lib/smooth_pointsrc.c:    for (i = 0; i < tr->n; i++)  tr->w[i] = trsrc.data[i];
lib/smooth_pointsrc.c:			tr->tmpflag = 3;
lib/smooth_pointsrc.c:      /* integrate once - trapezoidal rule in-place 
lib/smooth_pointsrc.c:          w[j] <- sum_{i=1}^{i=j} 0.5*dt*(w[i-1]+w[i])
lib/smooth_pointsrc.c:      tr->w1[0] = 0.0;
lib/smooth_pointsrc.c:      for (i = 1; i < tr->n; i++) 
lib/smooth_pointsrc.c:				q += 0.5 * tr->dt * (tr->w[i] + tr->w[i - 1]);
lib/smooth_pointsrc.c:				tr->w1[i] = q;
lib/smooth_pointsrc.c:      tr->tmpflag = 2;
lib/smooth_pointsrc.c:      /* differentiate once - trapezoidal rule in-place 
lib/smooth_pointsrc.c:          w[j] <- sum_{i=1}^{i=j} 0.5 * (w[i+1]+w[i - 1])/dt
lib/smooth_pointsrc.c:      tr->w1[0] = 0.0;
lib/smooth_pointsrc.c:      for (i = 1; i < tr->n - 1; i++) 
lib/smooth_pointsrc.c:				tr->w1[i] = (tr->w[i + 1] - tr->w[i - 1]) / (2.0 *  tr->dt);
lib/smooth_pointsrc.c:      tr->w1[tr->n- 1] = 0.0;
lib/smooth_pointsrc.c:   /* check that reference distance is positive - only legal option */
lib/smooth_pointsrc.c:		tr->tmpflag = 1;
lib/smooth_pointsrc.c:		if (ps_ffreal(*par,"fpeak", &(tr->fpeak))) 
lib/smooth_pointsrc.c:			fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/smooth_pointsrc.c:			fprintf(stream,"peak frequency (fpeak) = %e\n", tr->fpeak);
lib/smooth_pointsrc.c:		/* source phase - default is zero-phase */
lib/smooth_pointsrc.c:    tr->w = getrick(&iw, (m->tsind).dt, tr->fpeak);
lib/smooth_pointsrc.c:    tr->w1 = getdgauss(&iw, (m->tsind).dt, tr->fpeak);
lib/smooth_pointsrc.c:		tr->istart = -iw;
lib/smooth_pointsrc.c:		tr->n = 2 * iw + 1;
lib/smooth_pointsrc.c:    tr->dt = m->tsind.dt;
lib/smooth_pointsrc.c:			if (!strcmp(wp,"zerophase")) tr->istart = -iw;
lib/smooth_pointsrc.c:			else if (!strcmp(wp,"causal")) tr->istart = 0;
lib/smooth_pointsrc.c:			else if (!strcmp(wp,"anticausal")) tr->istart = -2 * iw;
lib/smooth_pointsrc.c:  tr->sn = (int)((tr->rad + 1.4 / tr->phipeak) / tr->c / m->tsind.dt) + 1 + tr->n;
lib/smooth_pointsrc.c:  tr->idbg = 0;
lib/smooth_pointsrc.c:  ps_ffint(*par, "dump_wavelet", &(tr->idbg));
lib/smooth_pointsrc.c:  if ( (tr->idbg) && (rk==0) )
lib/smooth_pointsrc.c:    if (tr->idbg == 1)  memcpy(trdbg.data, tr->w, tr->n * sizeof(ireal));
lib/smooth_pointsrc.c:		if (tr->idbg == 2)  memcpy(trdbg.data, tr->w1, tr->n * sizeof(ireal));
lib/smooth_pointsrc.c:    val.u=1000.0*(tr->dt);
lib/smooth_pointsrc.c:    val.h=tr->n;
lib/smooth_pointsrc.c:    val.h=tr->dt * tr->istart;
lib/smooth_pointsrc.c:    if (!(tr->fpdbg=fopen("wavelet.debug","w"))) {
lib/smooth_pointsrc.c:    fputtr(tr->fpdbg,&trdbg);
lib/smooth_pointsrc.c:    fflush(tr->fpdbg);
lib/smooth_pointsrc.c:  if ( (m->tsind.it >= tr->istart) &&  (m->tsind.it <= tr->istart + tr->sn) )
lib/smooth_pointsrc.c:		t = (ireal)(m->tsind.it) * m->tsind.dt;
lib/smooth_pointsrc.c:    rd_ndim(&m->ld_a, D_MP00, &ndim);
lib/smooth_pointsrc.c:    get_d(d,m->gl);
lib/smooth_pointsrc.c:    if ( (m->tsind).iv == 0 )
lib/smooth_pointsrc.c:      rd_gse(&(m->ld_a), D_MP00, gs, ge);
lib/smooth_pointsrc.c:      for (ix[2] = iwave_max(tr->ixs[2], gs[2]); ix[2] < iwave_min(tr->ixe[2] + 1, ge[2] + 1); ix[2]++) 
lib/smooth_pointsrc.c:          for (ix[1] = iwave_max(tr->ixs[1], gs[1]); ix[1] < iwave_min(tr->ixe[1] + 1, ge[1] + 1); ix[1]++) 
lib/smooth_pointsrc.c:              for (ix[0] = iwave_max(tr->ixs[0], gs[0]); ix[0] < iwave_min(tr->ixe[0] + 1, ge[0] + 1); ix[0]++) 
lib/smooth_pointsrc.c:                  p0 = rd_gget(&(m->ld_a), D_P[0], ix);
lib/smooth_pointsrc.c:                  if (ndim > 1) p1 = rd_gget(&(m->ld_a), D_P[1], ix);
lib/smooth_pointsrc.c:                  if (ndim > 2) p2 = rd_gget(&(m->ld_a), D_P[2], ix);
lib/smooth_pointsrc.c:                  bm  = rd_gget(&(m->ld_a), D_MP00, ix);
lib/smooth_pointsrc.c:                  ps = bm * tr->scramp * vfun(ix, d, ndim, tr, t + 0.5 * m->tsind.dt, m->tsind.dt);
lib/smooth_pointsrc.c:                  rd_gset(&(m->ld_a), D_P[0], ix, p0 - ps);
lib/smooth_pointsrc.c:                  if (ndim  > 1) rd_gset(&(m->ld_a), D_P[1], ix, p1 - ps);
lib/smooth_pointsrc.c:                  if (ndim  > 2) rd_gset(&(m->ld_a), D_P[2], ix, p2 - ps);
lib/smooth_pointsrc.c:			if ((m->tsind).iv == 3 * ndim + 1 + 4 * i + 1) 
lib/smooth_pointsrc.c:        rd_gse(&(m->ld_a), D_MV[i], gs, ge);
lib/smooth_pointsrc.c:        for (ix[2] = iwave_max(tr->ixs[2], gs[2]); ix[2] < iwave_min(tr->ixe[2] + ((i==2) ? 0 : 1), ge[2] + 1); ix[2]++) 
lib/smooth_pointsrc.c:            for (ix[1] = iwave_max(tr->ixs[1], gs[1]); ix[1] < iwave_min(tr->ixe[1] + ((i==1) ? 0 : 1), ge[1] + 1); ix[1]++) 
lib/smooth_pointsrc.c:                for (ix[0] = iwave_max(tr->ixs[0], gs[0]); ix[0] < iwave_min(tr->ixe[0] + ((i==0) ? 0 : 1), ge[0] + 1); ix[0]++) 
lib/smooth_pointsrc.c:                      bou = rd_gget(&(m->ld_a), D_MV[i], ix);
lib/smooth_pointsrc.c:                      p0 = rd_gget(&(m->ld_a), D_V[i], ix);
lib/smooth_pointsrc.c:                      ps = bou * tr->scramp * pfun(ix, d, ndim, tr, t + m->tsind.dt, i, m->tsind.dt);
lib/smooth_pointsrc.c:                      rd_gset(&(m->ld_a), D_V[i], ix, p0-ps);
lib/smooth_pointsrc.c:  fprintf(fp,"/*---------------------------------------------------------*/\n");
lib/smooth_pointsrc.c:  fprintf(fp,"source sound vel = %f\n",tr->c);
lib/smooth_pointsrc.c:	fprintf(fp,"source bou       = %f\n", tr->bou);
lib/smooth_pointsrc.c:  fprintf(fp,"istart           = %d\n", tr->istart);
lib/smooth_pointsrc.c:	fprintf(fp,"n                = %d\n", tr->n);
lib/smooth_pointsrc.c:  fprintf(fp,"dt                = %f\n", tr->dt);
lib/smooth_pointsrc.c:  fprintf(fp,"sn               = %d\n", tr->sn);
lib/smooth_pointsrc.c:  fprintf(fp,"fpeak            = %f\n", tr->fpeak);
lib/smooth_pointsrc.c:	fprintf(fp,"phipeak          = %f\n", tr->phipeak);
lib/smooth_pointsrc.c:    fprintf(fp,"xs[%d]=%f\n", i, tr->xs[i]);
lib/smooth_pointsrc.c:    fprintf(fp,"ixs[%d]=%d ixe[%d]=%d\n", i, tr->ixs[i], i, tr->ixe[i]);
lib/smooth_pointsrc.c:  fprintf(fp,"/*---------------------------------------------------------*/\n");
lib/ansol_esgn_model.c:/*------------------- private data declarations ----------------------------*/
lib/ansol_esgn_model.c:static int m_ndim = 0; /* dimension - need only compute once */
lib/ansol_esgn_model.c:/*--- private function declarations - assigned to FD_MODEL pointers ----------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:    	IPNT cpers;          /* workspace for periodic wrap info  - currently not used */
lib/ansol_esgn_model.c:  	/* decode dimension - only on rk 0 */
lib/ansol_esgn_model.c:	sol_mdl->specs=(void *)sol;
lib/ansol_esgn_model.c:	ansolpars->srcinfo = rickerinfo;
lib/ansol_esgn_model.c:	ansolpars->medinfo = himedinfo;
lib/ansol_esgn_model.c:				fprintf(stream,"ERROR: in ansol_HI_esgn_modelinit - failed to read spatial geometry\n");
lib/ansol_esgn_model.c:    		fprintf(stream,"ERROR: in ansol_HI_esg_modelinit - failed to read dim=%d\n",m_ndim);
lib/ansol_esgn_model.c:  	/* decode order - take care of deprecated cases */
lib/ansol_esgn_model.c:  	ansolpars->k=1;
lib/ansol_esgn_model.c: 	ps_flint(*pars,"order",&(ansolpars->k));
lib/ansol_esgn_model.c:    	fprintf(stream,"NOTE: initializing ANSOL_ESG with half-order = %d\n",ansolpars->k);
lib/ansol_esgn_model.c:	sol->fdpars 		= (void*)ansolpars;		//from ansol_esgn.h
lib/ansol_esgn_model.c:	sol->isarr 		= esg_isarr;			//from esgn.h
lib/ansol_esgn_model.c:	sol->set_grid_type 	= esg_set_grid_type;		//from esgn.h
lib/ansol_esgn_model.c:	sol->build_sten_dep 	= esg_build_sten_dep;		//from esgn.h
lib/ansol_esgn_model.c:	sol->ind2str 		= esg_ind2str;			//from esgn.h
lib/ansol_esgn_model.c:	sol->alter_dom 		= esg_alter_dom;		//from esgn.h
lib/ansol_esgn_model.c:	sol->readtimegrid 	= esg_readtimegrid; 		//from esgn_read.h
lib/ansol_esgn_model.c:	sol->readmedia		= esgn_readmedia;		//from esgn_read.h
lib/ansol_esgn_model.c:	sol->readgrid 		= esg_readgrid;		 	//from esgn_read.h
lib/ansol_esgn_model.c:	sol->numsubsteps 	= ansol_esg_numsubsteps;
lib/ansol_esgn_model.c:	sol->update 		= ansol_esg_update;
lib/ansol_esgn_model.c:	sol->readschemeinfo 	= ansol_esg_readschemeinfo;
lib/ansol_esgn_model.c:	sol->create_sten 	= ansol_esg_create_sten;
lib/ansol_esgn_model.c:	sol->parcopy 		= ansol_HI_esgn_ts_parcopy; 	//HI specific
lib/ansol_esgn_model.c:	sol->fd_model_init 	= ansol_HI_esg_modelinit;	//HI specific
lib/ansol_esgn_model.c:	sol->fd_model_dest 	= ansol_HI_esg_modeldest;	//HI specific
lib/ansol_esgn_model.c:	sol->tsf = ansol_HI_esg_step; //HI spacific
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:		ptgt->dt   = psrc->dt;
lib/ansol_esgn_model.c:		ptgt->k    = psrc->k;
lib/ansol_esgn_model.c:		ptgt->ndim = psrc->ndim;
lib/ansol_esgn_model.c:		ptgt->t_off= psrc->t_off;
lib/ansol_esgn_model.c:			ptgt->lam[i]     = psrc->lam[i];
lib/ansol_esgn_model.c:			ptgt->dx[i]      = psrc->dx[i];
lib/ansol_esgn_model.c:			ptgt->o_coord[i] = psrc->o_coord[i];
lib/ansol_esgn_model.c:			ptgt->o_index[i] = psrc->o_index[i];
lib/ansol_esgn_model.c:			ptgt->src_x[i]   = psrc->src_x[i];
lib/ansol_esgn_model.c:				ptgt->gtype[j][i] = psrc->gtype[j][i];
lib/ansol_esgn_model.c:		ptgt->link_mdl = psrc->link_mdl;
lib/ansol_esgn_model.c:		RICKER_INFO * src_ptgt = (RICKER_INFO *)ptgt->srcinfo;
lib/ansol_esgn_model.c:		const RICKER_INFO * src_psrc = (const RICKER_INFO *)psrc->srcinfo;
lib/ansol_esgn_model.c:			src_ptgt->fpeak = src_psrc->fpeak;
lib/ansol_esgn_model.c:			src_ptgt->amp   = src_psrc->amp;
lib/ansol_esgn_model.c:				src_ptgt->src_d[i] = src_psrc->src_d[i];
lib/ansol_esgn_model.c:		ESG_HIMED_INFO * med_ptgt = (ESG_HIMED_INFO *)ptgt->medinfo;
lib/ansol_esgn_model.c:		const ESG_HIMED_INFO * med_psrc = (const ESG_HIMED_INFO *)psrc->medinfo;
lib/ansol_esgn_model.c:			med_ptgt->mu     = med_psrc->mu;
lib/ansol_esgn_model.c:			med_ptgt->lambda = med_psrc->lambda;
lib/ansol_esgn_model.c:			med_ptgt->rho    = med_psrc->rho;
lib/ansol_esgn_model.c:			med_ptgt->alpha  = med_psrc->alpha;
lib/ansol_esgn_model.c:			med_ptgt->beta   = med_psrc->beta;
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:  	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	int err=create_sten2_2k(sol,stream, ansolpars->k, ndim, gtype, sten_dep_mat,sten);
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:	FD_MODEL * sol = (FD_MODEL *)(model->specs); 
lib/ansol_esgn_model.c:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	ansolpars->dt = (model->tsind).dt;     //setting dt
lib/ansol_esgn_model.c:	ansolpars->ndim = ndim = (model->g).dim; //setting ndim
lib/ansol_esgn_model.c:	get_d (ansolpars->dx,     model->g); //setting dx
lib/ansol_esgn_model.c:	get_o (ansolpars->o_coord,model->g); //setting o_coord
lib/ansol_esgn_model.c:	get_gs(ansolpars->o_index,model->g); //setting o_index
lib/ansol_esgn_model.c:		if ( ansolpars->dx[idim] <= 0.0) {
lib/ansol_esgn_model.c:				idim, ansolpars->dx[idim]);
lib/ansol_esgn_model.c:		ansolpars->lam[idim] = ansolpars->dt / ansolpars->dx[idim]; //setting lam
lib/ansol_esgn_model.c:		fprintf(stderr, "lam[%d] = %g\n", idim, ansolpars->lam[idim]);
lib/ansol_esgn_model.c:	esg_set_grid_type( stream, ndim, ansolpars->gtype ); //setting gtype
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:  	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c:		if (sol->fdpars){
lib/ansol_esgn_model.c:			ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:			if (ansolpars->srcinfo){
lib/ansol_esgn_model.c:				RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c:			if (ansolpars->medinfo){
lib/ansol_esgn_model.c:				ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c:	if (!sol->fdpars) 
lib/ansol_esgn_model.c:  	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo); //allocated in ansol_HI_esg_modelinit.
lib/ansol_esgn_model.c:	dom = &(model->ld_c); 
lib/ansol_esgn_model.c:	ndim = ansolpars->ndim;
lib/ansol_esgn_model.c:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c:	fprintf(stream,"NOTE: for mu, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c:	himedinfo->mu = fmax;
lib/ansol_esgn_model.c:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c:	fprintf(stream,"NOTE: for lambda, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c:	himedinfo->lambda = fmax;
lib/ansol_esgn_model.c:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c:	fprintf(stream,"NOTE: for rho, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c:	himedinfo->rho = 1.0/fmax;
lib/ansol_esgn_model.c:	himedinfo->alpha = sqrt( (himedinfo->lambda + 2.0*himedinfo->mu)/himedinfo->rho );
lib/ansol_esgn_model.c:	himedinfo->beta = sqrt( himedinfo->mu/himedinfo->rho );
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c:	ndim = ansolpars->ndim;
lib/ansol_esgn_model.c:		fprintf(stream,"       homogeneous isotropic case with a non-point source!\nABORT!\n");
lib/ansol_esgn_model.c:    		fprintf(stream,"NOTE: ansol_HI_esg_srcinfo - using default ");
lib/ansol_esgn_model.c:	iw = (pntsrc->n - 1.0)/2.0;
lib/ansol_esgn_model.c:	ansolpars->t_off = (iw + pntsrc->istart) * ansolpars->dt;
lib/ansol_esgn_model.c:	RASN( ansolpars->src_x, tg->src[0] );
lib/ansol_esgn_model.c:	rickerinfo->fpeak = fpeak;
lib/ansol_esgn_model.c:		prod_d *= ansolpars->dx[idim];
lib/ansol_esgn_model.c:	rickerinfo->amp = pntsrc->scramp * prod_d * himedinfo->rho / ansolpars->dt;
lib/ansol_esgn_model.c:		rickerinfo->src_d[idim] = pntsrc->src_d[idim];
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:	FD_MODEL * sol = (FD_MODEL *)(sol_mdl->specs);
lib/ansol_esgn_model.c:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	ansolpars->link_mdl = fd_mdl;
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c:	FD_MODEL * sol = (FD_MODEL *)(sol_mdl->specs);
lib/ansol_esgn_model.c:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c:	fprintf(stream,"dt          = %g\n",ansolpars->dt);
lib/ansol_esgn_model.c:	fprintf(stream,"k           = %d\n",ansolpars->k);
lib/ansol_esgn_model.c:	fprintf(stream,"ndim        = %d\n",ansolpars->ndim);
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"lam[%d]     = %g\n",idim,ansolpars->lam[idim]);
lib/ansol_esgn_model.c:if (ansolpars->link_mdl)
lib/ansol_esgn_model.c:	fprintf(stream,"link_mdl    = NON-NULL\n");
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"dx[%d]      = %g\n",idim,ansolpars->dx[idim]);
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"o_coord[%d] = %g\n",idim,ansolpars->o_coord[idim]);
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"o_index[%d] = %g\n",idim,ansolpars->o_index[idim]);
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"src_x[%d]   = %g\n",idim,ansolpars->src_x[idim]);
lib/ansol_esgn_model.c:	fprintf(stream,"t_off       = %g\n",ansolpars->t_off);
lib/ansol_esgn_model.c:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c:	fprintf(stream,"mu     = %g\n",himedinfo->mu);
lib/ansol_esgn_model.c:	fprintf(stream,"lambda = %g\n",himedinfo->lambda);
lib/ansol_esgn_model.c:	fprintf(stream,"rho    = %g\n",himedinfo->rho);
lib/ansol_esgn_model.c:	fprintf(stream,"alpha  = %g\n",himedinfo->alpha);
lib/ansol_esgn_model.c:	fprintf(stream,"beta   = %g\n\n",himedinfo->beta);
lib/ansol_esgn_model.c:	RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c:	fprintf(stream,"fpeak     = %g\n",rickerinfo->fpeak);
lib/ansol_esgn_model.c:	fprintf(stream,"amp       = %g\n",rickerinfo->amp);
lib/ansol_esgn_model.c:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c:	fprintf(stream,"src_d[%d] = %g\n",idim,rickerinfo->src_d[idim]);
lib/esgn24_3d.c:   2-4 stagger finite difference in 3D for isotropic elastic wave
lib/esgn24_3d.c:#define C24 4.166666666666666666666667e-2
lib/esgn24_3d.c:// Normal stress updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Shear stress szx updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Shear stress sxy updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Shear stress szy updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Velocity component vz updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Velocity component vx updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:// Velocity component vy updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  /* sanity test - storage mode */
lib/esgn24_3d.c:  if ((dom->_s)[D_P0]._dims[0].n > NSTORE) return E_NOTIMESTEP;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  px_a = s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_a = s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_a = s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  mp00_a = s[D_MP00]._dims[0].n0 - nx;
lib/esgn24_3d.c:  mp01_a = s[D_MP01]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_pml_I_a = ld_pml[0]._s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_pml_I_a = ld_pml[0]._s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_pml_I_a = ld_pml[0]._s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_pml_II_a = ld_pml[3]._s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_pml_II_a = ld_pml[3]._s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_pml_II_a = ld_pml[3]._s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_pml_III_a = ld_pml[6]._s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_pml_III_a = ld_pml[6]._s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_pml_III_a = ld_pml[6]._s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_pml_IV_a = ld_pml[9]._s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_pml_IV_a = ld_pml[9]._s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_pml_IV_a = ld_pml[9]._s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_pml_V_a = ld_pml[12]._s[D_P0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  py_pml_V_a = ld_pml[12]._s[D_P1]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  pz_pml_V_a = ld_pml[12]._s[D_P2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  px_pml_VI_a = ld_pml[15]._s[D_P0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:  py_pml_VI_a = ld_pml[15]._s[D_P1]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:  pz_pml_VI_a = ld_pml[15]._s[D_P2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);  
lib/esgn24_3d.c:      px_aa = (tsz * s[D_P0]._dims[1].n0 - ny) * s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_aa = (tsz * s[D_P1]._dims[1].n0 - ny) * s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_aa = (tsz * s[D_P2]._dims[1].n0 - ny) * s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      mp00_aa = (tsz * s[D_MP00]._dims[1].n0 - ny) * s[D_MP00]._dims[0].n0;
lib/esgn24_3d.c:      mp01_aa = (tsz * s[D_MP01]._dims[1].n0 - ny) * s[D_MP01]._dims[0].n0;
lib/esgn24_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_I_aa   = (tsz * ld_pml[0]._s[D_P0]._dims[1].n0 - ny) * ld_pml[0]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_I_aa   = (tsz * ld_pml[0]._s[D_P1]._dims[1].n0 - ny) * ld_pml[0]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_I_aa   = (tsz * ld_pml[0]._s[D_P2]._dims[1].n0 - ny) * ld_pml[0]._s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_II_aa  = (tsz * ld_pml[3]._s[D_P0]._dims[1].n0 - ny) * ld_pml[3]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_II_aa  = (tsz * ld_pml[3]._s[D_P1]._dims[1].n0 - ny) * ld_pml[3]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_II_aa  = (tsz * ld_pml[3]._s[D_P2]._dims[1].n0 - ny) * ld_pml[3]._s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_III_aa = (tsz * ld_pml[6]._s[D_P0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_III_aa = (tsz * ld_pml[6]._s[D_P1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_III_aa = (tsz * ld_pml[6]._s[D_P2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_V_aa   = (tsz * ld_pml[12]._s[D_P0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_V_aa   = (tsz * ld_pml[12]._s[D_P1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_V_aa   = (tsz * ld_pml[12]._s[D_P2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      px_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      py_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      pz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P2]._dims[0].n0;  
lib/esgn24_3d.c:    _px     = s[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py     = s[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz     = s[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_x_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _mp00   = cs[D_MP00]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _mp01   = cs[D_MP01]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx3    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 1;
lib/esgn24_3d.c:    _vy2    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy1    = _vy2 - dims[0].n0;
lib/esgn24_3d.c:    _vy0    = _vy1 - dims[0].n0;
lib/esgn24_3d.c:    _vz2    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz1    = _vz2 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _vz0    = _vz1 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:        vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_I) = ((*_px_x_I) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_px_y_I) = ((*_px_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_px_z_I) = ((*_px_z_I) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn24_3d.c:          (*_py_x_I) = ((*_py_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_y_I) = ((*_py_y_I) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_py_z_I) = ((*_py_z_I) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn24_3d.c:          (*_pz_x_I) = ((*_pz_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_y_I) = ((*_pz_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_pz_z_I) = ((*_pz_z_I) * (1.0f - etazdt) + dfdz*(*_mp00))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:    _px   += (gze_pml_I + 1 + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn24_3d.c:    _py   += (gze_pml_I + 1 + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn24_3d.c:    _pz   += (gze_pml_I + 1 + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _mp00 += (gze_pml_I + 1 + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn24_3d.c:    _mp01 += (gze_pml_I + 1 + tid - iz) * s[D_MP01]._dims[0].n0 * s[D_MP01]._dims[1].n0;
lib/esgn24_3d.c:    _vx3  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vy2  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz2  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _px_x_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_x_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_x_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_x_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_III) = ((*_px_x_III) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_px_y_III) = ((*_px_y_III) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_py_x_III) = ((*_py_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_y_III) = ((*_py_y_III) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_pz_x_III) = ((*_pz_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_y_III) = ((*_pz_y_III) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_3d.c:        for ( _pxend = _px + gxe_pml_V-gxs_pml_V+1; _px < _pxend; ) {
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_V) = ((*_px_x_V) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_x_V) = ((*_py_x_V) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_x_V) = ((*_pz_x_V) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _pxend = _px + gxs_pml_VI-gxe_pml_V-1; _px < _pxend;) {
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:        for ( _pxend = _px + gxe_pml_VI-gxs_pml_VI+1; _px < _pxend; ) {
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_VI) = ((*_px_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_x_VI) = ((*_py_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_x_VI) = ((*_pz_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_IV) = ((*_px_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_px_y_IV) = ((*_px_y_IV) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_py_x_IV) = ((*_py_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_y_IV) = ((*_py_y_IV) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_pz_x_IV) = ((*_pz_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_y_IV) = ((*_pz_y_IV) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _px   += (gzs_pml_II + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn24_3d.c:    _py   += (gzs_pml_II + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn24_3d.c:    _pz   += (gzs_pml_II + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _mp00 += (gzs_pml_II + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn24_3d.c:    _mp01 += (gzs_pml_II + tid - iz) * s[D_MP01]._dims[0].n0 * s[D_MP01]._dims[1].n0;
lib/esgn24_3d.c:    _vx3  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vy2  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz2  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _px_x_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_x_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_x_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_y_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_y_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_y_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px_z_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py_z_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz_z_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:        vx2 = _vx3[-1]; vx1 = _vx3[-2]; vx0 = _vx3[-3];
lib/esgn24_3d.c:          dfdx = (vx3 - vx0 + (vx1 - vx2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_px_x_II) = ((*_px_x_II) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_px_y_II) = ((*_px_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_px_z_II) = ((*_px_z_II) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn24_3d.c:          (*_py_x_II) = ((*_py_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_py_y_II) = ((*_py_y_II) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_py_z_II) = ((*_py_z_II) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn24_3d.c:          (*_pz_x_II) = ((*_pz_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_pz_y_II) = ((*_pz_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_pz_z_II) = ((*_pz_z_II) * (1.0f - etazdt) + dfdz*(*_mp00))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  ms0_a = s[D_MS0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_pml_I_a   = ld_pml[0 ]._s[D_S0]._dims[0].n0 - nx;   
lib/esgn24_3d.c:  sxy_pml_II_a  = ld_pml[3 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_pml_III_a = ld_pml[6 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_pml_IV_a  = ld_pml[9 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_pml_V_a   = ld_pml[12]._s[D_S0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  sxy_pml_VI_a  = ld_pml[15]._s[D_S0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      ms0_aa = (tsz * s[D_MS0]._dims[1].n0 - ny) * s[D_MS0]._dims[0].n0;
lib/esgn24_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_I_aa   = (tsz * ld_pml[0]._s[D_S0]._dims[1].n0 - ny) * ld_pml[0]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_II_aa  = (tsz * ld_pml[3]._s[D_S0]._dims[1].n0 - ny) * ld_pml[3]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_III_aa = (tsz * ld_pml[6]._s[D_S0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_V_aa   = (tsz * ld_pml[12]._s[D_S0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_pml_VI_aa  = (tsz * ld_pml[15]._s[D_S0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:    _sxy     = s[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_x_I = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_I = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _ms0     = cs[D_MS0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy3    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 2;
lib/esgn24_3d.c:    _vx1    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx0    = _vx1 - dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:        vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_I) = ((*_sxy_x_I) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxy_y_I) = ((*_sxy_y_I) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _sxy  += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _ms0  += (gze_pml_I + 1 + tid - iz) * s[D_MS0]._dims[0].n0 * s[D_MS0]._dims[1].n0;
lib/esgn24_3d.c:    _vy3  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vx2  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _sxy_x_III = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_III = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_x_IV = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_IV = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_x_V  = s_pml[D_S0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_V  = s_pml[D_S0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_x_VI = s_pml[D_S0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_VI = s_pml[D_S0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_III) = ((*_sxy_x_III) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxy_y_III) = ((*_sxy_y_III) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_3d.c:        for ( _sxyend = _sxy + gxe_pml_V-gxs_pml_V+1; _sxy < _sxyend; ) {
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_V) = ((*_sxy_x_V) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _sxyend = _sxy + gxs_pml_VI-gxe_pml_V-1; _sxy < _sxyend;) {
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:        for ( _sxyend = _sxy + gxe_pml_VI-gxs_pml_VI+1; _sxy < _sxyend; ) {
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_VI) = ((*_sxy_x_VI) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_IV) = ((*_sxy_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxy_y_IV) = ((*_sxy_y_IV) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _sxy  += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _ms0  += (gzs_pml_II + tid - iz) * s[D_MS0]._dims[0].n0 * s[D_MS0]._dims[1].n0;
lib/esgn24_3d.c:    _vy3  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vx2  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:    _sxy_x_II = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy_y_II = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:        vy2 = _vy3[-1]; vy1 = _vy3[-2]; vy0 = _vy3[-3];
lib/esgn24_3d.c:          dfdx = (vy3 - vy0 + (vy1 - vy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * lay;
lib/esgn24_3d.c:          (*_sxy_x_II) = ((*_sxy_x_II) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxy_y_II) = ((*_sxy_y_II) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  ms1_a = s[D_MS1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_pml_I_a   = ld_pml[0]._s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_pml_II_a  = ld_pml[3]._s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_pml_III_a = ld_pml[6]._s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_pml_IV_a  = ld_pml[9]._s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      ms1_aa = (tsz * s[D_MS1]._dims[1].n0 - ny) * s[D_MS1]._dims[0].n0;
lib/esgn24_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      syz_pml_I_aa   = (tsz * ld_pml[0]._s[D_S1]._dims[1].n0 - ny) * ld_pml[0]._s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      syz_pml_II_aa  = (tsz * ld_pml[3]._s[D_S1]._dims[1].n0 - ny) * ld_pml[3]._s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      syz_pml_III_aa = (tsz * ld_pml[6]._s[D_S1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      syz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:    _syz    = s[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_y_I = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_z_I = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _ms1    = cs[D_MS1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy1    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy0    = _vy1 - dims[0].n0 * dims[1].n0;
lib/esgn24_3d.c:    _vz1    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz0    = _vz1 - dims[0].n0;
lib/esgn24_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn24_3d.c:          dfdy = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_syz_y_I) = ((*_syz_y_I) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_syz_z_I) = ((*_syz_z_I) * (1.0f - etazdt) + dfdz*(*_ms1))/(1.0f + etazdt);
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:    _syz  += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _ms1  += (gze_pml_I + 1 + tid - iz) * s[D_MS1]._dims[0].n0 * s[D_MS1]._dims[1].n0;
lib/esgn24_3d.c:    _vy2  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz2  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _syz_y_III = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_z_III = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_y_IV = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_z_IV = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:          dfdy = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_syz_y_III) = ((*_syz_y_III) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn24_3d.c:          dfdy = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * laz;
lib/esgn24_3d.c:          dfdy = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_syz_y_IV) = ((*_syz_y_IV) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _syz  += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _ms1  += (gzs_pml_II + tid - iz) * s[D_MS1]._dims[0].n0 * s[D_MS1]._dims[1].n0;
lib/esgn24_3d.c:    _vy2  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz2  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:    _syz_y_II = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz_z_II = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:          dfdy = ((*_vz3++) - (*_vz0++) + ((*_vz1++) - (*_vz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_vy3++) - (*_vy0++) + ((*_vy1++) - (*_vy2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_syz_y_II) = ((*_syz_y_II) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_syz_z_II) = ((*_syz_z_II) * (1.0f - etazdt) + dfdz*(*_ms1))/(1.0f + etazdt);
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  ms2_a = s[D_MS2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_pml_I_a   = ld_pml[0]._s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_pml_II_a  = ld_pml[3]._s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_pml_III_a = ld_pml[6]._s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_pml_IV_a  = ld_pml[9]._s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_pml_V_a   = ld_pml[12]._s[D_S2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  sxz_pml_VI_a  = ld_pml[15]._s[D_S2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);  
lib/esgn24_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      ms2_aa = (tsz * s[D_MS2]._dims[1].n0 - ny) * s[D_MS2]._dims[0].n0;
lib/esgn24_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_I_aa   = (tsz * ld_pml[0]._s[D_S2]._dims[1].n0 - ny) * ld_pml[0]._s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_II_aa  = (tsz * ld_pml[3]._s[D_S2]._dims[1].n0 - ny) * ld_pml[3]._s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_III_aa = (tsz * ld_pml[6]._s[D_S2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_V_aa   = (tsz * ld_pml[12]._s[D_S2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_S2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_S2]._dims[0].n0;  
lib/esgn24_3d.c:    _sxz     = s[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_x_I  = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_I  = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _ms2    = cs[D_MS2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz3    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 2;
lib/esgn24_3d.c:    _vx1    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx0    = _vx1 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:        vz2 = _vz3[-1]; vz1 = _vz3[-2]; vz0 = _vz3[-3];
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_I) = ((*_sxz_x_I) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxz_z_I) = ((*_sxz_z_I) * (1.0f - etazdt) + dfdz*(*_ms2))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:    _sxz  += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _ms2  += (gze_pml_I + 1 + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn24_3d.c:    _vz3  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vx2  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _sxz_x_III = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_III = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_x_IV = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_IV = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_x_V  = s_pml[D_S2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_V  = s_pml[D_S2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_x_VI = s_pml[D_S2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_VI = s_pml[D_S2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        vz2 = _vz3[-1]; vz1 = _vz3[-2]; vz0 = _vz3[-3];
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_III) = ((*_sxz_x_III) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vz2 = _vz3[-1]; vz1 = _vz3[-2]; vz0 = _vz3[-3];
lib/esgn24_3d.c:        for ( _sxzend = _sxz + gxe_pml_V-gxs_pml_V+1; _sxz < _sxzend; ) {
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_V) = ((*_sxz_x_V) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _sxzend = _sxz + gxs_pml_VI-gxe_pml_V-1; _sxz < _sxzend;) {
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:        for ( _sxzend = _sxz + gxe_pml_VI-gxs_pml_VI+1; _sxz < _sxzend; ) {
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_VI) = ((*_sxz_x_VI) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        vz2 = _vz3[-1]; vz1 = _vz3[-2]; vz0 = _vz3[-3];
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_IV) = ((*_sxz_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:    _sxz  += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _ms2  += (gzs_pml_II + tid - iz) * s[D_MS2]._dims[0].n0 * s[D_MS2]._dims[1].n0;
lib/esgn24_3d.c:    _vz3  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _vx2  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _sxz_x_II = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz_z_II = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:        vz2 = _vz3[-1]; vz1 = _vz3[-2]; vz0 = _vz3[-3];
lib/esgn24_3d.c:          dfdx = (vz3 - vz0 + (vz1 - vz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdz = ((*_vx3++) - (*_vx0++) + ((*_vx1++) - (*_vx2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_sxz_x_II) = ((*_sxz_x_II) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_sxz_z_II) = ((*_sxz_z_II) * (1.0f - etazdt) + dfdz*(*_ms2))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  mvx_a = s[D_MV0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  px_a  = s[D_P0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_pml_I_a   = ld_pml[0]._s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_pml_II_a  = ld_pml[3]._s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_pml_III_a = ld_pml[6]._s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_pml_IV_a  = ld_pml[9]._s[D_V0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vx_pml_V_a   = ld_pml[12]._s[D_V0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  vx_pml_VI_a  = ld_pml[15]._s[D_V0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:      vx_aa  = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      mvx_aa = (tsz * s[D_MV0]._dims[1].n0 - ny) * s[D_MV0]._dims[0].n0;
lib/esgn24_3d.c:      px_aa  = (tsz * s[D_P0]._dims[1].n0 - ny) * s[D_P0]._dims[0].n0;
lib/esgn24_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_I_aa   = (tsz * ld_pml[0]._s[D_V0]._dims[1].n0 - ny) * ld_pml[0]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_II_aa  = (tsz * ld_pml[3]._s[D_V0]._dims[1].n0 - ny) * ld_pml[3]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_III_aa = (tsz * ld_pml[6]._s[D_V0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_V_aa   = (tsz * ld_pml[12]._s[D_V0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:      vx_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V0]._dims[0].n0;
lib/esgn24_3d.c:    _vx     = s[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_x_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _mvx    = cs[D_MV0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _px3    = rs[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 2;
lib/esgn24_3d.c:    _sxy2    = rs[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy1    = _sxy2 - dims[0].n0;
lib/esgn24_3d.c:    _sxy0    = _sxy1 - dims[0].n0;
lib/esgn24_3d.c:    _sxz2    = rs[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz1    = _sxz2 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _sxz0    = _sxz1 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:        px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_I) = ((*_vx_x_I) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vx_y_I) = ((*_vx_y_I) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vx_z_I) = ((*_vx_z_I) * (1.0f - etazdt) + dfdz*(*_mvx))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:    _vx   += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _mvx  += (gze_pml_I + 1 + tid - iz) * s[D_MV0]._dims[0].n0 * s[D_MV0]._dims[1].n0;
lib/esgn24_3d.c:    _px3  += (gze_pml_I + 1 + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn24_3d.c:    _sxy2 += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _sxz2 += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:    _sxz1 = _sxz2 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _sxz0 = _sxz1 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _vx_x_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_x_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_x_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_x_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_III) = ((*_vx_x_III) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vx_y_III) = ((*_vx_y_III) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_3d.c:        for ( _vxend = _vx + gxe_pml_V-gxs_pml_V+1; _vx < _vxend; ) {
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_V) = ((*_vx_x_V) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _vxend = _vx + gxs_pml_VI-gxe_pml_V-1; _vx < _vxend;) {
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:        for ( _vxend = _vx + gxe_pml_VI-gxs_pml_VI+1; _vx < _vxend; ) {
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_VI) = ((*_vx_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_IV) = ((*_vx_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vx_y_IV) = ((*_vx_y_IV) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _vx   += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn24_3d.c:    _mvx  += (gzs_pml_II + tid - iz) * s[D_MV0]._dims[0].n0 * s[D_MV0]._dims[1].n0;
lib/esgn24_3d.c:    _px3  += (gzs_pml_II + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn24_3d.c:    _sxy2 += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _sxz2 += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:    _sxz1 = _sxz2 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _sxz0 = _sxz1 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _vx_x_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_y_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vx_z_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:        px2 = _px3[-1]; px1 = _px3[-2]; px0 = _px3[-3];
lib/esgn24_3d.c:          dfdx = (px3 - px0 + (px1 - px2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_sxy3++) - (*_sxy0++) + ((*_sxy1++) - (*_sxy2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_sxz3++) - (*_sxz0++) + ((*_sxz1++) - (*_sxz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vx_x_II) = ((*_vx_x_II) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vx_y_II) = ((*_vx_y_II) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vx_z_II) = ((*_vx_z_II) * (1.0f - etazdt) + dfdz*(*_mvx))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  mvy_a = s[D_MV1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn24_3d.c:  py_a  = s[D_P1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_pml_I_a   = ld_pml[0]._s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_pml_II_a  = ld_pml[3]._s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_pml_III_a = ld_pml[6]._s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_pml_IV_a  = ld_pml[9]._s[D_V1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vy_pml_V_a   = ld_pml[12]._s[D_V1]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  vy_pml_VI_a  = ld_pml[15]._s[D_V1]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:      vy_aa  = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      mvy_aa = (tsz * s[D_MV1]._dims[1].n0 - ny) * s[D_MV1]._dims[0].n0;
lib/esgn24_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn24_3d.c:      py_aa  = (tsz * s[D_P1]._dims[1].n0 - ny) * s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_I_aa   = (tsz * ld_pml[0]._s[D_V1]._dims[1].n0 - ny) * ld_pml[0]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_II_aa  = (tsz * ld_pml[3]._s[D_V1]._dims[1].n0 - ny) * ld_pml[3]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_III_aa = (tsz * ld_pml[6]._s[D_V1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_V_aa   = (tsz * ld_pml[12]._s[D_V1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:      vy_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V1]._dims[0].n0;
lib/esgn24_3d.c:    _vy     = s[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_x_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _mvy    = cs[D_MV1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxy3   = rs[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 1;
lib/esgn24_3d.c:    _py1     = rs[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _py0     = _py1 - dims[0].n0;
lib/esgn24_3d.c:    _syz2    = rs[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz1    = _syz2 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _syz0    = _syz1 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:        sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_I) = ((*_vy_x_I) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vy_y_I) = ((*_vy_y_I) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vy_z_I) = ((*_vy_z_I) * (1.0f - etazdt) + dfdz*(*_mvy))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:    _vy   += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _mvy  += (gze_pml_I + 1 + tid - iz) * s[D_MV1]._dims[0].n0 * s[D_MV1]._dims[1].n0;
lib/esgn24_3d.c:    _sxy3 += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _py2  += (gze_pml_I + 1 + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn24_3d.c:    _syz2 += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _py1  = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:    _py0  = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _vy_x_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_x_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_x_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_x_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_III) = ((*_vy_x_III) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vy_y_III) = ((*_vy_y_III) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_3d.c:        for ( _vyend = _vy + gxe_pml_V-gxs_pml_V+1; _vy < _vyend; ) {
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_V) = ((*_vy_x_V) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _vyend = _vy + gxs_pml_VI-gxe_pml_V-1; _vy < _vyend;) {
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:        for ( _vyend = _vy + gxe_pml_VI-gxs_pml_VI+1; _vy < _vyend; ) {
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_VI) = ((*_vy_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_IV) = ((*_vy_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vy_y_IV) = ((*_vy_y_IV) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _vy   += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn24_3d.c:    _mvy  += (gzs_pml_II + tid - iz) * s[D_MV1]._dims[0].n0 * s[D_MV1]._dims[1].n0;
lib/esgn24_3d.c:    _sxy3 += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn24_3d.c:    _py2  += (gzs_pml_II + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn24_3d.c:    _syz2 += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn24_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _vy_x_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_y_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vy_z_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:        sxy2 = _sxy3[-1]; sxy1 = _sxy3[-2]; sxy0 = _sxy3[-3];
lib/esgn24_3d.c:          dfdx = (sxy3 - sxy0 + (sxy1 - sxy2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_py3++) - (*_py0++) + ((*_py1++) - (*_py2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vy_x_II) = ((*_vy_x_II) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vy_y_II) = ((*_vy_y_II) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vy_z_II) = ((*_vy_z_II) * (1.0f - etazdt) + dfdz*(*_mvy))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:  s = dom->_s;
lib/esgn24_3d.c:  rs = rdom->_s;
lib/esgn24_3d.c:  cs = cdom->_s;
lib/esgn24_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2] * C24;
lib/esgn24_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_3d.c:    gze_pml_I = gzs-1;
lib/esgn24_3d.c:    gye_pml_III = gys-1;
lib/esgn24_3d.c:    gxe_pml_V = gxs-1;
lib/esgn24_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  mvz_a = s[D_MV2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn24_3d.c:  pz_a  = s[D_P2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_pml_I_a   = ld_pml[0]._s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_pml_II_a  = ld_pml[3]._s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_pml_III_a = ld_pml[6]._s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_pml_IV_a  = ld_pml[9]._s[D_V2]._dims[0].n0 - nx;
lib/esgn24_3d.c:  vz_pml_V_a   = ld_pml[12]._s[D_V2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn24_3d.c:  vz_pml_VI_a  = ld_pml[15]._s[D_V2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn24_3d.c:      vz_aa  = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      mvz_aa = (tsz * s[D_MV2]._dims[1].n0 - ny) * s[D_MV2]._dims[0].n0;
lib/esgn24_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn24_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:      pz_aa  = (tsz * s[D_P2]._dims[1].n0 - ny) * s[D_P2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_I_aa   = (tsz * ld_pml[0]._s[D_V2]._dims[1].n0 - ny) * ld_pml[0]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_II_aa  = (tsz * ld_pml[3]._s[D_V2]._dims[1].n0 - ny) * ld_pml[3]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_III_aa = (tsz * ld_pml[6]._s[D_V2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_V_aa   = (tsz * ld_pml[12]._s[D_V2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:      vz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V2]._dims[0].n0;
lib/esgn24_3d.c:    _vz     = s[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_x_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _mvz    = cs[D_MV2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _sxz3    = rs[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 1;
lib/esgn24_3d.c:    _syz2    = rs[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _syz1    = _syz2 - dims[0].n0;
lib/esgn24_3d.c:    _syz0    = _syz1 - dims[0].n0;
lib/esgn24_3d.c:    _pz1    = rs[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _pz0    = _pz1 - dims[1].n0 * dims[0].n0;
lib/esgn24_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn24_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn24_3d.c:        sxz2 = _sxz3[-1]; sxz1 = _sxz3[-2]; sxz0 = _sxz3[-3];
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_I) = ((*_vz_x_I) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vz_y_I) = ((*_vz_y_I) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vz_z_I) = ((*_vz_z_I) * (1.0f - etazdt) + dfdz*(*_mvz))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:    _vz   += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _mvz  += (gze_pml_I + 1 + tid - iz) * s[D_MV2]._dims[0].n0 * s[D_MV2]._dims[1].n0;
lib/esgn24_3d.c:    _sxz3 += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _syz2 += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _pz2  += (gze_pml_I + 1 + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:    _pz1 = _pz2 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _pz0 = _pz1 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn24_3d.c:    _vz_x_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_x_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_x_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_x_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:        sxz2 = _sxz3[-1]; sxz1 = _sxz3[-2]; sxz0 = _sxz3[-3];
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_III) = ((*_vz_x_III) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vz_y_III) = ((*_vz_y_III) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        sxz2 = _sxz3[-1]; sxz1 = _sxz3[-2]; sxz0 = _sxz3[-3];
lib/esgn24_3d.c:        for ( _vzend = _vz + gxe_pml_V-gxs_pml_V+1; _vz < _vzend; ) {
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_V) = ((*_vz_x_V) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:        for ( _vzend = _vz + gxs_pml_VI-gxe_pml_V-1; _vz < _vzend;) {
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:        for ( _vzend = _vz + gxe_pml_VI-gxs_pml_VI+1; _vz < _vzend; ) {
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_VI) = ((*_vz_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:        sxz2 = _sxz3[-1]; sxz1 = _sxz3[-2]; sxz0 = _sxz3[-3];
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_IV) = ((*_vz_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vz_y_IV) = ((*_vz_y_IV) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny;
lib/esgn24_3d.c:    _vz   += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn24_3d.c:    _mvz  += (gzs_pml_II + tid - iz) * s[D_MV2]._dims[0].n0 * s[D_MV2]._dims[1].n0;
lib/esgn24_3d.c:    _sxz3 += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn24_3d.c:    _syz2 += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn24_3d.c:    _pz2  += (gzs_pml_II + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0;
lib/esgn24_3d.c:    _pz1 = _pz2 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _pz0 = _pz1 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn24_3d.c:    _vz_x_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_y_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _vz_z_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn24_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn24_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn24_3d.c:        sxz2 = _sxz3[-1]; sxz1 = _sxz3[-2]; sxz0 = _sxz3[-3];
lib/esgn24_3d.c:          dfdx = (sxz3 - sxz0 + (sxz1 - sxz2) * 27.0) * lax; 
lib/esgn24_3d.c:          dfdy = ((*_syz3++) - (*_syz0++) + ((*_syz1++) - (*_syz2++)) * 27.0) * lay;
lib/esgn24_3d.c:          dfdz = ((*_pz3++) - (*_pz0++) + ((*_pz1++) - (*_pz2++)) * 27.0) * laz;
lib/esgn24_3d.c:          (*_vz_x_II) = ((*_vz_x_II) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn24_3d.c:          (*_vz_y_II) = ((*_vz_y_II) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn24_3d.c:          (*_vz_z_II) = ((*_vz_z_II) * (1.0f - etazdt) + dfdz*(*_mvz))/(1.0f + etazdt);
lib/esgn24_3d.c:        _epx -= nx;
lib/esgn24_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn24_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn24_3d.c:/*---- END POINTER BRANCH ----------------------------------------------------*/
lib/esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/esg_multi_sampler.c:	//Setting multi-sampler m_s to null.
lib/esg_multi_sampler.c:	m_s->sampler_select = esg_sampler_select;
Binary file lib/smooth_pointsrc.o matches
Binary file lib/libesg.a matches
lib/esgn210_3d.c:   2-10 stagger finite difference in 3D for isotropic elastic wave
lib/esgn210_3d.c:static const ireal COEFF5[] = {     -19845.0e0/16384.0e0,       735.0e0/8192.0e0,       -567.0e0/40960.0e0,     405.0e0/229376.0e0,      -35.0e0/294912.0e0}; /* 2-10*/
lib/esgn210_3d.c:/* #define C1 ( -19845.0e0/16384.0e0  ) */
lib/esgn210_3d.c:/* #define C3 (   -567.0e0/40960.0e0  ) */
lib/esgn210_3d.c:/* #define C5 (    -35.0e0/294912.0e0 ) */
lib/esgn210_3d.c:/* #define C1 (-1.21124267578125f) */
lib/esgn210_3d.c:/* #define C3 (-0.0138427734375000f) */
lib/esgn210_3d.c:/* #define C5 (-1.18679470486111e-04f) */
lib/esgn210_3d.c:#define C24 4.166666666666666666666667e-2
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c: * Normal stress updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Shear stress szx updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Shear stress sxy updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Shear stress szy updater of 3D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Velocity component vz updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Velocity component vx updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c: * Velocity component vy updater of 2D stagger-grid 2-4 scheme for EWE  
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  /* sanity test - storage mode */
lib/esgn210_3d.c:  if ((dom->_s)[D_P0]._dims[0].n > NSTORE) return E_NOTIMESTEP;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  px_a = s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_a = s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_a = s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  mp00_a = s[D_MP00]._dims[0].n0 - nx;
lib/esgn210_3d.c:  mp01_a = s[D_MP01]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_pml_I_a = ld_pml[0]._s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_pml_I_a = ld_pml[0]._s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_pml_I_a = ld_pml[0]._s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_pml_II_a = ld_pml[3]._s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_pml_II_a = ld_pml[3]._s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_pml_II_a = ld_pml[3]._s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_pml_III_a = ld_pml[6]._s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_pml_III_a = ld_pml[6]._s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_pml_III_a = ld_pml[6]._s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_pml_IV_a = ld_pml[9]._s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_pml_IV_a = ld_pml[9]._s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_pml_IV_a = ld_pml[9]._s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_pml_V_a = ld_pml[12]._s[D_P0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  py_pml_V_a = ld_pml[12]._s[D_P1]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  pz_pml_V_a = ld_pml[12]._s[D_P2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  px_pml_VI_a = ld_pml[15]._s[D_P0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:  py_pml_VI_a = ld_pml[15]._s[D_P1]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:  pz_pml_VI_a = ld_pml[15]._s[D_P2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);  
lib/esgn210_3d.c:      px_aa = (tsz * s[D_P0]._dims[1].n0 - ny) * s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_aa = (tsz * s[D_P1]._dims[1].n0 - ny) * s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_aa = (tsz * s[D_P2]._dims[1].n0 - ny) * s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      mp00_aa = (tsz * s[D_MP00]._dims[1].n0 - ny) * s[D_MP00]._dims[0].n0;
lib/esgn210_3d.c:      mp01_aa = (tsz * s[D_MP01]._dims[1].n0 - ny) * s[D_MP01]._dims[0].n0;
lib/esgn210_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_I_aa   = (tsz * ld_pml[0]._s[D_P0]._dims[1].n0 - ny) * ld_pml[0]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_I_aa   = (tsz * ld_pml[0]._s[D_P1]._dims[1].n0 - ny) * ld_pml[0]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_I_aa   = (tsz * ld_pml[0]._s[D_P2]._dims[1].n0 - ny) * ld_pml[0]._s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_II_aa  = (tsz * ld_pml[3]._s[D_P0]._dims[1].n0 - ny) * ld_pml[3]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_II_aa  = (tsz * ld_pml[3]._s[D_P1]._dims[1].n0 - ny) * ld_pml[3]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_II_aa  = (tsz * ld_pml[3]._s[D_P2]._dims[1].n0 - ny) * ld_pml[3]._s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_III_aa = (tsz * ld_pml[6]._s[D_P0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_III_aa = (tsz * ld_pml[6]._s[D_P1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_III_aa = (tsz * ld_pml[6]._s[D_P2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_P2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_V_aa   = (tsz * ld_pml[12]._s[D_P0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_V_aa   = (tsz * ld_pml[12]._s[D_P1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_V_aa   = (tsz * ld_pml[12]._s[D_P2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      px_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      py_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      pz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_P2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_P2]._dims[0].n0;  
lib/esgn210_3d.c:    _px     = s[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py     = s[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz     = s[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_x_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_I = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_I = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_I = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _mp00   = cs[D_MP00]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _mp01   = cs[D_MP01]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx9    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 4;
lib/esgn210_3d.c:    _vy5    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy4    = _vy5 - dims[0].n0;
lib/esgn210_3d.c:    _vy3    = _vy4 - dims[0].n0;
lib/esgn210_3d.c:    _vy2    = _vy3 - dims[0].n0;
lib/esgn210_3d.c:    _vy1    = _vy2 - dims[0].n0;
lib/esgn210_3d.c:    _vy0    = _vy1 - dims[0].n0;
lib/esgn210_3d.c:    _vz5    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz4    = _vz5 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vz3    = _vz4 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vz2    = _vz3 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vz1    = _vz2 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vz0    = _vz1 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vx8 = _vx9[-1]; vx7 = _vx9[-2]; vx6 = _vx9[-3];
lib/esgn210_3d.c:        vx5 = _vx9[-4]; vx4 = _vx9[-5]; vx3 = _vx9[-6];
lib/esgn210_3d.c:        vx2 = _vx9[-7]; vx1 = _vx9[-8]; vx0 = _vx9[-9];
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_I) = ((*_px_x_I) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_px_y_I) = ((*_px_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_px_z_I) = ((*_px_z_I) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn210_3d.c:            (*_py_x_I) = ((*_py_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_y_I) = ((*_py_y_I) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_py_z_I) = ((*_py_z_I) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn210_3d.c:            (*_pz_x_I) = ((*_pz_x_I) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_y_I) = ((*_pz_y_I) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_pz_z_I) = ((*_pz_z_I) * (1.0f - etazdt) + dfdz*(*_mp00))/(1.0f + etazdt);
lib/esgn210_3d.c:            (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:    _px   += (gze_pml_I + 1 + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn210_3d.c:    _py   += (gze_pml_I + 1 + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn210_3d.c:    _pz   += (gze_pml_I + 1 + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _mp00 += (gze_pml_I + 1 + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn210_3d.c:    _mp01 += (gze_pml_I + 1 + tid - iz) * s[D_MP01]._dims[0].n0 * s[D_MP01]._dims[1].n0;
lib/esgn210_3d.c:    _vx9  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vy5  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz5  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vy4 = _vy5 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy3 = _vy4 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy2 = _vy3 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vz4 = _vz5 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz3 = _vz4 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz2 = _vz3 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _px_x_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_III = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_III = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_III = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_x_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_IV  = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_IV  = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_IV  = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_x_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_V   = s_pml[D_P0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_V   = s_pml[D_P1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_V   = s_pml[D_P2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_x_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_VI  = s_pml[D_P0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_VI  = s_pml[D_P1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_VI  = s_pml[D_P2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vx8 = _vx9[-1]; vx7 = _vx9[-2]; vx6 = _vx9[-3];
lib/esgn210_3d.c:        vx5 = _vx9[-4]; vx4 = _vx9[-5]; vx3 = _vx9[-6];
lib/esgn210_3d.c:        vx2 = _vx9[-7]; vx1 = _vx9[-8]; vx0 = _vx9[-9];
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_III) = ((*_px_x_III) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_px_y_III) = ((*_px_y_III) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_py_x_III) = ((*_py_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_y_III) = ((*_py_y_III) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_pz_x_III) = ((*_pz_x_III) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_y_III) = ((*_pz_y_III) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vx8 = _vx9[-1]; vx7 = _vx9[-2]; vx6 = _vx9[-3];
lib/esgn210_3d.c:        vx5 = _vx9[-4]; vx4 = _vx9[-5]; vx3 = _vx9[-6];
lib/esgn210_3d.c:        vx2 = _vx9[-7]; vx1 = _vx9[-8]; vx0 = _vx9[-9];
lib/esgn210_3d.c:        for ( _pxend = _px + gxe_pml_V-gxs_pml_V+1; _px < _pxend; ) {
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_V) = ((*_px_x_V) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_x_V) = ((*_py_x_V) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_x_V) = ((*_pz_x_V) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _pxend = _px + gxs_pml_VI-gxe_pml_V-1; _px < _pxend;) {
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt); 
lib/esgn210_3d.c:        for ( _pxend = _px + gxe_pml_VI-gxs_pml_VI+1; _px < _pxend; ) {
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_VI) = ((*_px_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_x_VI) = ((*_py_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_x_VI) = ((*_pz_x_VI) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vx8 = _vx9[-1]; vx7 = _vx9[-2]; vx6 = _vx9[-3];
lib/esgn210_3d.c:        vx5 = _vx9[-4]; vx4 = _vx9[-5]; vx3 = _vx9[-6];
lib/esgn210_3d.c:        vx2 = _vx9[-7]; vx1 = _vx9[-8]; vx0 = _vx9[-9];
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_IV) = ((*_px_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_px_y_IV) = ((*_px_y_IV) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_py_x_IV) = ((*_py_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_y_IV) = ((*_py_y_IV) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_pz_x_IV) = ((*_pz_x_IV) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_y_IV) = ((*_pz_y_IV) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _px   += (gzs_pml_II + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn210_3d.c:    _py   += (gzs_pml_II + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn210_3d.c:    _pz   += (gzs_pml_II + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _mp00 += (gzs_pml_II + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn210_3d.c:    _mp01 += (gzs_pml_II + tid - iz) * s[D_MP01]._dims[0].n0 * s[D_MP01]._dims[1].n0;
lib/esgn210_3d.c:    _vx9  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vy5  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz5  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vy4 = _vy5 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy3 = _vy4 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy2 = _vy3 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vz4 = _vz5 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz3 = _vz4 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz2 = _vz3 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _px_x_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_x_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_x_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_y_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_y_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_y_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px_z_II = s_pml[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py_z_II = s_pml[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz_z_II = s_pml[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vx8 = _vx9[-1]; vx7 = _vx9[-2]; vx6 = _vx9[-3];
lib/esgn210_3d.c:        vx5 = _vx9[-4]; vx4 = _vx9[-5]; vx3 = _vx9[-6];
lib/esgn210_3d.c:        vx2 = _vx9[-7]; vx1 = _vx9[-8]; vx0 = _vx9[-9];
lib/esgn210_3d.c:          dfdx = ((vx9 - vx0) * C5 + (vx8 - vx1) * C4 + (vx7 - vx2) * C3 + (vx6 - vx3) * C2 + (vx5 - vx4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz  =(((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * laz;            
lib/esgn210_3d.c:            (*_px_x_II) = ((*_px_x_II) * (1.0f - etaxdt) + dfdx*(*_mp00))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_px_y_II) = ((*_px_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_px_z_II) = ((*_px_z_II) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn210_3d.c:            (*_py_x_II) = ((*_py_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_py_y_II) = ((*_py_y_II) * (1.0f - etaydt) + dfdy*(*_mp00))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_py_z_II) = ((*_py_z_II) * (1.0f - etazdt) + dfdz*(*_mp01))/(1.0f + etazdt);
lib/esgn210_3d.c:            (*_pz_x_II) = ((*_pz_x_II) * (1.0f - etaxdt) + dfdx*(*_mp01))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_pz_y_II) = ((*_pz_y_II) * (1.0f - etaydt) + dfdy*(*_mp01))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_pz_z_II) = ((*_pz_z_II) * (1.0f - etazdt) + dfdz*(*_mp00))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  ms0_a = s[D_MS0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_pml_I_a   = ld_pml[0 ]._s[D_S0]._dims[0].n0 - nx;   
lib/esgn210_3d.c:  sxy_pml_II_a  = ld_pml[3 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_pml_III_a = ld_pml[6 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_pml_IV_a  = ld_pml[9 ]._s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_pml_V_a   = ld_pml[12]._s[D_S0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  sxy_pml_VI_a  = ld_pml[15]._s[D_S0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      ms0_aa = (tsz * s[D_MS0]._dims[1].n0 - ny) * s[D_MS0]._dims[0].n0;
lib/esgn210_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_I_aa   = (tsz * ld_pml[0]._s[D_S0]._dims[1].n0 - ny) * ld_pml[0]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_II_aa  = (tsz * ld_pml[3]._s[D_S0]._dims[1].n0 - ny) * ld_pml[3]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_III_aa = (tsz * ld_pml[6]._s[D_S0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_V_aa   = (tsz * ld_pml[12]._s[D_S0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_pml_VI_aa  = (tsz * ld_pml[15]._s[D_S0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy     = s[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_x_I = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_I = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _ms0     = cs[D_MS0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy9    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 5;
lib/esgn210_3d.c:    _vx4    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx3    = _vx4 - dims[0].n0;
lib/esgn210_3d.c:    _vx2    = _vx3 - dims[0].n0;
lib/esgn210_3d.c:    _vx1    = _vx2 - dims[0].n0;
lib/esgn210_3d.c:    _vx0    = _vx1 - dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vy8 = _vy9[-1]; vy7 = _vy9[-2]; vy6 = _vy9[-3]; vy5 = _vy9[-4];
lib/esgn210_3d.c:        vy4 = _vy9[-5]; vy3 = _vy9[-6]; vy2 = _vy9[-7]; vy1 = _vy9[-8];
lib/esgn210_3d.c:        vy0 = _vy9[-9];
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_I) = ((*_sxy_x_I) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxy_y_I) = ((*_sxy_y_I) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _sxy  += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _ms0  += (gze_pml_I + 1 + tid - iz) * s[D_MS0]._dims[0].n0 * s[D_MS0]._dims[1].n0;
lib/esgn210_3d.c:    _vy9  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vx4  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx3 = _vx4 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx2 = _vx3 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _sxy_x_III = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_III = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_x_IV = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_IV = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_x_V  = s_pml[D_S0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_V  = s_pml[D_S0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_x_VI = s_pml[D_S0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_VI = s_pml[D_S0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vy8 = _vy9[-1]; vy7 = _vy9[-2]; vy6 = _vy9[-3]; vy5 = _vy9[-4];
lib/esgn210_3d.c:        vy4 = _vy9[-5]; vy3 = _vy9[-6]; vy2 = _vy9[-7]; vy1 = _vy9[-8];
lib/esgn210_3d.c:        vy0 = _vy9[-9];
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_III) = ((*_sxy_x_III) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxy_y_III) = ((*_sxy_y_III) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vy8 = _vy9[-1]; vy7 = _vy9[-2]; vy6 = _vy9[-3]; vy5 = _vy9[-4];
lib/esgn210_3d.c:        vy4 = _vy9[-5]; vy3 = _vy9[-6]; vy2 = _vy9[-7]; vy1 = _vy9[-8];
lib/esgn210_3d.c:        vy0 = _vy9[-9];
lib/esgn210_3d.c:        for ( _sxyend = _sxy + gxe_pml_V-gxs_pml_V+1; _sxy < _sxyend; ) {
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_V) = ((*_sxy_x_V) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _sxyend = _sxy + gxs_pml_VI-gxe_pml_V-1; _sxy < _sxyend;) {
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _sxyend = _sxy + gxe_pml_VI-gxs_pml_VI+1; _sxy < _sxyend; ) {
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_VI) = ((*_sxy_x_VI) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vy8 = _vy9[-1]; vy7 = _vy9[-2]; vy6 = _vy9[-3]; vy5 = _vy9[-4];
lib/esgn210_3d.c:        vy4 = _vy9[-5]; vy3 = _vy9[-6]; vy2 = _vy9[-7]; vy1 = _vy9[-8];
lib/esgn210_3d.c:        vy0 = _vy9[-9];
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_IV) = ((*_sxy_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxy_y_IV) = ((*_sxy_y_IV) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _sxy  += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _ms0  += (gzs_pml_II + tid - iz) * s[D_MS0]._dims[0].n0 * s[D_MS0]._dims[1].n0;
lib/esgn210_3d.c:    _vy9  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vx4  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx3 = _vx4 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx2 = _vx3 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy_x_II = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy_y_II = s_pml[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vy8 = _vy9[-1]; vy7 = _vy9[-2]; vy6 = _vy9[-3]; vy5 = _vy9[-4];
lib/esgn210_3d.c:        vy4 = _vy9[-5]; vy3 = _vy9[-6]; vy2 = _vy9[-7]; vy1 = _vy9[-8];
lib/esgn210_3d.c:        vy0 = _vy9[-9];
lib/esgn210_3d.c:          dfdx = ((vy9 - vy0) * C5 + (vy8 - vy1) * C4 + (vy7 - vy2) * C3 + (vy6 - vy3) * C2 + (vy5 - vy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * lay;
lib/esgn210_3d.c:            (*_sxy_x_II) = ((*_sxy_x_II) * (1.0f - etaxdt) + dfdx*(*_ms0))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxy_y_II) = ((*_sxy_y_II) * (1.0f - etaydt) + dfdy*(*_ms0))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  ms1_a = s[D_MS1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_pml_I_a   = ld_pml[0]._s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_pml_II_a  = ld_pml[3]._s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_pml_III_a = ld_pml[6]._s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_pml_IV_a  = ld_pml[9]._s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      ms1_aa = (tsz * s[D_MS1]._dims[1].n0 - ny) * s[D_MS1]._dims[0].n0;
lib/esgn210_3d.c:      vy_aa = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      syz_pml_I_aa   = (tsz * ld_pml[0]._s[D_S1]._dims[1].n0 - ny) * ld_pml[0]._s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      syz_pml_II_aa  = (tsz * ld_pml[3]._s[D_S1]._dims[1].n0 - ny) * ld_pml[3]._s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      syz_pml_III_aa = (tsz * ld_pml[6]._s[D_S1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      syz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz    = s[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_y_I = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_z_I = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _ms1    = cs[D_MS1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy4    = rs[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy3    = _vy4 - dims[0].n0 * dims[1].n0;
lib/esgn210_3d.c:    _vy2    = _vy3 - dims[0].n0 * dims[1].n0;
lib/esgn210_3d.c:    _vy1    = _vy2 - dims[0].n0 * dims[1].n0;
lib/esgn210_3d.c:    _vy0    = _vy1 - dims[0].n0 * dims[1].n0;
lib/esgn210_3d.c:    _vz4    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz3    = _vz4 - dims[0].n0;
lib/esgn210_3d.c:    _vz2    = _vz3 - dims[0].n0;
lib/esgn210_3d.c:    _vz1    = _vz2 - dims[0].n0;
lib/esgn210_3d.c:    _vz0    = _vz1 - dims[0].n0;
lib/esgn210_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:          dfdy = (((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_syz_y_I) = ((*_syz_y_I) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_syz_z_I) = ((*_syz_z_I) * (1.0f - etazdt) + dfdz*(*_ms1))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:    _syz  += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _ms1  += (gze_pml_I + 1 + tid - iz) * s[D_MS1]._dims[0].n0 * s[D_MS1]._dims[1].n0;
lib/esgn210_3d.c:    _vy4  += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz4  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vy3 = _vy4 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy2 = _vy3 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz3 = _vz4 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz2 = _vz3 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _syz_y_III = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_z_III = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_y_IV = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_z_IV = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:          dfdy = (((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_syz_y_III) = ((*_syz_y_III) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:          dfdy = (((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * laz;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:          dfdy = (((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_syz_y_IV) = ((*_syz_y_IV) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _syz  += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _ms1  += (gzs_pml_II + tid - iz) * s[D_MS1]._dims[0].n0 * s[D_MS1]._dims[1].n0;
lib/esgn210_3d.c:    _vy4  += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz4  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vy3 = _vy4 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy2 = _vy3 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy1 = _vy2 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vy0 = _vy1 - s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _vz3 = _vz4 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz2 = _vz3 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz1 = _vz2 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz0 = _vz1 - s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _syz_y_II = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz_z_II = s_pml[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:          dfdy = (((*_vz9++) - (*_vz0++)) * C5 + ((*_vz8++) - (*_vz1++)) * C4 + ((*_vz7++) - (*_vz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vz6++) - (*_vz3++)) * C2 + ((*_vz5++) - (*_vz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_vy9++) - (*_vy0++)) * C5 + ((*_vy8++) - (*_vy1++)) * C4 + ((*_vy7++) - (*_vy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vy6++) - (*_vy3++)) * C2 + ((*_vy5++) - (*_vy4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_syz_y_II) = ((*_syz_y_II) * (1.0f - etaydt) + dfdy*(*_ms1))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_syz_z_II) = ((*_syz_z_II) * (1.0f - etazdt) + dfdz*(*_ms1))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  ms2_a = s[D_MS2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_pml_I_a   = ld_pml[0]._s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_pml_II_a  = ld_pml[3]._s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_pml_III_a = ld_pml[6]._s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_pml_IV_a  = ld_pml[9]._s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_pml_V_a   = ld_pml[12]._s[D_S2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  sxz_pml_VI_a  = ld_pml[15]._s[D_S2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);  
lib/esgn210_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      ms2_aa = (tsz * s[D_MS2]._dims[1].n0 - ny) * s[D_MS2]._dims[0].n0;
lib/esgn210_3d.c:      vx_aa = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vz_aa = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_I_aa   = (tsz * ld_pml[0]._s[D_S2]._dims[1].n0 - ny) * ld_pml[0]._s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_II_aa  = (tsz * ld_pml[3]._s[D_S2]._dims[1].n0 - ny) * ld_pml[3]._s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_III_aa = (tsz * ld_pml[6]._s[D_S2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_S2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_V_aa   = (tsz * ld_pml[12]._s[D_S2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_S2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_S2]._dims[0].n0;  
lib/esgn210_3d.c:    _sxz     = s[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_x_I  = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_I  = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _ms2    = cs[D_MS2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz9    = rs[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 5;
lib/esgn210_3d.c:    _vx4    = rs[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx3    = _vx4 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vx2    = _vx3 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vx1    = _vx2 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _vx0    = _vx1 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vz8 = _vz9[-1]; vz7 = _vz9[-2]; vz6 = _vz9[-3]; vz5 = _vz9[-4];
lib/esgn210_3d.c:        vz4 = _vz9[-5]; vz3 = _vz9[-6]; vz2 = _vz9[-7]; vz1 = _vz9[-8];
lib/esgn210_3d.c:        vz0 = _vz9[-9];
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_I) = ((*_sxz_x_I) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxz_z_I) = ((*_sxz_z_I) * (1.0f - etazdt) + dfdz*(*_ms2))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:    _sxz  += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _ms2  += (gze_pml_I + 1 + tid - iz) * s[D_MP00]._dims[0].n0 * s[D_MP00]._dims[1].n0;
lib/esgn210_3d.c:    _vz9  += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vx4  += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx3 = _vx4 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx2 = _vx3 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _sxz_x_III = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_III = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_x_IV = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_IV = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_x_V  = s_pml[D_S2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_V  = s_pml[D_S2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_x_VI = s_pml[D_S2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_VI = s_pml[D_S2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vz8 = _vz9[-1]; vz7 = _vz9[-2]; vz6 = _vz9[-3]; vz5 = _vz9[-4];
lib/esgn210_3d.c:        vz4 = _vz9[-5];  vz3 = _vz9[-6]; vz2 = _vz9[-7]; vz1 = _vz9[-8];
lib/esgn210_3d.c:        vz0 = _vz9[-9];
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_III) = ((*_sxz_x_III) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vz8 = _vz9[-1]; vz7 = _vz9[-2]; vz6 = _vz9[-3]; vz5 = _vz9[-4];
lib/esgn210_3d.c:        vz4 = _vz9[-5];  vz3 = _vz9[-6]; vz2 = _vz9[-7]; vz1 = _vz9[-8];
lib/esgn210_3d.c:        vz0 = _vz9[-9];
lib/esgn210_3d.c:        for ( _sxzend = _sxz + gxe_pml_V-gxs_pml_V+1; _sxz < _sxzend; ) {
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_V) = ((*_sxz_x_V) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _sxzend = _sxz + gxs_pml_VI-gxe_pml_V-1; _sxz < _sxzend;) {
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _sxzend = _sxz + gxe_pml_VI-gxs_pml_VI+1; _sxz < _sxzend; ) {
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_VI) = ((*_sxz_x_VI) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        vz8 = _vz9[-1]; vz7 = _vz9[-2]; vz6 = _vz9[-3]; vz5 = _vz9[-4];
lib/esgn210_3d.c:        vz4 = _vz9[-5];  vz3 = _vz9[-6]; vz2 = _vz9[-7]; vz1 = _vz9[-8];
lib/esgn210_3d.c:        vz0 = _vz9[-9];
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_IV) = ((*_sxz_x_IV) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:    _sxz  += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _ms2  += (gzs_pml_II + tid - iz) * s[D_MS2]._dims[0].n0 * s[D_MS2]._dims[1].n0;
lib/esgn210_3d.c:    _vz9  += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _vx4  += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx3 = _vx4 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx2 = _vx3 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx1 = _vx2 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _vx0 = _vx1 - s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _sxz_x_II = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz_z_II = s_pml[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        vz8 = _vz9[-1]; vz7 = _vz9[-2]; vz6 = _vz9[-3]; vz5 = _vz9[-4];
lib/esgn210_3d.c:        vz4 = _vz9[-5];  vz3 = _vz9[-6]; vz2 = _vz9[-7]; vz1 = _vz9[-8];
lib/esgn210_3d.c:        vz0 = _vz9[-9];
lib/esgn210_3d.c:          dfdx = ((vz9 - vz0) * C5 + (vz8 - vz1) * C4 + (vz7 - vz2) * C3 +
lib/esgn210_3d.c:                  (vz6 - vz3) * C2 + (vz5 - vz4) * C1) * lax;
lib/esgn210_3d.c:          dfdz = (((*_vx9++) - (*_vx0++)) * C5 + ((*_vx8++) - (*_vx1++)) * C4 + ((*_vx7++) - (*_vx2++)) * C3 +
lib/esgn210_3d.c:                  ((*_vx6++) - (*_vx3++)) * C2 + ((*_vx5++) - (*_vx4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_sxz_x_II) = ((*_sxz_x_II) * (1.0f - etaxdt) + dfdx*(*_ms2))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_sxz_z_II) = ((*_sxz_z_II) * (1.0f - etazdt) + dfdz*(*_ms2))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  vx_a = s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  mvx_a = s[D_MV0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  px_a  = s[D_P0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_pml_I_a   = ld_pml[0]._s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_pml_II_a  = ld_pml[3]._s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_pml_III_a = ld_pml[6]._s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_pml_IV_a  = ld_pml[9]._s[D_V0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vx_pml_V_a   = ld_pml[12]._s[D_V0]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  vx_pml_VI_a  = ld_pml[15]._s[D_V0]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:      vx_aa  = (tsz * s[D_V0]._dims[1].n0 - ny) * s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      mvx_aa = (tsz * s[D_MV0]._dims[1].n0 - ny) * s[D_MV0]._dims[0].n0;
lib/esgn210_3d.c:      px_aa  = (tsz * s[D_P0]._dims[1].n0 - ny) * s[D_P0]._dims[0].n0;
lib/esgn210_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_I_aa   = (tsz * ld_pml[0]._s[D_V0]._dims[1].n0 - ny) * ld_pml[0]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_II_aa  = (tsz * ld_pml[3]._s[D_V0]._dims[1].n0 - ny) * ld_pml[3]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_III_aa = (tsz * ld_pml[6]._s[D_V0]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V0]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_V_aa   = (tsz * ld_pml[12]._s[D_V0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:      vx_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V0]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V0]._dims[0].n0;
lib/esgn210_3d.c:    _vx     = s[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_x_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_I = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _mvx    = cs[D_MV0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _px9    = rs[D_P0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 5;
lib/esgn210_3d.c:    _sxy5    = rs[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy4    = _sxy5 - dims[0].n0;
lib/esgn210_3d.c:    _sxy3    = _sxy4 - dims[0].n0;
lib/esgn210_3d.c:    _sxy2    = _sxy3 - dims[0].n0;
lib/esgn210_3d.c:    _sxy1    = _sxy2 - dims[0].n0;
lib/esgn210_3d.c:    _sxy0    = _sxy1 - dims[0].n0;
lib/esgn210_3d.c:    _sxz5    = rs[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz4    = _sxz5 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _sxz3    = _sxz4 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _sxz2    = _sxz3 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _sxz1    = _sxz2 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _sxz0    = _sxz1 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        px8 = _px9[-1]; px7 = _px9[-2]; px6 = _px9[-3]; px5 = _px9[-4];
lib/esgn210_3d.c:        px4 = _px9[-5]; px3 = _px9[-6]; px2 = _px9[-7]; px1 = _px9[-8];
lib/esgn210_3d.c:        px0 = _px9[-9];
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_I) = ((*_vx_x_I) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vx_y_I) = ((*_vx_y_I) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vx_z_I) = ((*_vx_z_I) * (1.0f - etazdt) + dfdz*(*_mvx))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:    _vx   += (gze_pml_I + 1 + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _mvx  += (gze_pml_I + 1 + tid - iz) * s[D_MV0]._dims[0].n0 * s[D_MV0]._dims[1].n0;
lib/esgn210_3d.c:    _px9  += (gze_pml_I + 1 + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn210_3d.c:    _sxy5 += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _sxz5 += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxy4 = _sxy5 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy3 = _sxy4 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy2 = _sxy3 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxz4 = _sxz5 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz3 = _sxz4 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz2 = _sxz3 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz1 = _sxz2 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz0 = _sxz1 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _vx_x_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_III = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_x_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_IV  = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_x_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_V   = s_pml[D_V0]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_x_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_VI  = s_pml[D_V0]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        px8 = _px9[-1]; px7 = _px9[-2]; px6 = _px9[-3]; px5 = _px9[-4];
lib/esgn210_3d.c:        px4 = _px9[-5]; px3 = _px9[-6]; px2 = _px9[-7]; px1 = _px9[-8];
lib/esgn210_3d.c:        px0 = _px9[-9];
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_III) = ((*_vx_x_III) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vx_y_III) = ((*_vx_y_III) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        px8 = _px9[-1]; px7 = _px9[-2]; px6 = _px9[-3]; px5 = _px9[-4];
lib/esgn210_3d.c:        px4 = _px9[-5]; px3 = _px9[-6]; px2 = _px9[-7]; px1 = _px9[-8];
lib/esgn210_3d.c:        px0 = _px9[-9];
lib/esgn210_3d.c:        for ( _vxend = _vx + gxe_pml_V-gxs_pml_V+1; _vx < _vxend; ) {
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_V) = ((*_vx_x_V) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vxend = _vx + gxs_pml_VI-gxe_pml_V-1; _vx < _vxend;) {
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vxend = _vx + gxe_pml_VI-gxs_pml_VI+1; _vx < _vxend; ) {
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_VI) = ((*_vx_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        px8 = _px9[-1]; px7 = _px9[-2]; px6 = _px9[-3]; px5 = _px9[-4];
lib/esgn210_3d.c:        px4 = _px9[-5]; px3 = _px9[-6]; px2 = _px9[-7]; px1 = _px9[-8];
lib/esgn210_3d.c:        px0 = _px9[-9];
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_IV) = ((*_vx_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vx_y_IV) = ((*_vx_y_IV) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _vx   += (gzs_pml_II + tid - iz) * s[D_V0]._dims[0].n0 * s[D_V0]._dims[1].n0;
lib/esgn210_3d.c:    _mvx  += (gzs_pml_II + tid - iz) * s[D_MV0]._dims[0].n0 * s[D_MV0]._dims[1].n0;
lib/esgn210_3d.c:    _px9  += (gzs_pml_II + tid - iz) * s[D_P0]._dims[0].n0 * s[D_P0]._dims[1].n0;
lib/esgn210_3d.c:    _sxy5 += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _sxz5 += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxy4 = _sxy5 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy3 = _sxy4 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy2 = _sxy3 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy1 = _sxy2 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxy0 = _sxy1 - s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:    _sxz4 = _sxz5 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz3 = _sxz4 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz2 = _sxz3 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz1 = _sxz2 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz0 = _sxz1 - s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _vx_x_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_y_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vx_z_II = s_pml[D_V0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EV[0]]._s + (gxs - s[D_EV[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        px8 = _px9[-1]; px7 = _px9[-2]; px6 = _px9[-3]; px5 = _px9[-4];
lib/esgn210_3d.c:        px4 = _px9[-5]; px3 = _px9[-6]; px2 = _px9[-7]; px1 = _px9[-8];
lib/esgn210_3d.c:        px0 = _px9[-9];
lib/esgn210_3d.c:          dfdx = ((px9 - px0) * C5 + (px8 - px1) * C4 + (px7 - px2) * C3 +
lib/esgn210_3d.c:                  (px6 - px3) * C2 + (px5 - px4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_sxy9++) - (*_sxy0++)) * C5 + ((*_sxy8++) - (*_sxy1++)) * C4 + ((*_sxy7++) - (*_sxy2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxy6++) - (*_sxy3++)) * C2 + ((*_sxy5++) - (*_sxy4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_sxz9++) - (*_sxz0++)) * C5 + ((*_sxz8++) - (*_sxz1++)) * C4 + ((*_sxz7++) - (*_sxz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_sxz6++) - (*_sxz3++)) * C2 + ((*_sxz5++) - (*_sxz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vx_x_II) = ((*_vx_x_II) * (1.0f - etaxdt) + dfdx*(*_mvx))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vx_y_II) = ((*_vx_y_II) * (1.0f - etaydt) + dfdy*(*_mvx))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vx_z_II) = ((*_vx_z_II) * (1.0f - etazdt) + dfdz*(*_mvx))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  vy_a = s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  mvy_a = s[D_MV1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxy_a = s[D_S0]._dims[0].n0 - nx;
lib/esgn210_3d.c:  py_a  = s[D_P1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_pml_I_a   = ld_pml[0]._s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_pml_II_a  = ld_pml[3]._s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_pml_III_a = ld_pml[6]._s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_pml_IV_a  = ld_pml[9]._s[D_V1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vy_pml_V_a   = ld_pml[12]._s[D_V1]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  vy_pml_VI_a  = ld_pml[15]._s[D_V1]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:      vy_aa  = (tsz * s[D_V1]._dims[1].n0 - ny) * s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      mvy_aa = (tsz * s[D_MV1]._dims[1].n0 - ny) * s[D_MV1]._dims[0].n0;
lib/esgn210_3d.c:      sxy_aa = (tsz * s[D_S0]._dims[1].n0 - ny) * s[D_S0]._dims[0].n0;
lib/esgn210_3d.c:      py_aa  = (tsz * s[D_P1]._dims[1].n0 - ny) * s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_I_aa   = (tsz * ld_pml[0]._s[D_V1]._dims[1].n0 - ny) * ld_pml[0]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_II_aa  = (tsz * ld_pml[3]._s[D_V1]._dims[1].n0 - ny) * ld_pml[3]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_III_aa = (tsz * ld_pml[6]._s[D_V1]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V1]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_V_aa   = (tsz * ld_pml[12]._s[D_V1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:      vy_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V1]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V1]._dims[0].n0;
lib/esgn210_3d.c:    _vy     = s[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_x_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_I = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _mvy    = cs[D_MV1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxy9   = rs[D_S0]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 4;
lib/esgn210_3d.c:    _py4     = rs[D_P1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _py3     = _py4 - dims[0].n0;
lib/esgn210_3d.c:    _py2     = _py3 - dims[0].n0;
lib/esgn210_3d.c:    _py1     = _py2 - dims[0].n0;
lib/esgn210_3d.c:    _py0     = _py1 - dims[0].n0;
lib/esgn210_3d.c:    _syz5    = rs[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz4    = _syz5 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _syz3    = _syz4 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _syz2    = _syz3 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _syz1    = _syz2 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _syz0    = _syz1 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epy    = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EP[2]]._s + (gzs_pml_I + tid - s[D_EP[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxy8 = _sxy9[-1]; sxy7 = _sxy9[-2]; sxy6 = _sxy9[-3]; sxy5 = _sxy9[-4];
lib/esgn210_3d.c:        sxy4 = _sxy9[-5]; sxy3 = _sxy9[-6]; sxy2 = _sxy9[-7]; sxy1 = _sxy9[-8];
lib/esgn210_3d.c:        sxy0 = _sxy9[-9];
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_I) = ((*_vy_x_I) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vy_y_I) = ((*_vy_y_I) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vy_z_I) = ((*_vy_z_I) * (1.0f - etazdt) + dfdz*(*_mvy))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:    _vy   += (gze_pml_I + 1 + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _mvy  += (gze_pml_I + 1 + tid - iz) * s[D_MV1]._dims[0].n0 * s[D_MV1]._dims[1].n0;
lib/esgn210_3d.c:    _sxy9 += (gze_pml_I + 1 + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _py4  += (gze_pml_I + 1 + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn210_3d.c:    _syz4 += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _py3  = _py4 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py2  = _py3 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py1  = _py2 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py0  = _py1 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _syz3 = _syz4 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz2 = _syz3 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gze_pml_I + 1 + tid - s[D_EP[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _vy_x_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_III = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_x_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_IV  = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_x_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_V   = s_pml[D_V1]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_x_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_VI  = s_pml[D_V1]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxy8 = _sxy9[-1]; sxy7 = _sxy9[-2]; sxy6 = _sxy9[-3]; sxy5 = _sxy9[-4];
lib/esgn210_3d.c:        sxy4 = _sxy9[-5]; sxy3 = _sxy9[-6]; sxy2 = _sxy9[-7]; sxy1 = _sxy9[-8];
lib/esgn210_3d.c:        sxy0 = _sxy9[-9];
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_III) = ((*_vy_x_III) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vy_y_III) = ((*_vy_y_III) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        sxy8 = _sxy9[-1]; sxy7 = _sxy9[-2]; sxy6 = _sxy9[-3]; sxy5 = _sxy9[-4];
lib/esgn210_3d.c:        sxy4 = _sxy9[-5]; sxy3 = _sxy9[-6]; sxy2 = _sxy9[-7]; sxy1 = _sxy9[-8];
lib/esgn210_3d.c:        sxy0 = _sxy9[-9];
lib/esgn210_3d.c:        for ( _vyend = _vy + gxe_pml_V-gxs_pml_V+1; _vy < _vyend; ) {
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_V) = ((*_vy_x_V) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vyend = _vy + gxs_pml_VI-gxe_pml_V-1; _vy < _vyend;) {
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vyend = _vy + gxe_pml_VI-gxs_pml_VI+1; _vy < _vyend; ) {
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_VI) = ((*_vy_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        sxy8 = _sxy9[-1]; sxy7 = _sxy9[-2]; sxy6 = _sxy9[-3]; sxy5 = _sxy9[-4];
lib/esgn210_3d.c:        sxy4 = _sxy9[-5]; sxy3 = _sxy9[-6]; sxy2 = _sxy9[-7]; sxy1 = _sxy9[-8];
lib/esgn210_3d.c:        sxy0 = _sxy9[-9];
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_IV) = ((*_vy_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vy_y_IV) = ((*_vy_y_IV) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _vy   += (gzs_pml_II + tid - iz) * s[D_V1]._dims[0].n0 * s[D_V1]._dims[1].n0;
lib/esgn210_3d.c:    _mvy  += (gzs_pml_II + tid - iz) * s[D_MV1]._dims[0].n0 * s[D_MV1]._dims[1].n0;
lib/esgn210_3d.c:    _sxy9 += (gzs_pml_II + tid - iz) * s[D_S0]._dims[0].n0 * s[D_S0]._dims[1].n0;
lib/esgn210_3d.c:    _py4  += (gzs_pml_II + tid - iz) * s[D_P1]._dims[0].n0 * s[D_P1]._dims[1].n0;
lib/esgn210_3d.c:    _syz4 += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _py3 = _py4 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py2 = _py3 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py1 = _py2 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _py0 = _py1 - s[D_P1]._dims[0].n0;
lib/esgn210_3d.c:    _syz3 = _syz4 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz2 = _syz3 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _vy_x_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_y_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vy_z_II = s_pml[D_V1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EV[1]]._s + (gys - s[D_EV[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EP[2]]._s + (gzs_pml_II + tid - s[D_EP[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxy8 = _sxy9[-1]; sxy7 = _sxy9[-2]; sxy6 = _sxy9[-3]; sxy5 = _sxy9[-4];
lib/esgn210_3d.c:        sxy4 = _sxy9[-5]; sxy3 = _sxy9[-6]; sxy2 = _sxy9[-7]; sxy1 = _sxy9[-8];
lib/esgn210_3d.c:        sxy0 = _sxy9[-9];
lib/esgn210_3d.c:          dfdx = ((sxy9 - sxy0) * C5 + (sxy8 - sxy1) * C4 + (sxy7 - sxy2) * C3 +
lib/esgn210_3d.c:                  (sxy6 - sxy3) * C2 + (sxy5 - sxy4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_py9++) - (*_py0++)) * C5 + ((*_py8++) - (*_py1++)) * C4 + ((*_py7++) - (*_py2++)) * C3 +
lib/esgn210_3d.c:                  ((*_py6++) - (*_py3++)) * C2 + ((*_py5++) - (*_py4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vy_x_II) = ((*_vy_x_II) * (1.0f - etaxdt) + dfdx*(*_mvy))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vy_y_II) = ((*_vy_y_II) * (1.0f - etaydt) + dfdy*(*_mvy))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vy_z_II) = ((*_vy_z_II) * (1.0f - etazdt) + dfdz*(*_mvy))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:  s = dom->_s;
lib/esgn210_3d.c:  rs = rdom->_s;
lib/esgn210_3d.c:  cs = cdom->_s;
lib/esgn210_3d.c:  ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn210_3d.c:  lax = ((ESGN_TS_PARS*)pars)->lam[0];
lib/esgn210_3d.c:  lay = ((ESGN_TS_PARS*)pars)->lam[1];
lib/esgn210_3d.c:  laz = ((ESGN_TS_PARS*)pars)->lam[2];
lib/esgn210_3d.c:  dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn210_3d.c:    gze_pml_I = gzs-1;
lib/esgn210_3d.c:    gye_pml_III = gys-1;
lib/esgn210_3d.c:    gxe_pml_V = gxs-1;
lib/esgn210_3d.c:  vz_a = s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  mvz_a = s[D_MV2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  sxz_a = s[D_S2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  syz_a = s[D_S1]._dims[0].n0 - nx;
lib/esgn210_3d.c:  pz_a  = s[D_P2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_pml_I_a   = ld_pml[0]._s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_pml_II_a  = ld_pml[3]._s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_pml_III_a = ld_pml[6]._s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_pml_IV_a  = ld_pml[9]._s[D_V2]._dims[0].n0 - nx;
lib/esgn210_3d.c:  vz_pml_V_a   = ld_pml[12]._s[D_V2]._dims[0].n0 - (gxe_pml_V - gxs_pml_V + 1);
lib/esgn210_3d.c:  vz_pml_VI_a  = ld_pml[15]._s[D_V2]._dims[0].n0 - (gxe_pml_VI - gxs_pml_VI + 1);
lib/esgn210_3d.c:      vz_aa  = (tsz * s[D_V2]._dims[1].n0 - ny) * s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      mvz_aa = (tsz * s[D_MV2]._dims[1].n0 - ny) * s[D_MV2]._dims[0].n0;
lib/esgn210_3d.c:      sxz_aa = (tsz * s[D_S2]._dims[1].n0 - ny) * s[D_S2]._dims[0].n0;
lib/esgn210_3d.c:      syz_aa = (tsz * s[D_S1]._dims[1].n0 - ny) * s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:      pz_aa  = (tsz * s[D_P2]._dims[1].n0 - ny) * s[D_P2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_I_aa   = (tsz * ld_pml[0]._s[D_V2]._dims[1].n0 - ny) * ld_pml[0]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_II_aa  = (tsz * ld_pml[3]._s[D_V2]._dims[1].n0 - ny) * ld_pml[3]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_III_aa = (tsz * ld_pml[6]._s[D_V2]._dims[1].n0 - (gye_pml_III - gys_pml_III + 1)) * ld_pml[6]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_IV_aa  = (tsz * ld_pml[9]._s[D_V2]._dims[1].n0 - (gye_pml_IV - gys_pml_IV + 1)) * ld_pml[9]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_V_aa   = (tsz * ld_pml[12]._s[D_V2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[12]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:      vz_pml_VI_aa  = (tsz * ld_pml[15]._s[D_V2]._dims[1].n0 - (gys_pml_IV - gye_pml_III - 1)) * ld_pml[15]._s[D_V2]._dims[0].n0;
lib/esgn210_3d.c:    _vz     = s[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_x_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_I = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _mvz    = cs[D_MV2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _sxz9    = rs[D_S2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0 + 4;
lib/esgn210_3d.c:    _syz5    = rs[D_S1]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _syz4    = _syz5 - dims[0].n0;
lib/esgn210_3d.c:    _syz3    = _syz4 - dims[0].n0;
lib/esgn210_3d.c:    _syz2    = _syz3 - dims[0].n0;
lib/esgn210_3d.c:    _syz1    = _syz2 - dims[0].n0;
lib/esgn210_3d.c:    _syz0    = _syz1 - dims[0].n0;
lib/esgn210_3d.c:    _pz4    = rs[D_P2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_I + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _pz3    = _pz4 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _pz2    = _pz3 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _pz1    = _pz2 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _pz0    = _pz1 - dims[1].n0 * dims[0].n0;
lib/esgn210_3d.c:    _epx    = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epy    = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);              /* 1D */
lib/esgn210_3d.c:    _epz    = s[D_EV[2]]._s + (gzs_pml_I + tid - s[D_EV[2]]._dims[0].gs);  /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxz8 = _sxz9[-1]; sxz7 = _sxz9[-2]; sxz6 = _sxz9[-3]; sxz5 = _sxz9[-4];
lib/esgn210_3d.c:        sxz4 = _sxz9[-5]; sxz3 = _sxz9[-6]; sxz2 = _sxz9[-7]; sxz1 = _sxz9[-8];
lib/esgn210_3d.c:        sxz0 = _sxz9[-9];
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_I) = ((*_vz_x_I) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vz_y_I) = ((*_vz_y_I) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vz_z_I) = ((*_vz_z_I) * (1.0f - etazdt) + dfdz*(*_mvz))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:    _vz   += (gze_pml_I + 1 + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _mvz  += (gze_pml_I + 1 + tid - iz) * s[D_MV2]._dims[0].n0 * s[D_MV2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz9 += (gze_pml_I + 1 + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _syz4 += (gze_pml_I + 1 + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _pz4  += (gze_pml_I + 1 + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _syz3 = _syz4 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz2 = _syz3 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _pz3 = _pz4 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz2 = _pz3 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz1 = _pz2 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz0 = _pz1 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gze_pml_I + 1 + tid - s[D_EV[2]]._dims[0].gs);        /* 1D */
lib/esgn210_3d.c:    _vz_x_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_III = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_III - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_x_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_IV  = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys_pml_IV - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_x_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_V   = s_pml[D_V2]._s + (gxs_pml_V - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_x_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_VI  = s_pml[D_V2]._s + (gxs_pml_VI - dims[0].gs) + (gye_pml_III + 1 - dims[1].gs + (gze_pml_I + 1 - dims[2].gs + tid) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxz8 = _sxz9[-1]; sxz7 = _sxz9[-2]; sxz6 = _sxz9[-3]; sxz5 = _sxz9[-4];
lib/esgn210_3d.c:        sxz4 = _sxz9[-5]; sxz3 = _sxz9[-6]; sxz2 = _sxz9[-7]; sxz1 = _sxz9[-8];
lib/esgn210_3d.c:        sxz0 = _sxz9[-9];
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_III) = ((*_vz_x_III) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vz_y_III) = ((*_vz_y_III) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        sxz8 = _sxz9[-1]; sxz7 = _sxz9[-2]; sxz6 = _sxz9[-3]; sxz5 = _sxz9[-4];
lib/esgn210_3d.c:        sxz4 = _sxz9[-5]; sxz3 = _sxz9[-6]; sxz2 = _sxz9[-7]; sxz1 = _sxz9[-8];
lib/esgn210_3d.c:        sxz0 = _sxz9[-9];
lib/esgn210_3d.c:        for ( _vzend = _vz + gxe_pml_V-gxs_pml_V+1; _vz < _vzend; ) {
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_V) = ((*_vz_x_V) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vzend = _vz + gxs_pml_VI-gxe_pml_V-1; _vz < _vzend;) {
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        for ( _vzend = _vz + gxe_pml_VI-gxs_pml_VI+1; _vz < _vzend; ) {
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_VI) = ((*_vz_x_VI) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:        sxz8 = _sxz9[-1]; sxz7 = _sxz9[-2]; sxz6 = _sxz9[-3]; sxz5 = _sxz9[-4];
lib/esgn210_3d.c:        sxz4 = _sxz9[-5]; sxz3 = _sxz9[-6]; sxz2 = _sxz9[-7]; sxz1 = _sxz9[-8];
lib/esgn210_3d.c:        sxz0 = _sxz9[-9];
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_IV) = ((*_vz_x_IV) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vz_y_IV) = ((*_vz_y_IV) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny;
lib/esgn210_3d.c:    _vz   += (gzs_pml_II + tid - iz) * s[D_V2]._dims[0].n0 * s[D_V2]._dims[1].n0;
lib/esgn210_3d.c:    _mvz  += (gzs_pml_II + tid - iz) * s[D_MV2]._dims[0].n0 * s[D_MV2]._dims[1].n0;
lib/esgn210_3d.c:    _sxz9 += (gzs_pml_II + tid - iz) * s[D_S2]._dims[0].n0 * s[D_S2]._dims[1].n0;
lib/esgn210_3d.c:    _syz4 += (gzs_pml_II + tid - iz) * s[D_S1]._dims[0].n0 * s[D_S1]._dims[1].n0;
lib/esgn210_3d.c:    _pz4  += (gzs_pml_II + tid - iz) * s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _syz3 = _syz4 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz2 = _syz3 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz1 = _syz2 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _syz0 = _syz1 - s[D_S1]._dims[0].n0;
lib/esgn210_3d.c:    _pz3 = _pz4 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz2 = _pz3 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz1 = _pz2 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _pz0 = _pz1 - s[D_P2]._dims[0].n0 * s[D_P2]._dims[1].n0;
lib/esgn210_3d.c:    _vz_x_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_y_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _vz_z_II = s_pml[D_V2]._s + (gxs - dims[0].gs) + (gys - dims[1].gs + (gzs_pml_II + tid - dims[2].gs) * dims[1].n0) * dims[0].n0;
lib/esgn210_3d.c:    _epx = s[D_EP[0]]._s + (gxs - s[D_EP[0]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epy = s[D_EP[1]]._s + (gys - s[D_EP[1]]._dims[0].gs);                        /* 1D */
lib/esgn210_3d.c:    _epz = s[D_EV[2]]._s + (gzs_pml_II + tid - s[D_EV[2]]._dims[0].gs);           /* 1D */
lib/esgn210_3d.c:    /* _rmpx = rs[D_MP00]._s + (gxs - s[D_MP00]._dims[0].gs) + (gys - s[D_MP00]._dims[1].gs + tid) * s[D_MP00]._dims[0].n0; */
lib/esgn210_3d.c:        sxz8 = _sxz9[-1]; sxz7 = _sxz9[-2]; sxz6 = _sxz9[-3]; sxz5 = _sxz9[-4];
lib/esgn210_3d.c:        sxz4 = _sxz9[-5]; sxz3 = _sxz9[-6]; sxz2 = _sxz9[-7]; sxz1 = _sxz9[-8];
lib/esgn210_3d.c:        sxz0 = _sxz9[-9];
lib/esgn210_3d.c:          dfdx = ((sxz9 - sxz0) * C5 + (sxz8 - sxz1) * C4 + (sxz7 - sxz2) * C3 +
lib/esgn210_3d.c:                  (sxz6 - sxz3) * C2 + (sxz5 - sxz4) * C1) * lax;
lib/esgn210_3d.c:          dfdy = (((*_syz9++) - (*_syz0++)) * C5 + ((*_syz8++) - (*_syz1++)) * C4 + ((*_syz7++) - (*_syz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_syz6++) - (*_syz3++)) * C2 + ((*_syz5++) - (*_syz4++)) * C1) * lay;
lib/esgn210_3d.c:          dfdz = (((*_pz9++) - (*_pz0++)) * C5 + ((*_pz8++) - (*_pz1++)) * C4 + ((*_pz7++) - (*_pz2++)) * C3 +
lib/esgn210_3d.c:                  ((*_pz6++) - (*_pz3++)) * C2 + ((*_pz5++) - (*_pz4++)) * C1) * laz;
lib/esgn210_3d.c:            (*_vz_x_II) = ((*_vz_x_II) * (1.0f - etaxdt) + dfdx*(*_mvz))/(1.0f + etaxdt);
lib/esgn210_3d.c:            (*_vz_y_II) = ((*_vz_y_II) * (1.0f - etaydt) + dfdy*(*_mvz))/(1.0f + etaydt);
lib/esgn210_3d.c:            (*_vz_z_II) = ((*_vz_z_II) * (1.0f - etazdt) + dfdz*(*_mvz))/(1.0f + etazdt);
lib/esgn210_3d.c:            //(*_px) = ((*_px) * (1.0 - etaxdt) + delta/(*_rmpx++)) / (1.0 + etaxdt);
lib/esgn210_3d.c:        _epx -= nx;
lib/esgn210_3d.c:      _epy -= ny; _epz += tsz;
lib/esgn210_3d.c:/*----------------------------------------------------------------------------*/
lib/esgn210_3d.c:/*---- END POINTER BRANCH ----------------------------------------------------*/
lib/ansol_esgsteps.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgsteps.c:/*----------------------------------------------------------------------------*/
lib/ansol_esgsteps.c:	int ndim = dom->_s[0].ndim;
lib/ansol_esgsteps.c:// 		pmax = dom->_s[D_P0]._s0[0];
lib/ansol_esgsteps.c:// 			pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/ansol_esgsteps.c:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c:		//--Updating pressures -------------------------------------------------------//
lib/ansol_esgsteps.c:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c:		//--Updating shear stresses --------------------------------------------------//
lib/ansol_esgsteps.c:// 		pmax = dom->_s[D_P0]._s0[0];
lib/ansol_esgsteps.c:// 		for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/ansol_esgsteps.c:		vmax = dom->_s[D_V0]._s0[0];
lib/ansol_esgsteps.c:		for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/ansol_esgsteps.c:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c:		//--Updating velocities ------------------------------------------------------//
lib/ansol_esgsteps.c:		vmax = dom->_s[D_V0]._s0[0];
lib/ansol_esgsteps.c:		for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/esgn24_2d_mod.c:   2-4 stagger finite difference in 2D for isotropic elastic wave
lib/esgn24_2d_mod.c:#define C24 4.166666666666666666666667e-2
lib/esgn24_2d_mod.c:// 	+	||----------------------------------------------||	 +
lib/esgn24_2d_mod.c:// 	+	------------------------------------------------||	 +
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:	s = dom->_s;
lib/esgn24_2d_mod.c:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c:		width[0]  = n_[0]-1;
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:				vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:				vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_px_x_I[ i_[1] ][ i_[0] ] = ( _px_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_py_x_I[ i_[1] ][ i_[0] ] = ( _py_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_px_y_I[ i_[1] ][ i_[0] ] = ( _px_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:				_py_y_I[ i_[1] ][ i_[0] ] = ( _py_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c:	offset_V0_IV[0]  = n_[0] - pml_IV_width_x + gs_V0[0];
lib/esgn24_2d_mod.c:	offset_V1_IV[0]  = n_[0] - pml_IV_width_x + gs_V1[0];
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_px_x_III[ i_[1] ][ i_[0] ] = ( _px_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:			_py_x_III[ i_[1] ][ i_[0] ] = ( _py_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:		for ( index[0] = 0; index[0] < pml_IV_width_x-1; index[0]++ ){
lib/esgn24_2d_mod.c:// if( index[0]==pml_IV_width_x-1-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_px_x_IV[ i_[1] ][ i_[0] ] = ( _px_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c:			_py_x_IV[ i_[1] ][ i_[0] ] = ( _py_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c:		width[0] = n_[0]-1;
lib/esgn24_2d_mod.c:		width[1] = pml_II_width_y-1;
lib/esgn24_2d_mod.c:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c:		offset_V0[1] = n_[1] - pml_II_width_y + gs_V0[1] + tid;
lib/esgn24_2d_mod.c:		offset_V1[1] = n_[1] - pml_II_width_y + gs_V1[1] + tid;
lib/esgn24_2d_mod.c:		//main loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:				vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:				vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_px_x_II[ i_[1] ][ i_[0] ] = ( _px_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_py_x_II[ i_[1] ][ i_[0] ] = ( _py_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_px_y_II[ i_[1] ][ i_[0] ] = ( _px_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:				_py_y_II[ i_[1] ][ i_[0] ] = ( _py_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[0]  = n_[0] - 1; //excluding corners!
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			_px[ i_[1] ][ i_[0] ] = ( _px[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) + dfdx*aux ) / (1.0f + etaxdt);	
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:	width[0]  = n_[0] - 1;//excluding corners!
lib/esgn24_2d_mod.c:	i_[1]   = n_[1]-1 + offset_[1];
lib/esgn24_2d_mod.c:	i_V0[1] = n_[1]-1 + offset_V0[1];
lib/esgn24_2d_mod.c:	i_V1[1] = n_[1]-1 + offset_V1[1];
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			_px[ i_[1] ][ i_[0] ] = ( _px[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) + dfdx*aux ) / (1.0f + etaxdt);	
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:if( index[0]==width[0]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _px field since _py = 0. Note that x-derivative is only used. */
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V0[1] ][ i_V0[0]-2 ];
lib/esgn24_2d_mod.c:			vx1 = _vx[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			dfdx = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:	width[1]  = n_[1] - 1;//excluding corners!
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c:			_py[ i_[1] ][ i_[0] ] = ( _py[ i_[1] ][ i_[0] ]*(1.0f - etaydt) + dfdy*aux ) / (1.0f + etaydt);	
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c:	width[1] = n_[1] - 1;//excluding corners!
lib/esgn24_2d_mod.c:	i_[0]    = n_[0]-1 + offset_[0];
lib/esgn24_2d_mod.c:	i_V0[0]  = n_[0]-1 + offset_V0[0];
lib/esgn24_2d_mod.c:	i_V1[0]  = n_[0]-1 + offset_V1[0];
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c:			_py[ i_[1] ][ i_[0] ] = ( _py[ i_[1] ][ i_[0] ]*(1.0f - etaydt) + dfdy*aux ) / (1.0f + etaydt);	
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:			/* Only updating _py field since _px = 0. Note that y-derivative is only used. */
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V1[1]-2 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			vy1 = _vy[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdy = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_y; 
lib/esgn24_2d_mod.c:	width[1] = s[D_P1]._dims[1].gs - s[D_P1]._dims[1].gs0; //halo y-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		i_[1] = offset_[1] - index[1];
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c:			_py[ i_[1] ][ i_[0] ] = - _py[ offset_[1]+index[1] ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c:	width[1] = s[D_P1]._dims[1].ge0 - s[D_P1]._dims[1].ge; //halo y-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c:			_py[ i_[1] ][ i_[0] ] = - _py[ offset_[1]-index[1] ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c:	width[0] = s[D_P0]._dims[0].gs - s[D_P0]._dims[0].gs0; //halo x-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:			i_[0] = offset_[0] - index[0];
lib/esgn24_2d_mod.c:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			_px[ i_[1] ][ i_[0] ] = - _px[ i_[1] ][ offset_[0]+index[0] ]; //odd extension
lib/esgn24_2d_mod.c:	width[0] = s[D_P0]._dims[0].ge0 - s[D_P0]._dims[0].ge; //halo x-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			_px[ i_[1] ][ i_[0] ] = - _px[ i_[1] ][ offset_[0]-index[0] ]; //odd extension
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:	s = dom->_s;
lib/esgn24_2d_mod.c:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:				vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_sxy_x_I[ i_[1] ][ i_[0] ] = ( _sxy_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_sxy_y_I[ i_[1] ][ i_[0] ] = ( _sxy_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c:	offset_V0_IV[0]  = n_[0] - pml_IV_width_x + gs_V0[0];
lib/esgn24_2d_mod.c:	offset_V1_IV[0]  = n_[0] - pml_IV_width_x + gs_V1[0];
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_sxy_x_III[ i_[1] ][ i_[0] ] = ( _sxy_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:// if( index[0]==pml_IV_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:			vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_sxy_x_IV[ i_[1] ][ i_[0] ] = ( _sxy_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c:		offset_V0[1] = n_[1] - pml_II_width_y + gs_V0[1] + tid;
lib/esgn24_2d_mod.c:		offset_V1[1] = n_[1] - pml_II_width_y + gs_V1[1] + tid;
lib/esgn24_2d_mod.c:		//main loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				vy0 = _vy[ i_V0[1] ][ i_V0[0]-1 ];
lib/esgn24_2d_mod.c:				vx0 = _vx[ i_V1[1]-1 ][ i_V1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (vy0 - vy3) + (vy2 - vy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (vx0 - vx3) + (vx2 - vx1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_sxy_x_II[ i_[1] ][ i_[0] ] = ( _sxy_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_sxy_y_II[ i_[1] ][ i_[0] ] = ( _sxy_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[1] = gs_[1] - s[D_S0]._dims[1].gs0; //halo y-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		i_[1] = offset_[1] - index[1];
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ offset_[1]+index[1]-1 ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c:	width[1] = s[D_S0]._dims[1].ge0 - s[D_S0]._dims[1].ge; //halo y-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1] ){
lib/esgn24_2d_mod.c:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ offset_[1]-index[1]+1 ][ i_[0] ]; //odd extension
lib/esgn24_2d_mod.c:	width[0] = gs_[0] - s[D_S0]._dims[0].gs0; //halo x-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:			i_[0] = offset_[0] - index[0];
lib/esgn24_2d_mod.c:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ i_[1] ][ offset_[0]+index[0]-1 ]; //odd extension
lib/esgn24_2d_mod.c:	width[0] = s[D_S0]._dims[0].ge0 - s[D_S0]._dims[0].ge; //halo x-width
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:		//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0] && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			_sxy[ i_[1] ][ i_[0] ] = - _sxy[ i_[1] ][ offset_[0]-index[0]+1 ]; //odd extension
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:	s = dom->_s;
lib/esgn24_2d_mod.c:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:				px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c:				sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:				sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_vx_x_I[ i_[1] ][ i_[0] ] = ( _vx_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_vx_y_I[ i_[1] ][ i_[0] ] = ( _vx_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c:	offset_IV[0]     = n_[0] - pml_IV_width_x + gs_[0];
lib/esgn24_2d_mod.c:	offset_P0_IV[0]  = n_[0] - pml_IV_width_x + gs_P0[0];
lib/esgn24_2d_mod.c:	offset_S0_IV[0]  = n_[0] - pml_IV_width_x + gs_S0[0];
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_vx_x_III[ i_[1] ][ i_[0] ] = ( _vx_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_vx_x_IV[ i_[1] ][ i_[0] ] = ( _vx_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c:		offset_[1]   = n_[1]   - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c:		offset_P0[1] = n_[1] - pml_II_width_y + gs_P0[1] + tid;
lib/esgn24_2d_mod.c:		offset_S0[1] = n_[1] - pml_II_width_y + gs_S0[1] + tid;
lib/esgn24_2d_mod.c:		//main loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:				px0 = _px[ i_P0[1] ][ i_P0[0]-1 ];
lib/esgn24_2d_mod.c:				sxy0 = _sxy[ i_S0[1]-2 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:				sxy1 = _sxy[ i_S0[1]-1 ][ i_S0[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (px0 - px3) + (px2 - px1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_vx_x_II[ i_[1] ][ i_[0] ] = ( _vx_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_vx_y_II[ i_[1] ][ i_[0] ] = ( _vx_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:/*----------------------------------------------------------------------------*/
lib/esgn24_2d_mod.c:	s = dom->_s;
lib/esgn24_2d_mod.c:	ld_pml = ((ESGN_TS_PARS*)pars)->ld_pml;
lib/esgn24_2d_mod.c:	la_x = ((ESGN_TS_PARS*)pars)->lam[0] * C24;
lib/esgn24_2d_mod.c:	la_y = ((ESGN_TS_PARS*)pars)->lam[1] * C24;
lib/esgn24_2d_mod.c:	dt2 = ((ESGN_TS_PARS*)pars)->dt / 2.0;
lib/esgn24_2d_mod.c:		//loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c:				sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c:				py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_vy_x_I[ i_[1] ][ i_[0] ] = ( _vy_x_I[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_vy_y_I[ i_[1] ][ i_[0] ] = ( _vy_y_I[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/esgn24_2d_mod.c:	width[0] = n_[0] - pml_III_width_x - pml_IV_width_x;
lib/esgn24_2d_mod.c:	width[1] = n_[1] - pml_I_width_y   - pml_II_width_y;
lib/esgn24_2d_mod.c:	offset_IV [0]    = n_[0] - pml_IV_width_x + gs_ [0];
lib/esgn24_2d_mod.c:	offset_S0_IV[0]  = n_[0] - pml_IV_width_x + gs_S0[0];
lib/esgn24_2d_mod.c:	offset_P1_IV[0]  = n_[0] - pml_IV_width_x + gs_P1[0];
lib/esgn24_2d_mod.c:	//loop in y-direction
lib/esgn24_2d_mod.c:// if( index[0]==pml_III_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_vy_x_III[ i_[1] ][ i_[0] ] = ( _vy_x_III[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:// if( index[0]==pml_IV_width_x-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:			sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c:			sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c:			py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c:			dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:			dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:			_vy_x_IV[ i_[1] ][ i_[0] ] = ( _vy_x_IV[ i_[1] ][ i_[0] ] * (1.0f - etaxdt) 
lib/esgn24_2d_mod.c:		offset_[1]   = n_[1] - pml_II_width_y + gs_[1]   + tid;
lib/esgn24_2d_mod.c:		offset_S0[1] = n_[1] - pml_II_width_y + gs_S0[1] + tid;
lib/esgn24_2d_mod.c:		offset_P1[1] = n_[1] - pml_II_width_y + gs_P1[1] + tid;
lib/esgn24_2d_mod.c:		//main loop in y-direction
lib/esgn24_2d_mod.c:			//loop in x-direction
lib/esgn24_2d_mod.c:// if( index[0]==width[0]-1 && index[1]==width[1]-1 ){
lib/esgn24_2d_mod.c:				sxy0 = _sxy[ i_S0[1] ][ i_S0[0]-2 ];
lib/esgn24_2d_mod.c:				sxy1 = _sxy[ i_S0[1] ][ i_S0[0]-1 ];
lib/esgn24_2d_mod.c:				py0 = _py[ i_P1[1]-1 ][ i_P1[0] ];
lib/esgn24_2d_mod.c:				dfdx = ( (sxy0 - sxy3) + (sxy2 - sxy1) * 27.0 ) * la_x; 
lib/esgn24_2d_mod.c:				dfdy = ( (py0 - py3) + (py2 - py1) * 27.0 ) * la_y;
lib/esgn24_2d_mod.c:				_vy_x_II[ i_[1] ][ i_[0] ] = ( _vy_x_II[ i_[1] ][ i_[0] ]*(1.0f - etaxdt) 
lib/esgn24_2d_mod.c:				_vy_y_II[ i_[1] ][ i_[0] ] = ( _vy_y_II[ i_[1] ][ i_[0] ]*(1.0f - etaydt) 
lib/ansol_HI_esg_ker.c:	f(x,t) = delta(xs-x)psi(t)
lib/ansol_HI_esg_ker.c:#define TOL 1.0e-8
lib/ansol_HI_esg_ker.c://computes integral_(r/alpha)^(r/beta) Ricker(t-tau) dtau
lib/ansol_HI_esg_ker.c://computes integral_(r/alpha)^(r/beta) tau Ricker(t-tau) dtau
lib/ansol_HI_esg_ker.c://computes integral_(r/alpha)^(r/beta) tau Ricker_prime(t-tau) dtau
lib/ansol_HI_esg_ker.c://computes integral_(r/alpha)^(r/beta) tau^2 Ricker_prime(t-tau) dtau
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal multi1 = himedinfo->lambda;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak   = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal multi1 = himedinfo->lambda;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt; //compensating for substep time offset
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	fprintf(stderr,"    time = %e\n",get_time( fd_mdl->tsind )-.5*ansolpars->dt);
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt; //compensating for substep time offset
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal mu     = himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 3D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 3D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:		r2 += SQR( x[idim]-xs[idim] );
lib/ansol_HI_esg_ker.c:	tra = t - r/alpha;
lib/ansol_HI_esg_ker.c:	trb = t - r/beta;
lib/ansol_HI_esg_ker.c:	gamma_i = (x[i]-xs[i])/r;
lib/ansol_HI_esg_ker.c:	gamma_j = (x[j]-xs[j])/r;
lib/ansol_HI_esg_ker.c:	gamma_k = (x[k]-xs[k])/r;
lib/ansol_HI_esg_ker.c:	gamma_i_k = (Kdelta(i,k)-gamma_i*gamma_k)/r;
lib/ansol_HI_esg_ker.c:	gamma_j_k = (Kdelta(j,k)-gamma_j*gamma_k)/r;
lib/ansol_HI_esg_ker.c:	output = ( 3.0*(gamma_i_k*gamma_j + gamma_i*gamma_j_k)/r3 -(3.0*gamma_i*gamma_j-Kdelta(i,j))/r4 )*Int2( t, r, alpha, beta, fpeak );
lib/ansol_HI_esg_ker.c:        output -= gamma_k*(3.0*gamma_i*gamma_j-Kdelta(i,j))*Int4( t, r, alpha, beta, fpeak)/r4;
lib/ansol_HI_esg_ker.c:	output += ( -gamma_i*gamma_j*gamma_k/r + gamma_i_k*gamma_j + gamma_i*gamma_j_k )*comprick(tra,fpeak)/(r*a2);
lib/ansol_HI_esg_ker.c:	output -= gamma_i*gamma_j*gamma_k*Ricker_prime(tra,fpeak)/(r*a3);
lib/ansol_HI_esg_ker.c:	output += ( gamma_k*(gamma_i*gamma_j-Kdelta(i,j))/r - gamma_i_k*gamma_j - gamma_i*gamma_j_k )*comprick(trb,fpeak)/(r*b2);
lib/ansol_HI_esg_ker.c:	output += gamma_k*(gamma_i*gamma_j-Kdelta(i,j))*Ricker_prime(trb,fpeak)/(r*b3);
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:		r2 += SQR( x[idim]-xs[idim] );
lib/ansol_HI_esg_ker.c:	tra = t - r/alpha;
lib/ansol_HI_esg_ker.c:	trb = t - r/beta;
lib/ansol_HI_esg_ker.c:	gamma_i = (x[i]-xs[i])/r;
lib/ansol_HI_esg_ker.c:	gamma_j = (x[j]-xs[j])/r;
lib/ansol_HI_esg_ker.c:	output = ( 3.0*gamma_i*gamma_j - Kdelta(i,j) )*Int3( t, r, alpha, beta, fpeak )/r3;
lib/ansol_HI_esg_ker.c:	output -= ( gamma_i*gamma_j - Kdelta(i,j) )*Ricker_prime(trb,fpeak)/(b2*r);
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c:	output = -compdgauss( trb, fpeak ) + compdgauss( tra, fpeak );
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c:	output = (trb-t)*compdgauss(trb,fpeak) - (tra-t)*compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c:	output += -compgauss(trb,fpeak) + compgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c:	output = (trb-t)*comprick(trb,fpeak) - (tra-t)*comprick(tra,fpeak);
lib/ansol_HI_esg_ker.c:	output += -compdgauss(trb,fpeak) + compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c:	output = -SQR(trb-t)*comprick(trb,fpeak) + SQR(tra-t)*comprick(tra,fpeak);
lib/ansol_HI_esg_ker.c:	output += 2.0*(trb-t)*compdgauss(trb,fpeak) - 2.0*(tra-t)*compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c:	output += -2.0*compgauss(trb,fpeak) + 2.0*compgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:	float output = (-6.0*t + 4.0*st*SQR(t)*t)*st*exp(-st*SQR(t));
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:		if ( fabs(rs[0]-0.5)<1e-9 ) {
lib/pointsrc.c~:			rs[0] -= 0.5;
lib/pointsrc.c~:			--is[0];	
lib/pointsrc.c~:		if ( fabs(rs[1]-0.5)<1e-9 ) {
lib/pointsrc.c~:			rs[1] -= 0.5;
lib/pointsrc.c~:			--is[1];	
lib/pointsrc.c~:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c~:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c~:	 	      is[1]>gs[1]-1 &&
lib/pointsrc.c~:	 	      is[0]>gs[0]-1 &&
lib/pointsrc.c~:		      is[1]>gs[1]-1 &&
lib/pointsrc.c~:	 	      is[2]>gs[2]-1 &&
lib/pointsrc.c~:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c~:				fac=1.0-rs[0];
lib/pointsrc.c~:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c~:      			is[0]--;
lib/pointsrc.c~:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c~:	  		     is[1]>gs[1]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*(1.0-rs[1]);
lib/pointsrc.c~:      			if ( is[0]>gs[0]-1 &&
lib/pointsrc.c~:	  		     is[1]>gs[1]-1 &&
lib/pointsrc.c~:			  	fac=rs[0]*(1.0-rs[1]);
lib/pointsrc.c~:      			is[0]--;
lib/pointsrc.c~:      			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:	  		    is[1]>gs[1]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*rs[1];
lib/pointsrc.c~:      			is[1]--;
lib/pointsrc.c~:      			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:	  		    is[1]>gs[1]-1 &&
lib/pointsrc.c~:      			is[0]--;is[1]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=rs[0]*(1.0-rs[1])*(1.0-rs[2]);
lib/pointsrc.c~:			is[0]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*rs[1]*(1.0-rs[2]);
lib/pointsrc.c~:			is[1]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=rs[0]*rs[1]*(1.0-rs[2]);
lib/pointsrc.c~:			is[0]--;is[1]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*(1.0-rs[1])*rs[2];
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=rs[0]*(1.0-rs[1])*rs[2];
lib/pointsrc.c~:			is[0]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:				fac=(1.0-rs[0])*rs[1]*rs[2];
lib/pointsrc.c~:			is[1]--;
lib/pointsrc.c~:			if (is[0]>gs[0]-1 &&
lib/pointsrc.c~:			is[1]>gs[1]-1 &&
lib/pointsrc.c~:			is[2]>gs[2]-1 &&
lib/pointsrc.c~:			is[0]--;is[1]--;
lib/pointsrc.c~:			is[2]--;
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:	int     iw;           	/* half-width */
lib/pointsrc.c~:	ireal   tmp0, tmp1, q; 	/* workspace for in-place trapezoidal rule */
lib/pointsrc.c~:	ireal refkappa;        	/* near-source bulk modulus */
lib/pointsrc.c~:	tr->srcin_flag = 0;
lib/pointsrc.c~:		tr->srcin_flag = 1;
lib/pointsrc.c~:	get_d(d, m->gl);
lib/pointsrc.c~:	rd_ndim(&m->ld_a, D_MP00, &ndim);
lib/pointsrc.c~:	IASN(tr->is,IPNT_0);
lib/pointsrc.c~:	RASN(tr->rs,RPNT_0);
lib/pointsrc.c~:	tr->is[0]=tg->is[0]; tr->rs[0]=tg->rs[0]; tis[0]=tr->is[0];
lib/pointsrc.c~:	if (ndim > 1) { tr->is[1]=tg->is[1]; tr->rs[1]=tg->rs[1]; tis[1]=tr->is[1]; }
lib/pointsrc.c~:	if (ndim > 2) { tr->is[2]=tg->is[2]; tr->rs[2]=tg->rs[2]; tis[2]=tr->is[2]; } 
lib/pointsrc.c~:	tr->order = 0;
lib/pointsrc.c~:	ps_ffint(*par, "sampord", &(tr->order));
lib/pointsrc.c~:	tr->fpsrc = NULL;
lib/pointsrc.c~:	tr->fpdbg = NULL;
lib/pointsrc.c~:	/* extract near-source bulk modulus from grid - necessary for
lib/pointsrc.c~:	   grid, check neighboring grid points - in that case, at least one
lib/pointsrc.c~:	rd_gse(&(m->ld_a), D_MP00, gs, ge);
lib/pointsrc.c~:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c~:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c~:	if (iflag) refkappa = rd_gget(&(m->ld_a), D_MP00, tis);
lib/pointsrc.c~:	/* extract near-source bouyancy from grid - necessary for
lib/pointsrc.c~:	   WWS, 04.03.09: need to do this here too - to avoid failure if
lib/pointsrc.c~:	   neighboring grid points - in that case, at least one of these
lib/pointsrc.c~:	rd_gse(&(m->ld_a), D_MV0, gs, ge);
lib/pointsrc.c~:		tis[i] = tr->is[i];
lib/pointsrc.c~:		if ( (tr->is[i] < gs[i]) && (tr->is[i]+1 > gs[i]-1) ) tis[i]++;
lib/pointsrc.c~:		if ( (tr->is[i] > ge[i]) && (tr->is[i]-1 < ge[i]+1) ) tis[i]--;
lib/pointsrc.c~:	if (iflag) refbou = rd_gget(&(m->ld_a), D_MV0, tis);
lib/pointsrc.c~:	   slightly different points - this of course does not matter if
lib/pointsrc.c~:		fprintf(stream,"NOTE: pointsrc_init - using default ");
lib/pointsrc.c~:	RASN( tr->src_d, RPNT_0);
lib/pointsrc.c~:	if (tr->srcin_flag) {
lib/pointsrc.c~:		tr->src_d[0] = REAL_ONE;
lib/pointsrc.c~:		if (!(tr->fpsrc = iwave_const_fopen(srcfile, "r",NULL,stream))) {
lib/pointsrc.c~:			fprintf(stream, "Error: pointsrc_init - failed to open source file\n");
lib/pointsrc.c~:		if (fseek(tr->fpsrc,0L,SEEK_SET)) {
lib/pointsrc.c~:			fprintf(stream,"Error: pointsrc_init - failed to seek to start of file\n");
lib/pointsrc.c~:		if (!fgettr(tr->fpsrc, &trsrc)) {
lib/pointsrc.c~:			fprintf(stream,"Error: pointsrc_init - failed to read source file\n");
lib/pointsrc.c~:		iwave_fclose(tr->fpsrc);
lib/pointsrc.c~:		   at an external sample rate - read headers relevant for single dilat
lib/pointsrc.c~:		tr->istart = (int)(tmpt0/((m->tsind).dt));
lib/pointsrc.c~:		t0 = (m->tsind).dt * tr->istart;
lib/pointsrc.c~:		/*    tr->n = (int)(tmpnt*tmpdt/((m->tsind).dt))+1;*/
lib/pointsrc.c~:		tmax = iwave_max(tmpt0 + tmpnt * tmpdt, tg->t0 + tg->nt * ((m->tsind).dt));
lib/pointsrc.c~:		tr->n = (int)(tmax/((m->tsind).dt)) + 1;
lib/pointsrc.c~:		tr->w = (ireal *)usermalloc_(sizeof(ireal)*(tr->n));
lib/pointsrc.c~:		lnt  = (int)(tr->n * ((m->tsind).dt) / tmpdt) + 1;
lib/pointsrc.c~:		for (i = tmpnt; i < lnt; i++) resc[i] = trsrc.data[tmpnt-1];
lib/pointsrc.c~:			/* integrate once - trapezoidal rule in-place 
lib/pointsrc.c~:				w[j] <- sum_{i=1}^{i=j} 0.5*dt*(w[i-1]+w[i])
lib/pointsrc.c~:			tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c~:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w, &(tr->n), &iend,wk,&wl))) {
lib/pointsrc.c~:				fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c~:			tdt = (ireal)((m->tsind).dt);
lib/pointsrc.c~:			if ((err=cubic_(&tmpt0, &tmpdt, resc, &lnt, &t0, &(tdt), tr->w,&(tr->n),&iend,wk,&wl))) {
lib/pointsrc.c~:				fprintf(stream,"Error: pointsrc_init - from cubic\n");
lib/pointsrc.c~:			/* check that reference distance is positive - only legal option */
lib/pointsrc.c~:		if (tr->srcin_flag) {
lib/pointsrc.c~:			tr->w = getrick( &iw, (m->tsind).dt, fpeak );
lib/pointsrc.c~:			tr->n = 2 * iw+1;
lib/pointsrc.c~:			tr->w = igetdgauss(&iw, (m->tsind).dt, fpeak);
lib/pointsrc.c~:			tr->n = 2 * iw+1;
lib/pointsrc.c~:		/* source phase - default is zero-phase */
lib/pointsrc.c~:		tr->istart = -iw;
lib/pointsrc.c~:				tr->istart = -iw;
lib/pointsrc.c~:				tr->istart = 0;
lib/pointsrc.c~:/*			else if (!strcmp(wp,"anticausal")) tr->istart=-2*iw;*/
lib/pointsrc.c~:		tr->idbg = 0;
lib/pointsrc.c~:		ps_ffint(*par, "dump_wavelet", &(tr->idbg));
lib/pointsrc.c~:		if (tr->idbg) {
lib/pointsrc.c~:			memcpy(trdbg.data,tr->w,tr->n*sizeof(ireal));
lib/pointsrc.c~:			val.u=1000.0*((m->tsind).dt);
lib/pointsrc.c~:			val.h=tr->n;
lib/pointsrc.c~:			val.h=((m->tsind).dt)*tr->istart;
lib/pointsrc.c~:			if (!(tr->fpdbg=iwave_const_fopen("wavelet.debug","w",NULL,stream))) {
lib/pointsrc.c~:			fputtr(tr->fpdbg,&trdbg);
lib/pointsrc.c~:			fflush(tr->fpdbg);
lib/pointsrc.c~:			iwave_fclose(tr->fpdbg);
lib/pointsrc.c~:	   - 4 pi c^2 dt (from rhs of equation 9, using kappa/rho=c^2 - RHS of 
lib/pointsrc.c~:	   - r (reference distance for normalization, per eqn 13);
lib/pointsrc.c~:	   - reference amplitude;
lib/pointsrc.c~:	   - reciprocal of cell volume, for delta function.
lib/pointsrc.c~:		if (tr->srcin_flag){
lib/pointsrc.c~:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:				tr->scramp = refbou * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:				tr->scramp =  refkappa * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:		if (tr->srcin_flag){
lib/pointsrc.c~:				tr->scramp = refbou * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:				tr->scramp =  4.0 * 3.1415927 * refvel * refvel * refdist * refamp * ((m->tsind).dt) / prod_d;
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:  	if (tr->w) userfree_(&(tr->w)); 
lib/pointsrc.c~:  	if ( tr->fpsrc ) iwave_fclose(tr->fpsrc);
lib/pointsrc.c~:  	if ( tr->fpdbg ) iwave_fclose(tr->fpdbg);
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:	fprintf(stderr,"     evaluating source for iv = %d, it = %d, and istart = %d\n",(m->tsind).iv,(m->tsind).it,tr->istart);
lib/pointsrc.c~:	if (tr->srcin_flag){
lib/pointsrc.c~:		/* key dimn off velocity field - NO-OP if iv!=1 */
lib/pointsrc.c~://		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 1 ) ){
lib/pointsrc.c~:		if ( ((m->tsind).it >= tr->istart) &&
lib/pointsrc.c~:		     ((m->tsind).it <  tr->istart + tr->n) && 
lib/pointsrc.c~:                     ((m->tsind).iv == 1) ){
lib/pointsrc.c~:    			for (i=0; i < (m->ld_a)._s[D_V0].ndim; i++) {
lib/pointsrc.c~:      				pointsource( tr->is,
lib/pointsrc.c~:		  		             tr->rs,
lib/pointsrc.c~:		  		             tr->order,
lib/pointsrc.c~:		  		             tr->scramp,
lib/pointsrc.c~:		  		             tr->src_d[i] * (tr->w)[ (m->tsind).it - tr->istart ],
lib/pointsrc.c~:       		  	 	             (m->ld_c)._s[D_V[i]],
lib/pointsrc.c~:		/* key dimn off pressure field - NO-OP if iv!=0 */
lib/pointsrc.c~:// 		if ( ((m->tsind).it < tr->n_comp) && ((m->tsind).iv == 0 ) ){
lib/pointsrc.c~:		if ( ((m->tsind).it >= tr->istart) &&
lib/pointsrc.c~:		     ((m->tsind).it <  tr->istart + tr->n) && 
lib/pointsrc.c~:                     ((m->tsind).iv == 0) ){
lib/pointsrc.c~:    			for (i=0; i < (m->ld_a)._s[D_P0].ndim; i++) {
lib/pointsrc.c~:      				pointsource( tr->is,
lib/pointsrc.c~:		  		             tr->rs,
lib/pointsrc.c~:		  		             tr->order,
lib/pointsrc.c~:		  		             tr->scramp,
lib/pointsrc.c~:		  		             (tr->w)[ (m->tsind).it - tr->istart ],
lib/pointsrc.c~:       		  	 	             (m->ld_c)._s[D_P[i]],
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:/*----------------------------------------------------------------------------*/
lib/pointsrc.c~:  	fprintf(fp,"/*---------------------------------------------------------*/\n");
lib/pointsrc.c~:	fprintf(fp,"srcin_flag   = %d\n",tr->srcin_flag);
lib/pointsrc.c~:	fprintf(fp,"pulse length = %d\n",tr->n);
lib/pointsrc.c~:  	fprintf(fp,"istart       = %d\n",tr->istart);
lib/pointsrc.c~:  	fprintf(fp,"order        = %d\n",tr->order);
lib/pointsrc.c~:	fprintf(fp,"scramp       = %e\n",tr->scramp);
lib/pointsrc.c~:      		fprintf(fp,"is[%d]=%d rs[%d]=%e src_d[%d]=%e\n", i, tr->is[i], i, tr->rs[i],i,tr->src_d[i]);
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:      f[i+*iw]= fac*exp(-st*st);
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:      f[i+*iw]= -2 * st * fac*exp(-st*st);
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:      f[i+*iw]= -2*pi*pi*fpeak*fpeak*fac*exp(-st*st)*(1.0-2.0*st*st);
lib/gauss.c~:   precision round-off error (i.e. O(10^7)). The Gaussian is
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:    for (i=-*iw;i<*iw+1;i++) {
lib/gauss.c~:  return -exp(-st*t*t)/(2*st);
lib/gauss.c~:  return t*exp(-st*t*t);
lib/gauss.c~:  return (1-2*st*t2)*exp(-st*t2);
lib/ansol_esgn_model.c~:/*------------------- private data declarations ----------------------------*/
lib/ansol_esgn_model.c~:static int m_ndim = 0; /* dimension - need only compute once */
lib/ansol_esgn_model.c~:/*--- private function declarations - assigned to FD_MODEL pointers ----------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:    	IPNT cpers;          /* workspace for periodic wrap info  - currently not used */
lib/ansol_esgn_model.c~:  	/* decode dimension - only on rk 0 */
lib/ansol_esgn_model.c~:	sol_mdl->specs=(void *)sol;
lib/ansol_esgn_model.c~:	ansolpars->srcinfo = rickerinfo;
lib/ansol_esgn_model.c~:	ansolpars->medinfo = himedinfo;
lib/ansol_esgn_model.c~:				fprintf(stream,"ERROR: in ansol_HI_esgn_modelinit - failed to read spatial geometry\n");
lib/ansol_esgn_model.c~:    		fprintf(stream,"ERROR: in ansol_HI_esg_modelinit - failed to read dim=%d\n",m_ndim);
lib/ansol_esgn_model.c~:  	/* decode order - take care of deprecated cases */
lib/ansol_esgn_model.c~:  	ansolpars->k=1;
lib/ansol_esgn_model.c~: 	ps_flint(*pars,"order",&(ansolpars->k));
lib/ansol_esgn_model.c~:    	fprintf(stream,"NOTE: initializing ANSOL_ESG with half-order = %d\n",ansolpars->k);
lib/ansol_esgn_model.c~:	sol->fdpars 		= (void*)ansolpars;		//from ansol_esgn.h
lib/ansol_esgn_model.c~:	sol->isarr 		= esg_isarr;			//from esgn.h
lib/ansol_esgn_model.c~:	sol->set_grid_type 	= esg_set_grid_type;		//from esgn.h
lib/ansol_esgn_model.c~:	sol->build_sten_dep 	= esg_build_sten_dep;		//from esgn.h
lib/ansol_esgn_model.c~:	sol->ind2str 		= esg_ind2str;			//from esgn.h
lib/ansol_esgn_model.c~:	sol->alter_dom 		= esg_alter_dom;		//from esgn.h
lib/ansol_esgn_model.c~:	sol->readtimegrid 	= esg_readtimegrid; 		//from esgn_read.h
lib/ansol_esgn_model.c~:	sol->readmedia		= esgn_readmedia;		//from esgn_read.h
lib/ansol_esgn_model.c~:	sol->readgrid 		= esg_readgrid;		 	//from esgn_read.h
lib/ansol_esgn_model.c~:	sol->numsubsteps 	= ansol_esg_numsubsteps;
lib/ansol_esgn_model.c~:	sol->update 		= ansol_esg_update;
lib/ansol_esgn_model.c~:	sol->readschemeinfo 	= ansol_esg_readschemeinfo;
lib/ansol_esgn_model.c~:	sol->create_sten 	= ansol_esg_create_sten;
lib/ansol_esgn_model.c~:	sol->parcopy 		= ansol_HI_esgn_ts_parcopy; 	//HI specific
lib/ansol_esgn_model.c~:	sol->fd_model_init 	= ansol_HI_esg_modelinit;	//HI specific
lib/ansol_esgn_model.c~:	sol->fd_model_dest 	= ansol_HI_esg_modeldest;	//HI specific
lib/ansol_esgn_model.c~:	sol->tsf = ansol_HI_esg_step; //HI spacific
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:		ptgt->dt   = psrc->dt;
lib/ansol_esgn_model.c~:		ptgt->k    = psrc->k;
lib/ansol_esgn_model.c~:		ptgt->ndim = psrc->ndim;
lib/ansol_esgn_model.c~:		ptgt->t_off= psrc->t_off;
lib/ansol_esgn_model.c~:			ptgt->lam[i]     = psrc->lam[i];
lib/ansol_esgn_model.c~:			ptgt->dx[i]      = psrc->dx[i];
lib/ansol_esgn_model.c~:			ptgt->o_coord[i] = psrc->o_coord[i];
lib/ansol_esgn_model.c~:			ptgt->o_index[i] = psrc->o_index[i];
lib/ansol_esgn_model.c~:			ptgt->src_x[i]   = psrc->src_x[i];
lib/ansol_esgn_model.c~:				ptgt->gtype[j][i] = psrc->gtype[j][i];
lib/ansol_esgn_model.c~:		ptgt->link_mdl = psrc->link_mdl;
lib/ansol_esgn_model.c~:		RICKER_INFO * src_ptgt = (RICKER_INFO *)ptgt->srcinfo;
lib/ansol_esgn_model.c~:		const RICKER_INFO * src_psrc = (const RICKER_INFO *)psrc->srcinfo;
lib/ansol_esgn_model.c~:			src_ptgt->fpeak = src_psrc->fpeak;
lib/ansol_esgn_model.c~:			src_ptgt->amp   = src_psrc->amp;
lib/ansol_esgn_model.c~:				src_ptgt->src_d[i] = src_psrc->src_d[i];
lib/ansol_esgn_model.c~:		ESG_HIMED_INFO * med_ptgt = (ESG_HIMED_INFO *)ptgt->medinfo;
lib/ansol_esgn_model.c~:		const ESG_HIMED_INFO * med_psrc = (const ESG_HIMED_INFO *)psrc->medinfo;
lib/ansol_esgn_model.c~:			med_ptgt->mu     = med_psrc->mu;
lib/ansol_esgn_model.c~:			med_ptgt->lambda = med_psrc->lambda;
lib/ansol_esgn_model.c~:			med_ptgt->rho    = med_psrc->rho;
lib/ansol_esgn_model.c~:			med_ptgt->alpha  = med_psrc->alpha;
lib/ansol_esgn_model.c~:			med_ptgt->beta   = med_psrc->beta;
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:  	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	int err=create_sten2_2k(sol,stream, ansolpars->k, ndim, gtype, sten_dep_mat,sten);
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:	FD_MODEL * sol = (FD_MODEL *)(model->specs); 
lib/ansol_esgn_model.c~:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	ansolpars->dt = (model->tsind).dt;     //setting dt
lib/ansol_esgn_model.c~:	ansolpars->ndim = ndim = (model->g).dim; //setting ndim
lib/ansol_esgn_model.c~:	get_d (ansolpars->dx,     model->g); //setting dx
lib/ansol_esgn_model.c~:	get_o (ansolpars->o_coord,model->g); //setting o_coord
lib/ansol_esgn_model.c~:	get_gs(ansolpars->o_index,model->g); //setting o_index
lib/ansol_esgn_model.c~:		if ( ansolpars->dx[idim] <= 0.0) {
lib/ansol_esgn_model.c~:				idim, ansolpars->dx[idim]);
lib/ansol_esgn_model.c~:		ansolpars->lam[idim] = ansolpars->dt / ansolpars->dx[idim]; //setting lam
lib/ansol_esgn_model.c~:		fprintf(stderr, "lam[%d] = %g\n", idim, ansolpars->lam[idim]);
lib/ansol_esgn_model.c~:	esg_set_grid_type( stream, ndim, ansolpars->gtype ); //setting gtype
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:  	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c~:		if (sol->fdpars){
lib/ansol_esgn_model.c~:			ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:			if (ansolpars->srcinfo){
lib/ansol_esgn_model.c~:				RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c~:			if (ansolpars->medinfo){
lib/ansol_esgn_model.c~:				ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c~:	if (!sol->fdpars) 
lib/ansol_esgn_model.c~:  	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo); //allocated in ansol_HI_esg_modelinit.
lib/ansol_esgn_model.c~:	dom = &(model->ld_c); 
lib/ansol_esgn_model.c~:	ndim = ansolpars->ndim;
lib/ansol_esgn_model.c~:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c~:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c~:	fprintf(stream,"NOTE: for mu, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c~:	himedinfo->mu = fmax;
lib/ansol_esgn_model.c~:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c~:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c~:	fprintf(stream,"NOTE: for lambda, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c~:	himedinfo->lambda = fmax;
lib/ansol_esgn_model.c~:	fmax = dom->_s[field_i]._s0[0];
lib/ansol_esgn_model.c~:		fmax = iwave_max(fmax,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:		fmin = iwave_min(fmin,dom->_s[field_i]._s0[i]);
lib/ansol_esgn_model.c~:	if (fabs(fmax-fmin)>TOL){
lib/ansol_esgn_model.c~:	fprintf(stream,"NOTE: for rho, max-min = %g\n",fmax-fmin);
lib/ansol_esgn_model.c~:	himedinfo->rho = 1.0/fmax;
lib/ansol_esgn_model.c~:	himedinfo->alpha = sqrt( (himedinfo->lambda + 2.0*himedinfo->mu)/himedinfo->rho );
lib/ansol_esgn_model.c~:	himedinfo->beta = sqrt( himedinfo->mu/himedinfo->rho );
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:	FD_MODEL * sol = (FD_MODEL *)(model->specs);
lib/ansol_esgn_model.c~:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c~:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c~:	ndim = ansolpars->ndim;
lib/ansol_esgn_model.c~:		fprintf(stream,"       homogeneous isotropic case with a non-point source!\nABORT!\n");
lib/ansol_esgn_model.c~:    		fprintf(stream,"NOTE: ansol_HI_esg_srcinfo - using default ");
lib/ansol_esgn_model.c~:	iw = (pntsrc->n - 1.0)/2.0;
lib/ansol_esgn_model.c~:	ansolpars->t_off = (iw + pntsrc->istart) * ansolpars->dt;
lib/ansol_esgn_model.c~:	RASN( ansolpars->src_x, tg->src[0] );
lib/ansol_esgn_model.c~:	rickerinfo->fpeak = fpeak;
lib/ansol_esgn_model.c~:		prod_d *= ansolpars->dx[idim];
lib/ansol_esgn_model.c~:	rickerinfo->amp = pntsrc->scramp * prod_d * himedinfo->rho / ansolpars->dt;
lib/ansol_esgn_model.c~:		rickerinfo->src_d[idim] = pntsrc->src_d[idim];
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:	FD_MODEL * sol = (FD_MODEL *)(sol_mdl->specs);
lib/ansol_esgn_model.c~:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	ansolpars->link_mdl = fd_mdl;
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgn_model.c~:	FD_MODEL * sol = (FD_MODEL *)(sol_mdl->specs);
lib/ansol_esgn_model.c~:	ANSOL_ESG_PARS * ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
lib/ansol_esgn_model.c~:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c~:	fprintf(stream,"dt          = %g\n",ansolpars->dt);
lib/ansol_esgn_model.c~:	fprintf(stream,"k           = %d\n",ansolpars->k);
lib/ansol_esgn_model.c~:	fprintf(stream,"ndim        = %d\n",ansolpars->ndim);
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"lam[%d]     = %g\n",idim,ansolpars->lam[idim]);
lib/ansol_esgn_model.c~:if (ansolpars->link_mdl)
lib/ansol_esgn_model.c~:	fprintf(stream,"link_mdl    = NON-NULL\n");
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"dx[%d]      = %g\n",idim,ansolpars->dx[idim]);
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"o_coord[%d] = %g\n",idim,ansolpars->o_coord[idim]);
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"o_index[%d] = %g\n",idim,ansolpars->o_index[idim]);
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"src_x[%d]   = %g\n",idim,ansolpars->src_x[idim]);
lib/ansol_esgn_model.c~:	fprintf(stream,"t_off       = %g\n",ansolpars->t_off);
lib/ansol_esgn_model.c~:	ESG_HIMED_INFO * himedinfo = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_esgn_model.c~:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c~:	fprintf(stream,"mu     = %g\n",himedinfo->mu);
lib/ansol_esgn_model.c~:	fprintf(stream,"lambda = %g\n",himedinfo->lambda);
lib/ansol_esgn_model.c~:	fprintf(stream,"rho    = %g\n",himedinfo->rho);
lib/ansol_esgn_model.c~:	fprintf(stream,"alpha  = %g\n",himedinfo->alpha);
lib/ansol_esgn_model.c~:	fprintf(stream,"beta   = %g\n\n",himedinfo->beta);
lib/ansol_esgn_model.c~:	RICKER_INFO * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_esgn_model.c~:	fprintf(stream,"---------------------\n");
lib/ansol_esgn_model.c~:	fprintf(stream,"fpeak     = %g\n",rickerinfo->fpeak);
lib/ansol_esgn_model.c~:	fprintf(stream,"amp       = %g\n",rickerinfo->amp);
lib/ansol_esgn_model.c~:for( idim=0; idim<ansolpars->ndim; idim++)
lib/ansol_esgn_model.c~:	fprintf(stream,"src_d[%d] = %g\n",idim,rickerinfo->src_d[idim]);
lib/ansol_esg_movie.c:  	return -1;
lib/ansol_esg_movie.c:  	mt->iselect=ansol_esg_movie_select;
lib/ansol_esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c:	//Setting multi-sampler m_s to null.
lib/ansol_esg_multi_sampler.c:	m_s->sampler_select = ansol_esg_sampler_select;
Binary file lib/esg_multi_sampler.o matches
lib/ansol_esg_movie.c~:  	return -1;
lib/ansol_esg_movie.c~:  	mt->iselect=ansol_esg_movie_select;
lib/ansol_esg_multi_sampler.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esg_multi_sampler.c~:	//Setting multi-sampler m_s to null.
lib/ansol_esg_multi_sampler.c~:	m_s->sampler_select = ansol_esg_sampler_select;
Binary file lib/ansol_HI_esg_ker.o matches
Binary file lib/ansol_esg_movie.o matches
lib/ansol_esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgsteps.c~:/*----------------------------------------------------------------------------*/
lib/ansol_esgsteps.c~:	int ndim = dom->_s[0].ndim;
lib/ansol_esgsteps.c~:// 		pmax = dom->_s[D_P0]._s0[0];
lib/ansol_esgsteps.c~:// 			pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/ansol_esgsteps.c~:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c~:		//--Updating pressures -------------------------------------------------------//
lib/ansol_esgsteps.c~:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c~:		//--Updating shear stresses --------------------------------------------------//
lib/ansol_esgsteps.c~:// 		pmax = dom->_s[D_P0]._s0[0];
lib/ansol_esgsteps.c~:// 		for (i=1;i<ntot;i++) pmax = iwave_max(pmax,dom->_s[D_P0]._s0[i]);
lib/ansol_esgsteps.c~:		vmax = dom->_s[D_V0]._s0[0];
lib/ansol_esgsteps.c~:		for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
lib/ansol_esgsteps.c~:		//----------------------------------------------------------------------------//
lib/ansol_esgsteps.c~:		//--Updating velocities ------------------------------------------------------//
lib/ansol_esgsteps.c~:		vmax = dom->_s[D_V0]._s0[0];
lib/ansol_esgsteps.c~:		for (i=1;i<ntot;i++) vmax = iwave_max(vmax,dom->_s[D_V0]._s0[i]);
Binary file lib/ansol_esg_multi_sampler.o matches
Binary file lib/ansol_esgn_model.o matches
Binary file lib/ansol_esgsteps.o matches
lib/ansol_HI_esg_ker.c~:	f(x,t) = delta(xs-x)psi(t)
lib/ansol_HI_esg_ker.c~:#define TOL 1.0e-8
lib/ansol_HI_esg_ker.c~://computes integral_(r/alpha)^(r/beta) Ricker(t-tau) dtau
lib/ansol_HI_esg_ker.c~://computes integral_(r/alpha)^(r/beta) tau Ricker(t-tau) dtau
lib/ansol_HI_esg_ker.c~://computes integral_(r/alpha)^(r/beta) tau Ricker_prime(t-tau) dtau
lib/ansol_HI_esg_ker.c~://computes integral_(r/alpha)^(r/beta) tau^2 Ricker_prime(t-tau) dtau
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal multi1 = himedinfo->lambda;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak   = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal multi1 = himedinfo->lambda;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt; //compensating for substep time offset
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	fprintf(stderr,"    time = %e\n",get_time( fd_mdl->tsind )-.5*ansolpars->dt);
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt; //compensating for substep time offset
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal mu     = himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp   = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:					fprintf(stderr,"ERROR: x=src_x in one point in non-primal grid! ABORT\n");
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c~:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 3D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c~:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 3D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal multi0 = himedinfo->lambda + 2.0*himedinfo->mu; //lambda + 2mu
lib/ansol_HI_esg_ker.c~:	register ireal multi1 = himedinfo->lambda; //lambda
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	RICKER_INFO    * rickerinfo = (RICKER_INFO *)(ansolpars->srcinfo);
lib/ansol_HI_esg_ker.c~:	ESG_HIMED_INFO * himedinfo  = (ESG_HIMED_INFO *)(ansolpars->medinfo);
lib/ansol_HI_esg_ker.c~:	IMODEL	       * fd_mdl     = ansolpars->link_mdl;
lib/ansol_HI_esg_ker.c~:	RARR           * s          = dom->_s;
lib/ansol_HI_esg_ker.c~:	RARR	       * s_phys     = (fd_mdl->ld_p)._s;
lib/ansol_HI_esg_ker.c~:	int ndim = ansolpars->ndim;
lib/ansol_HI_esg_ker.c~:	RASN( dx,      ansolpars->dx );
lib/ansol_HI_esg_ker.c~:	RASN( o_coord, ansolpars->o_coord );
lib/ansol_HI_esg_ker.c~:	IASN( o_index, ansolpars->o_index );
lib/ansol_HI_esg_ker.c~:	RASN( src_x,   ansolpars->src_x );
lib/ansol_HI_esg_ker.c~:	register ireal mu = himedinfo->mu;
lib/ansol_HI_esg_ker.c~:	register ireal rho    = himedinfo->rho;
lib/ansol_HI_esg_ker.c~:	register ireal alpha  = himedinfo->alpha;
lib/ansol_HI_esg_ker.c~:	register ireal beta   = himedinfo->beta;
lib/ansol_HI_esg_ker.c~:	register ireal amp     = rickerinfo->amp;
lib/ansol_HI_esg_ker.c~:	register ireal fpeak = rickerinfo->fpeak;
lib/ansol_HI_esg_ker.c~:	RASN( src_d, rickerinfo->src_d );
lib/ansol_HI_esg_ker.c~:	register ireal t = get_time( fd_mdl->tsind );	
lib/ansol_HI_esg_ker.c~:	t -= ansolpars->t_off;
lib/ansol_HI_esg_ker.c~:	t -= 0.5*ansolpars->dt;
lib/ansol_HI_esg_ker.c~:		e.g., if field is of dual grid type in 0-axis then there is an 1/2 offset in 0-axis. */
lib/ansol_HI_esg_ker.c~:		goff[idim] = 0.5 * ansolpars->gtype[iarr][idim];
lib/ansol_HI_esg_ker.c~:	//----------------------------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:	//--main spatial 2D loop------------------------------------------------------//
lib/ansol_HI_esg_ker.c~:		offset[idim] = o_coord[idim] + ( gs[idim] + goff[idim] - o_index[idim] )*dx[idim];
lib/ansol_HI_esg_ker.c~:	/* loop in 2-direction */
lib/ansol_HI_esg_ker.c~:		/* updating 2-component of x */
lib/ansol_HI_esg_ker.c~:		/* loop in 1-direction */
lib/ansol_HI_esg_ker.c~:			/* updating 1-component of x */
lib/ansol_HI_esg_ker.c~:			/* loop in 0-direction */
lib/ansol_HI_esg_ker.c~:				/* updating 0-component of x */
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:		r2 += SQR( x[idim]-xs[idim] );
lib/ansol_HI_esg_ker.c~:	tra = t - r/alpha;
lib/ansol_HI_esg_ker.c~:	trb = t - r/beta;
lib/ansol_HI_esg_ker.c~:	gamma_i = (x[i]-xs[i])/r;
lib/ansol_HI_esg_ker.c~:	gamma_j = (x[j]-xs[j])/r;
lib/ansol_HI_esg_ker.c~:	gamma_k = (x[k]-xs[k])/r;
lib/ansol_HI_esg_ker.c~:	gamma_i_k = (Kdelta(i,k)-gamma_i*gamma_k)/r;
lib/ansol_HI_esg_ker.c~:	gamma_j_k = (Kdelta(j,k)-gamma_j*gamma_k)/r;
lib/ansol_HI_esg_ker.c~:	output = ( 3.0*(gamma_i_k*gamma_j + gamma_i*gamma_j_k)/r3 -(3.0*gamma_i*gamma_j-Kdelta(i,j))/r4 )*Int2( t, r, alpha, beta, fpeak );
lib/ansol_HI_esg_ker.c~:        output -= gamma_k*(3.0*gamma_i*gamma_j-Kdelta(i,j))*Int4( t, r, alpha, beta, fpeak)/r4;
lib/ansol_HI_esg_ker.c~:	output += ( -gamma_i*gamma_j*gamma_k/r + gamma_i_k*gamma_j + gamma_i*gamma_j_k )*comprick(tra,fpeak)/(r*a2);
lib/ansol_HI_esg_ker.c~:	output -= gamma_i*gamma_j*gamma_k*Ricker_prime(tra,fpeak)/(r*a3);
lib/ansol_HI_esg_ker.c~:	output += ( gamma_k*(gamma_i*gamma_j-Kdelta(i,j))/r - gamma_i_k*gamma_j - gamma_i*gamma_j_k )*comprick(trb,fpeak)/(r*b2);
lib/ansol_HI_esg_ker.c~:	output += gamma_k*(gamma_i*gamma_j-Kdelta(i,j))*Ricker_prime(trb,fpeak)/(r*b3);
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:		r2 += SQR( x[idim]-xs[idim] );
lib/ansol_HI_esg_ker.c~:	tra = t - r/alpha;
lib/ansol_HI_esg_ker.c~:	trb = t - r/beta;
lib/ansol_HI_esg_ker.c~:	gamma_i = (x[i]-xs[i])/r;
lib/ansol_HI_esg_ker.c~:	gamma_j = (x[j]-xs[j])/r;
lib/ansol_HI_esg_ker.c~:	output = ( 3.0*gamma_i*gamma_j - Kdelta(i,j) )*Int3( t, r, alpha, beta, fpeak )/r3;
lib/ansol_HI_esg_ker.c~:	output -= ( gamma_i*gamma_j - Kdelta(i,j) )*Ricker_prime(trb,fpeak)/(b2*r);
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c~:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c~:	output = -compdgauss( trb, fpeak ) + compdgauss( tra, fpeak );
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c~:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c~:	output = (trb-t)*compdgauss(trb,fpeak) - (tra-t)*compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c~:	output += -compgauss(trb,fpeak) + compgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c~:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c~:	output = (trb-t)*comprick(trb,fpeak) - (tra-t)*comprick(tra,fpeak);
lib/ansol_HI_esg_ker.c~:	output += -compdgauss(trb,fpeak) + compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	tra = t-r/alpha; 
lib/ansol_HI_esg_ker.c~:	trb = t-r/beta;
lib/ansol_HI_esg_ker.c~:	output = -SQR(trb-t)*comprick(trb,fpeak) + SQR(tra-t)*comprick(tra,fpeak);
lib/ansol_HI_esg_ker.c~:	output += 2.0*(trb-t)*compdgauss(trb,fpeak) - 2.0*(tra-t)*compdgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c~:	output += -2.0*compgauss(trb,fpeak) + 2.0*compgauss(tra,fpeak);
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:	float output = (-6.0*t + 4.0*st*SQR(t)*t)*st*exp(-st*SQR(t));
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
lib/ansol_HI_esg_ker.c~:/*----------------------------------------------------------------------------*/
main/SConscript:# Madagascar self-docs
main/esg.c:------------------------------------------------------------------------
main/esg.c:------------------------------------------------------------------------
main/esg.c:------------------------------------------------------------------------
main/esg.c:------------------------------------------------------------------------
main/esg.c:------------------------------------------------------------------------
main/esg.c:------------------------------------------------------------------------
main/esg.c:          nl1 = 0.5         z - neg
main/esg.c:          nr1 = 0.5         z - pos
main/esg.c:          nl2 = 0.5         x - neg
main/esg.c:          nr2 = 0.5         x - pos
main/esg.c:/* uncomment to write to the rk-dep output stream at every time step */
main/esg.c:	MULTI_SAMPLER multi_trace;	/* multi-trace sampler    */ //MB
main/esg.c:	int multiflag;			/* flag for multi-sampler */ //MB
main/esg.c:	/* self-doc if no args */
main/esg.c:  	fprintf(stream,"--------------------\n");
main/esg.c:	fprintf(stream,"--------------------\n");
main/esg.c:	/* check comm status - skip the rest if no comm */
main/esg.c:	/* extract source key - default = "point" */
main/esg.c:    		fprintf(stream,"post-iwave_construct step\n");
main/esg.c:		fprintf(stream,"axis-%d\n",i);
main/esg.c:		fprintf(stream,"axis-%d\n",i);
main/esg.c:	/* start multi-trace block */
main/esg.c:		fprintf(stream, "pre-construct multi-sampler\n");
main/esg.c:		//esg precons for multi-sampler multi_trace
main/esg.c:		fprintf(stream, "construct multi-sampler\n");
main/esg.c:		//constructing multi-sampler multi_trace
main/esg.c:			fprintf(stream, "pre-construct multi-sampler for ansol\n");
main/esg.c:			//ansol_esg precons for multi-sampler multi_trace
main/esg.c:			fprintf(stream, "construct multi-sampler for ansol\n");
main/esg.c:			//constructing multi-sampler multi_trace
main/esg.c:	else{ //----- Single trace case, i.e., datafile found ------//
main/esg.c:			fprintf(stream,"ERROR: main - model dim = %d not in range [1, %d]. ABORT\n",state.model.g.dim,RARR_MAX_NDIM);
main/esg.c:	/* end multi-trace block */
main/esg.c:	* - number of shot records
main/esg.c:	* - shot coordinates for each record
main/esg.c:	* - file offset for each record
main/esg.c:	* - test xrec against last: for versions which permit incoherent 
main/esg.c:	* - iwave_static_init: uses source coordinates to read in proper
main/esg.c:	* - sampler_init: reads trace geometry for shot, allocates and 
main/esg.c:	*   initializes sampling-related arrays
main/esg.c:			istart=ptsrc->istart;
main/esg.c:			istart=(arrsrc->t).istart;
main/esg.c:				esgnpars = (ESGN_TS_PARS *)(fdm->fdpars);
main/esg.c:				ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
main/esg.c:				fdm->tsf = sol->tsf;
main/esg.c:				fdm->fdpars = (void *)(ansolpars);
main/esg.c:				fdm->tsf = esg_step;
main/esg.c:				fdm->fdpars = (void *)(esgnpars);
main/esg.c:			fprintf(stream,"step - update dynamical fields\n");
main/esg.c:				fprintf(stream,"step - update dynamical fields for ansol\n");
main/esg.c:			fprintf(stream,"poststep - source\n");
main/esg.c:			fprintf(stream,"poststep - traces\n");
main/esg.c:				fprintf(stream,"poststep - traces\n");
main/esg.c:			fprintf(stream,"poststep - movie\n");
main/esg.c:				fprintf(stream,"poststep - movie for ansol\n");
main/esg.c:		/* after time step loop, write data - this block of code should be
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:------------------------------------------------------------------------
main/esg.c~:          nl1 = 0.5         z - neg
main/esg.c~:          nr1 = 0.5         z - pos
main/esg.c~:          nl2 = 0.5         x - neg
main/esg.c~:          nr2 = 0.5         x - pos
main/esg.c~:/* uncomment to write to the rk-dep output stream at every time step */
main/esg.c~:	MULTI_SAMPLER multi_trace;	/* multi-trace sampler    */ //MB
main/esg.c~:	int multiflag;			/* flag for multi-sampler */ //MB
main/esg.c~:	/* self-doc if no args */
main/esg.c~:  	fprintf(stream,"--------------------\n");
main/esg.c~:	fprintf(stream,"--------------------\n");
main/esg.c~:	/* check comm status - skip the rest if no comm */
main/esg.c~:	/* extract source key - default = "point" */
main/esg.c~:    		fprintf(stream,"post-iwave_construct step\n");
main/esg.c~:		fprintf(stream,"axis-%d\n",i);
main/esg.c~:		fprintf(stream,"axis-%d\n",i);
main/esg.c~:	/* start multi-trace block */
main/esg.c~:		fprintf(stream, "pre-construct multi-sampler\n");
main/esg.c~:		//esg precons for multi-sampler multi_trace
main/esg.c~:		fprintf(stream, "construct multi-sampler\n");
main/esg.c~:		//constructing multi-sampler multi_trace
main/esg.c~:			fprintf(stream, "pre-construct multi-sampler for ansol\n");
main/esg.c~:			//ansol_esg precons for multi-sampler multi_trace
main/esg.c~:			fprintf(stream, "construct multi-sampler for ansol\n");
main/esg.c~:			//constructing multi-sampler multi_trace
main/esg.c~:	else{ //----- Single trace case, i.e., datafile found ------//
main/esg.c~:			fprintf(stream,"ERROR: main - model dim = %d not in range [1, %d]. ABORT\n",state.model.g.dim,RARR_MAX_NDIM);
main/esg.c~:	/* end multi-trace block */
main/esg.c~:	* - number of shot records
main/esg.c~:	* - shot coordinates for each record
main/esg.c~:	* - file offset for each record
main/esg.c~:	* - test xrec against last: for versions which permit incoherent 
main/esg.c~:	* - iwave_static_init: uses source coordinates to read in proper
main/esg.c~:	* - sampler_init: reads trace geometry for shot, allocates and 
main/esg.c~:	*   initializes sampling-related arrays
main/esg.c~:			istart=ptsrc->istart;
main/esg.c~:			istart=(arrsrc->t).istart;
main/esg.c~:				esgnpars = (ESGN_TS_PARS *)(fdm->fdpars);
main/esg.c~:				ansolpars = (ANSOL_ESG_PARS *)(sol->fdpars);
main/esg.c~:				fdm->tsf = sol->tsf;
main/esg.c~:				fdm->fdpars = (void *)(ansolpars);
main/esg.c~:				fdm->tsf = esg_step;
main/esg.c~:				fdm->fdpars = (void *)(esgnpars);
main/esg.c~:			fprintf(stream,"step - update dynamical fields\n");
main/esg.c~:				fprintf(stream,"step - update dynamical fields for ansol\n");
main/esg.c~:			fprintf(stream,"poststep - source\n");
main/esg.c~:			fprintf(stream,"poststep - traces\n");
main/esg.c~:				fprintf(stream,"poststep - traces\n");
main/esg.c~:			fprintf(stream,"poststep - movie\n");
main/esg.c~:				fprintf(stream,"poststep - movie for ansol\n");
main/esg.c~:		/* after time step loop, write data - this block of code should be
Binary file main/esg.o matches
main/esg.c.bak:/* uncomment to write to the rk-dep output stream at every major step 
main/esg.c.bak:/* uncomment to write to the rk-dep output stream at every time step 
main/esg.c.bak:  /* self-doc if no args */
main/esg.c.bak:  /* check comm status - skip the rest if no comm */
main/esg.c.bak:    /* extract source key - default = "point" */
main/esg.c.bak:     * - number of shot records
main/esg.c.bak:     * - shot coordinates for each record
main/esg.c.bak:     * - file offset for each record
main/esg.c.bak:     * - test xrec against last: for versions which permit incoherent 
main/esg.c.bak:     * - iwave_static_init: uses source coordinates to read in proper
main/esg.c.bak:     * - sampler_init: reads trace geometry for shot, allocates and 
main/esg.c.bak:     *   initializes sampling-related arrays
main/esg.c.bak:	istart=ptsrc->istart;
main/esg.c.bak:	istart=(arrsrc->t).istart;
main/esg.c.bak:	fprintf(stream,"step - update dynamical fields\n");
main/esg.c.bak:	fprintf(stream,"poststep - source\n");
main/esg.c.bak:	fprintf(stream,"poststep - traces\n");
main/esg.c.bak:	fprintf(stream,"poststep - movie\n");
main/esg.c.bak:      /* after time step loop, write data - this block of code should be
Binary file main/esg.x matches
main/testing_solker.c:		xs[0] = -4.0; 
main/#esg.c#:/* uncomment to write to the rk-dep output stream at every time step 
main/#esg.c#:  /* self-doc if no args */
main/#esg.c#:  /* check comm status - skip the rest if no comm */
main/#esg.c#:    /* extract source key - default = "point" */
main/#esg.c#:      fprintf(stream,"ERROR: main - model dim = %d not in range [1, %d]. ABORT\n",state.model.g.dim,RARR_MAX_NDIM);
main/#esg.c#:     * - number of shot records
main/#esg.c#:     * - shot coordinates for each record
main/#esg.c#:     * - file offset for each record
main/#esg.c#:     * - test xrec against last: for versions which permit incoherent 
main/#esg.c#:     * - iwave_static_init: uses source coordinates to read in proper
main/#esg.c#:     * - sampler_init: reads trace geometry for shot, allocates and 
main/#esg.c#:     *   initializes sampling-related arrays
main/#esg.c#:	istart=ptsrc->istart;
main/#esg.c#:	istart=(arrsrc->t).istart;
main/#esg.c#:	fprintf(stream,"step - update dynamical fields\n");
main/#esg.c#:	fprintf(stream,"poststep - source\n");
main/#esg.c#:	fprintf(stream,"poststep - traces\n");
main/#esg.c#:	fprintf(stream,"poststep - movie\n");
main/#esg.c#:      /* after time step loop, write data - this block of code should be
main/testing_solker.c~:		xs[0] = -4.0; 
Binary file main/testing_solker.o matches
Binary file main/testing_solker.x matches
SConscript:# add other standard packages - headers in "include", library in "lib" with title
SConscript:    # only test for lib dir - lib may not yet be built! 
SConscript:# finish with -lm - always!
SConscript:liblist.append('-lm')
SConscript:# determine base name of library - same as package name
SConscript:# test for lib - build library
SConscript:#test for main - build executables 
SConscript:#test for test flag, test source directories - build executables, run tests 
SConstruct:AddOption('--install',
SConstruct:AddOption('--uninstall',
SConstruct:	  help="""use scons --uninstall to remove all SConstruct, SConscript, and config*.py files in project and/or subproject directories""")
SConstruct:AddOption('--scrub',
SConstruct:	  help="""use scons --scrub to remove all execution debris files in project and/or subproject root directories. Current scrub list (passed to /bin/rm): """ + scrublist)
SConstruct:AddOption('--test',
SConstruct:	  help="""use scons --test to execute unit and functional tests in subdir test or testsrc """)
SConstruct:AddOption('--ccopts',
SConstruct:	  help="""scons --ccopts=[path] installs compiler configuration file [path] in lib, main, testsrc directories of project and/or subprojects. path may be relative or absolute, and env vars are expanded""")
SConstruct:vars.Add('CFLAGS','flags passed to C compiler only (not C++)','-std=c99')
SConstruct:vars.Add('CCFLAGS','flags passed to C/C++ compiler','-g -pedantic -Wunused -Wimplicit -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_GNU_SOURCE')
SConstruct:# scrub option - only here
SConstruct:    os.system('/bin/rm -f '+ scrublist)
tests/3D/tests.er:	@(if [ ! -x ${PATHTOHERE}/../../../../iwave/demo//model/main/standardmodel.x ] ; then ( cd ${PATHTOHERE}/../../../../iwave/demo/model; /bin/cp ${PROJROOT}/../admin/makefile.boot Makefile; make install; cd ${PATHTOHERE} ); fi)
tests/3D/tests.er:	@(ln -s ${PATHTOHERE}/../../../../iwave/demo/model/main/standardmodel_elastic.x std.x)
tests/3D/tests.er:	if [ ! -x ${PROJROOT}/../xwave/esg/main/esg.x ] ; then ( cd ${PROJROOT/../xwave}; make -f MakeBuild; cd ${PATHTOHERE} ); fi
tests/3D/tests.er:	ln -s ${PROJROOT}/../xwave//esg/main/esg.x xwave_esg.x
tests/3D/tests.er:	if [ ! -x ${PROJROOT}/../iwave/esg/main/main.v1.x ] ; then ( cd ${PROJROOT/../iwave}; make -f MakeBuild; cd ${PATHTOHERE} ); fi
tests/3D/tests.er:	ln -s ${PROJROOT}/../iwave//esg/main/main.v1.x iwave_esg.x
tests/3D/tests.er:	sunull nt=600 ntr=120 dt=0.002 | sushw key=sx a=0 c=0 j=120| sushw key=gx a=-400 b=10 j=120 |sushw key=sy a=200 j=120 | sushw key=gy a=200 c=0 j=120 | sushw key=delrt a=0| sushw key=selev a=-40 | sushw key=gelev a=-20 b=0 c=0 j=120 > $@
tests/3D/tests.er:	sunull nt=1500 ntr=40 dt=0.002 | sushw key=sx a=400 c=0 j=40| sushw key=gx a=0 b=20 j=40 | sushw key=delrt a=0| sushw key=selev a=-40 | sushw key=gelev a=-20 b=0 c=0 j=40 > $@
tests/3D/tests.er:	suwaveform type=ricker1 fpeak=5 | sushw key=gelev a=-40 | sushw key=gx a=200 | sushw key=gy a=200 | sugain scale=10000 >> $@
tests/3D/tests.er:	mpiexec -n 2 ./xwave_esg.x par=test$(subst test,,$(subst .su,,$@)).par
tests/3D/tests.er:	echo ------------------------------------------------------------------------>> $@; \
tests/3D/tests.er:	echo "   scheme_phys = 24          scheme (22, 24, 44 - 1D only)">> $@; \
tests/3D/tests.er:	echo ------------------------------------------------------------------------ >> $@; \
tests/3D/tests.er:	echo 	------------------------------------------------------------------------ >> $@; \
tests/3D/tests.er:	echo ------------------------------------------------------------------------>> $@; \
tests/3D/tests.er:	echo ------------------------------------------------------------------------>> $@; \
tests/3D/tests.er:	echo "          nl1 = 0.0         z - neg">> $@; \
tests/3D/tests.er:	echo "          nr1 = 0.0         z - pos">> $@; \
tests/3D/tests.er:	echo "          nl2 = 0.5         x - neg">> $@; \
tests/3D/tests.er:	echo "          nr2 = 0.0         x - pos">> $@; \
tests/3D/tests.er:	echo "          nl3 = 0.0         y - pos">> $@; \
tests/3D/tests.er:	echo "          nr3 = 0.0         y - pos">> $@; \
tests/3D/srcGen.sh:rm -f mysrc.su
tests/3D/srcGen.sh:while [ $sx -le 3300 ]
tests/3D/srcGen.sh:  | sushw key=gelev a=-40 | sushw key=gx a=$sx\
tests/2D/.intelmpi_wrapper.115846.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115862.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115846.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod628.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod628.ibm01.cluster:40489 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115864.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115862.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod616.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod616.ibm01.cluster:55631 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115864.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod616.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod616.ibm01.cluster:43398 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115847.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115847.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod618.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod618.ibm01.cluster:58807 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115863.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115863.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod616.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod616.ibm01.cluster:41789 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115596.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115596.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod515.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod515.ibm01.cluster:59922 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115869.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115869.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod628.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod628.ibm01.cluster:35066 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115849.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115844.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115844.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod427.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod427.ibm01.cluster:38661 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115849.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod427.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod427.ibm01.cluster:45616 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115845.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115845.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod427.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod427.ibm01.cluster:57758 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115852.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115852.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod612.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod612.ibm01.cluster:54689 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115854.oldconf:-genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304 -np 2 ./esg.x par=test1.par
tests/2D/.intelmpi_wrapper.115854.newconf: -genv I_MPI_EXTRA_FILESYSTEM 1 -genv I_MPI_EXTRA_FILESYSTEM_LIST lustre -genv I_MPI_FALLBACK 0 -genv I_MPI_FABRICS shm:dapl -genv I_MPI_DAPL_PROVIDER OpenIB-mlx4_0-1 -genv I_MPI_RDMA_RNDV_WRITE 1 -genv I_MPI_RDMA_MAX_MSG_SIZE 4194304  -n 2 -host nod417.ibm01.cluster /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/bin/TaskStarter -p nod417.ibm01.cluster:39540 -c /apps/lsf/cluster_IBM/conf -s /apps/lsf/cluster_IBM/7.0/linux2.6-glibc2.3-x86_64/etc -a X86_64 ./esg.x par=test1.par
