import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
erfdm nfill off2abs off2abs2 off2abs3 angdip afmod
'''

try:  # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../filt/lib'],LIBS=['rsf'])
    SConscript('../../filt/lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfsavap.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))
#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id: SConstruct 777 2004-09-07 09:40:19Z fomels $

