import os, sys, re, string, glob
sys.path.append('../..')
import bldutil, configure

progs = '''
aimplfd1
aimplfd2
heatgmres1
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

petscdir = env.get('PETSCDIR')

if petscdir:
    petsccc = env.get('PETSCCC')
    petscpath = env.get('PETSCPATH',[])
    petsclibpath = env.get('PETSCLIBPATH',[])
    petsclibs = env.get('PETSCLIBS',[])
        
    env.Replace(CC=petsccc)
    env.Prepend(CPPPATH=petscpath,
                LIBPATH=petsclibpath,
                LIBS=petsclibs)

    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=['rsf'])

    for source in src:
        inc = env.RSF_Include(source,prefix='')
        obj = env.StaticObject(source)
        env.Depends(obj,inc)
else:
    for source in src:
        inc = env.RSF_Include(source,prefix='')
    
mains = Split(progs)
for prog in mains:
    if petscdir:
        sources = ['M' + prog]
        configure.depends(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='PETSCDIR',package='petsc')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)

