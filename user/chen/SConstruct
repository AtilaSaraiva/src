import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
fdip comp psss psefd mdfd4 resample addevent lphase pwdfreq mflt 
odip fbank2 fbank1 lphfilt firfreq fbdip ldip fbpwd
'''

pyprogs='''
circle prefilt pygraph subplot shuffle asc2rsf
sos fpca
'''
pymods='''
pcmf
'''

tprogs='''
opwd fbdip pca
'''

docs = []

try:  # distributed version
	Import('env root pkgdir bindir')
	env = env.Clone()
except: # local version
	env = bldutil.Debug()
	root = None
	SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
		LIBPATH=['../../lib'],
		LIBS=[env.get('DYNLIB','')+'rsf'])

if env.get('BLAS'):
	progs += ' frt pca'
	if env.get('LAPACK'):
		env.Prepend(LIBS='lapack')

for source in src:
	inc = env.RSF_Include(source,prefix='')
	obj = env.StaticObject(source)
	env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
	sources = ['M' + prog]
	bldutil.depends(env,sources,'M'+prog)
	prog = env.Program(prog,map(lambda x: x + '.c',sources))
	if root:
		env.Install(bindir,prog)

for prog in Split(tprogs):
	sources = ['T' + prog,prog]
	bldutil.depends(env,sources,prog)
	sources = map(lambda x: x + '.o',sources)
	env.Object('T' + prog + '.c')
	env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')


######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
	user = os.path.basename(os.getcwd())
	main = 'sf%s.py' % user
	
	docs += map(lambda prog: env.Doc(prog,'M' + prog),mains)  + \
		map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
	env.Depends(docs,'#/framework/rsf/doc.py')	
	doc = env.RSF_Docmerge(main,docs)
	env.Install(pkgdir,doc)
