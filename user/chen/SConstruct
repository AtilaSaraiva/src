import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
comp resample addevent mflt signal
psss psefd mdfd4 wavmod
pwdfreq lphcoef fbfreq lphfreq
fdip ldip odip dipflt fbank1 fbank2 fbdip fbpwd
ss ssblend sscrg
epfbe epfbil epfws epfad  
frt pca fault fir fastpwd fbgabor apick orientation slopescan
divn2d divnls curv2 horizon 
coherence dipcoh fcoh1 fcoh2
'''

pyprogs='''
circle prefilt pygraph subplot shuffle asc2rsf
sos fpca
'''
pymods='''
pcmf
'''

tprogs='''
opwd fbdip pca fcoh2
'''

docs = []

try:  # distributed version
	Import('env root pkgdir libdir bindir')
	env = env.Clone()
except: # local version
	env = bldutil.Debug()
	root = None
	SConscript('../fomels/SConstruct')

src = Glob('[a-z]*.c')

dynpre = env.get('DYNLIB','')

env.Prepend(CPPPATH=['../../include'],
	    LIBPATH=['../../lib'],
	    LIBS=[dynpre+'rsfpwd',
		  dynpre+'rsf'])

for source in src:
	inc = env.RSF_Include(source,prefix='')
	obj = env.StaticObject(source)
	env.Depends(obj,inc)

lapack = env.get('LAPACK')
blas   = env.get('BLAS') and lapack

if blas:
	env.Prepend(LIBS=lapack)
	env.Depends('_lapack.h','_blas.h')

mains = Split(progs)
for prog in mains:
	sources = ['M' + prog]
	bldutil.depends(env,sources,'M'+prog)	
	if not prog in Split('frt pca epfws orientation coherence fcoh1') or blas:		
		prog = env.Program(prog,map(lambda x: x + '.c',sources))
		if root:
			install = env.Install(bindir,prog)

			if dynpre and env['PLATFORM'] == 'darwin':
				env.AddPostAction(install,
						  'install_name_tool -change '
						  'build/api/c/libdrsf.dylib '
	                                          '%s/libdrsf.dylib %s' % (libdir,install[0]))
				env.AddPostAction(install,
						  'install_name_tool -change '
						  'build/user/fomels/libdrsfpwd.dylib '
	                                          '%s/libdrsfpwd.dylib %s' % (libdir,install[0]))
				
	else:
		prog = env.RSF_Place('sf'+prog,
				     None,var='LAPACK',package='lapack')
		if root:
			env.Install(bindir,prog)

for prog in Split(tprogs):
	sources = ['T' + prog,prog]
	bldutil.depends(env,sources,prog)
	sources = map(lambda x: x + '.o',sources)
	env.Object('T' + prog + '.c')
	if prog !='pca' or blas:
		env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')	
	

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
	user = os.path.basename(os.getcwd())
	main = 'sf%s.py' % user
	
	docs += map(lambda prog: env.Doc(prog,'M' + prog),mains)  + \
		map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
	env.Depends(docs,'#/framework/rsf/doc.py')	
	doc = env.RSF_Docmerge(main,docs)
	env.Install(pkgdir,doc)
