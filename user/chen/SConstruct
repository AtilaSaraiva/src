import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
comp resample addevent mflt signal
psss psefd mdfd4 wavmod
lphase pwdfreq lphfilt firfreq
fdip ldip odip dipflt fbank1 fbank2 fbdip fbpwd
ss ssblend sscrg
beeps bilateral coherence
frt pca epfws
'''

pyprogs='''
circle prefilt pygraph subplot shuffle asc2rsf
sos fpca
'''
pymods='''
pcmf
'''

tprogs='''
opwd fbdip pca 
'''

docs = []

try:  # distributed version
	Import('env root pkgdir bindir')
	env = env.Clone()
except: # local version
	env = bldutil.Debug()
	root = None
	SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
		LIBPATH=['../../lib'],
		LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
	inc = env.RSF_Include(source,prefix='')
	obj = env.StaticObject(source)
	env.Depends(obj,inc)

lapack = env.get('LAPACK')
blas   = env.get('BLAS') and lapack

mains = Split(progs)
for prog in mains:
	sources = ['M' + prog]
	bldutil.depends(env,sources,'M'+prog)	
	if prog in Split('frt pca epfws'):		
		if blas:
			prog = env.Program(prog,map(lambda x: x + '.c',sources),
					   LIBS=env.get('LIBS')+lapack)
		else:
			prog = env.RSF_Place('sf'+prog,
					     None,var='LAPACK',package='lapack')
	else:
		prog = env.Program(prog,map(lambda x: x + '.c',sources))
	if root:
		env.Install(bindir,prog)

for prog in Split(tprogs):
	sources = ['T' + prog,prog]
	bldutil.depends(env,sources,prog)
	sources = map(lambda x: x + '.o',sources)
	env.Object('T' + prog + '.c')
	if prog =='pca':
		if blas:
			env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',
				    LIBS=env.get('LIBS')+lapack)
	else:
		env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')	
	

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
	pymains = Split(pyprogs)
	exe = env.get('PROGSUFFIX','')
	for prog in pymains:
		env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
	bldutil.install_py_modules(env,Split(pymods),pkgdir)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
	user = os.path.basename(os.getcwd())
	main = 'sf%s.py' % user
	
	docs += map(lambda prog: env.Doc(prog,'M' + prog),mains)  + \
		map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
	env.Depends(docs,'#/framework/rsf/doc.py')	
	doc = env.RSF_Docmerge(main,docs)
	env.Install(pkgdir,doc)
