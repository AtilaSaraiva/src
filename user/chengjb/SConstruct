import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
vti2desep vti2delrseparation
vti2dpseudop vti2dpseudop1 vti2dpseudopfvs0 vti2dpseudohomops

tti2desep tti2delrseparation
tti2dpseudop tti2dpseudop1 tti2dpseudop2

datasucjb2rsf2d

twolayer2dti kine2dvti
twolayer3dti

vti3de vti3dehomo

tti3de tti3dehomo

ort3dhomodevcTemp

datasucjb2rsf3d datasucjb2rsf3dnh su2rsf3dladcig
homo3dtti

wavefrontamp wavefrontamp360 wavefrontampTransmit wavefrontampReflect
'''

#ort3dpseudop
#ort3dhomodevX ort3dhomodevcX
#ort3dhomodevK ort3dhomodevcK

ccprogs = '''
vti2delrsep vti2delrsep2ps vti2delrseparators
vti2dpseudoplrsep vti2dpseudoplrsep1

vti2delrsepTrueAmp tti2delrsep2pTrueAmp

vti2dpseudosvlrsep 

vti2dpseudoplrseprtm

tti2delrsep tti2delrsep1p tti2delrsep2p tti2delrsep2ps tti2delrseparators
tti2dedivcurl

tti2delrdecomp tti2delrdecomp1p tti2delrdecomp2p

tti2dpseudoplrsep

tti2dpseudosvlrsep

vti3delrsep
vti3delrsephomo
vti3delrsephomoP
vti3dedivcurl

tti3delrsep
tti3delrsephomo

vti3delrdecompP
'''
#tti3delrdecomp

#isoonewaypsdmlr

pyprogs ='''
'''
 
pymods = '''
'''

tprogs = '''
fftw
'''

subs = '''
'''
#lowrankcjb

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')  # include lexing's head and lib files
#    SConscript('../../api/c++/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

##############################################################################
# ADD FFTW3 LIB
##############################################################################
fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'],
                LIBS=[env.get('DYNLIB','')+fftw])


##############################################################################
# Compiling C programs 
##############################################################################
src = Glob('[a-z]*.c')
objs = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
    objs.append(obj)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program (prog, map (lambda x: x + '.c',sources))
    if root:
        env.Install (bindir, prog)

##############################################################################
# Compiling C++ programs 
##############################################################################

dynpre = env.get('DYNLIB','') 
libs = [dynpre+'rsf']+env.get('LIBS',[])

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog] 
    if lapack:
        prog = env.Program(prog, map(lambda x: x + '.cc',sources)+objs, 
                           LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

##############################################################################
# Compiling C programs (Test)
##############################################################################
for prog in Split(tprogs):
        sources = ['T'+prog]
        bldutil.depends(env,sources,'T'+prog)
        env.StaticObject('T'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources),PROGPREFIX='T',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
