import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
vti2dpseudop vti2dpseudop1 vti2dpseudopfvs0
tti2dpseudop tti2dpseudop1
vti2delasticsep vti2delasticsepupdown
tti2delasticsep
kine2dvti
datasucjb2rsf2d datasucjb2rsf3d datasucjb2rsf3dnh
twolayer2dti threecolumn2dti
'''

ccprogs = '''
vti2delasticlrsep 
'''

pyprogs ='''
'''
 
pymods = '''
'''

tprogs = '''
fftw
'''

subs = '''
'''
#lowrankcjb

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')  # include lexing's head and lib files
#    SConscript('../../api/c++/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf','lapack','vecmatop'])

##############################################################################
# ADD FFTW3 LIB
##############################################################################
fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'],
#                LIBS=[env.get('DYNLIB','')+'fftw3f'])
                LIBS=[env.get('DYNLIB','')+fftw])


##############################################################################
# Compiling C programs 
##############################################################################
src = Glob('[a-z]*.c')
objs = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
    objs.append(obj)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program (prog, map (lambda x: x + '.c',sources))
    if root:
        env.Install (bindir, prog)

##############################################################################
# Compiling C++ programs 
##############################################################################

libcpp=[env.get('DYNLIB','')+'rsf++','rsf','lapack','vecmatop','fftw3f']

#subs    = Split(subs)
#if 'c++' in env.get('API',[]):
#        obj = map(lambda x:  env.StaticObject(x+'.cc'), subs)
#        objs.append(obj)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog] 
    prog = env.Program(prog, map(lambda x: x + '.cc',sources)+objs, LIBS=libcpp)

    if root:
        env.Install(bindir,prog)

##############################################################################
# Compiling C programs (Test)
##############################################################################
for prog in Split(tprogs):
        sources = ['T'+prog]
        bldutil.depends(env,sources,'T'+prog)
        env.StaticObject('T'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources),PROGPREFIX='T',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
