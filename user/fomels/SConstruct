import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
abalance angle angle2 approx bandpass blindpick blindpick2 dealias2
deblur deriv dijkstra dip dip2 dips dix dwt envcorr envelope explanesignoi
expsignoi flat flat3 focus green iphase lapfill miss2 miss3 monof
monof2 nsmooth nsmooth1 ocparcel octentwt ofilp ofpwd ofpwd2 patch
pick pick0 planemis2 planemis3 planesignoi predict pwd pwdix pwdsigk
pwdsmooth2 seislet shapebin shapebin1 shapesigk shearer tomo tree trismooth2
twodip2 twofreq2 velcon warp1 warpadd warpscan ztrace
'''

try:  # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../filt/lib'],LIBS=['rsf'])
    SConscript('../../filt/lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

for prog in Split(
    '''
    gauss2 gaussshape2 matmult ntriangle1 predict predict2 pwdsl triangle2
    trianglen trisl 
    '''):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sffomels.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))
#####################################################################

env['SCANNERS'].remove(configure.Include)
