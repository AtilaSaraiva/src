import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
abalance agmig analytical angle angle2 approx bdix beamform blur cflow
chebvc cpef dealias deblur dijkstra dip diplet dips distance divn dix
dixshape eikonal eikonalvti envelope erf exgr explanesignoi expsignoi
flat focus freqest gaussmooth green interpt iphase kron locov lpf
mandelbrot matmult mig3 miss3 nsmooth nsmooth1 ocparcel octentwt ofilp
ofpwd ofpwd2 patch pick pick0 pick2 plane planemis2 planemis3
planereg2 planereg3 planesignoi pmshape2 predict pwd pwcoh pwdix
pwpaint pwpaint3 pwdsigk pwdsmooth2 pwspray pwspray3 rsin seislet
seisigk shape shapesigk shearer similarity smoothreg timecont
timeshift tomo trismooth2 tristack twodip2 twofreq2 velcon warp1
warpadd warpscan
'''

pyprogs = 'rcat'
pymods = 'dottest conjgrad'

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    jpeg_o = env.StaticObject('_jpeg.c')

for conv in ('byte2jpg','jpg2byte'):
    if jpeg:
        libs=env.get('LIBS')+[jpeg]
        prog = env.Program('sf'+conv,['_%s.c' % conv,jpeg_o],LIBS=libs)
    else:
        prog = env.Place('sf'+conv,None,var='JPEG',package='libjpeg-devel')
    if root:
        env.Install(bindir,prog)

for prog in Split(
    '''    
    burg cburg gauss2 gaussel grid1 matmult ntriangle1 predict
    predict2 pwdsl trianglen trisl
    '''):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation but rename
    pymains = Split(pyprogs)
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')
    for mod in Split(pymods):
        env.Install(libdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
        map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsfdoc.py')	

    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)


