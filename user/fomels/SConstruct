import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
abalance analytical angle angle2 approx bdix beamform blur cameron
cflow chebvc constperm cosftwave1 cpef dealias deblur dijkstra dip
dip2 diplet dips distance divn dix dixshape eikonal eikonalvti erf
exgr explanesignoi expsignoi fft2 fftwave1 fftwave2 focus fpow freqest
gaussmooth gbeamform imray interpt iphase kron l1 locov lpf lsfit
mffit mig3 miss3 nconv nsmooth nsmooth1 ocparcel octentwt ofilp ofpwd
ofpwd2 ofsemb patch phaserot pick pick3 plane planemis2 planemis3
planereg2 planereg3 planesignoi pmig pmshape2 predict pwd pwcoh pwdix
pwdsigk pwdsmooth2 pwpaint pwpaint2 pwpaint3 pwspray pwspray3 rdiv
reshape riesz rsin seislet seisigk shape shapesigk shearer similarity
simenv smoothreg taupfit thin timecont timefreq timeshift tomo
trismooth2 tristack twodip2 twofreq2 velcon vofzperm warp1 warpadd
warpscan
'''

pyprogs = 'fft rcat results zoom'
pymods = 'dottest conjgrad'

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    jpeg_o = env.StaticObject('_jpeg.c')
    env.Depends(jpeg_o,'_jpeg.h')

for conv in ('byte2jpg','jpg2byte'):
    if jpeg:
        libs=env.get('LIBS')+[jpeg]
        prog = env.Program('sf'+conv,['_%s.c' % conv,jpeg_o],LIBS=libs)
    else:
        prog = env.RSF_Place('sf'+conv,None,var='JPEG',package='libjpeg-devel')
    if root:
        env.Install(bindir,prog)

tiff = env.get('TIFF')

for conv in ('byte2tif','tif2byte'):
    if tiff:
        libs=env.get('LIBS')+[tiff]
        prog = env.Program('sf'+conv,'_%s.c' % conv,LIBS=libs)
    else:
        prog = env.RSF_Place('sf'+conv,None,var='TIFF',package='libtiff-devel')
    if root:
        env.Install(bindir,prog)

for prog in Split(
    '''
    burg cburg gauss2 gaussel matmult matmult2 ntriangle1
    predict predict2 pwdsl trisl
    '''):
    sources = ['Test' + prog,prog]
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
    for mod in Split(pymods):
        env.Install(pkgdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
        map(lambda prog: env.Doc(prog,'_' + prog),['byte2jpg','jpg2byte']) + \
        map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
