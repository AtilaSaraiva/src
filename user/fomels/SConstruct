import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
abalance analytical angle angle2 approx bdix beamform blur cameron
cflow chebvc cpef curv dealias deblur dijkstra dip dip2 diplet dips
distance divn dix dixshape eikonal eikonalvti erf exgr explanesignoi
expsignoi focus fpow freqest gaussmooth gbeamform interpt iphase kron
l1 lineiko locov lpf lsfit mffit mig3 miss3 nconv nsmooth nsmooth1
ocparcel octentwt ofilp ofpwd ofpwd2 ofsemb patch phaserot pick pick3
plane planemis2 planemis3 planereg2 planereg3 planesignoi pmig
pmshape2 predict pwd pwcoh pwdix pwdsigk pwdsmooth2 pwpaint pwpaint3
pwspray pwspray3 rdiv reshape riesz rsin seislet seisigk shape
shapesigk shearer similarity simenv smoothreg thin timecont timefreq
timeshift tomo trismooth2 tristack twodip2 twofreq2 velcon warp1
warpadd warpscan
'''

pyprogs = 'rcat'
pymods = 'dottest conjgrad'

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    jpeg_o = env.StaticObject('_jpeg.c')

for conv in ('byte2jpg','jpg2byte'):
    if jpeg:
        libs=env.get('LIBS')+[jpeg]
        prog = env.Program('sf'+conv,['_%s.c' % conv,jpeg_o],LIBS=libs)
    else:
        prog = env.Place('sf'+conv,None,var='JPEG',package='libjpeg-devel')
    if root:
        env.Install(bindir,prog)

tiff = env.get('TIFF')

for conv in ('byte2tif','tif2byte'):
    if tiff:
        libs=env.get('LIBS')+[tiff]
        prog = env.Program('sf'+conv,'_%s.c' % conv,LIBS=libs)
    else:
        prog = env.Place('sf'+conv,None,var='TIFF',package='libtiff-devel')
    if root:
        env.Install(bindir,prog)

for prog in Split(
    '''
    burg cburg gauss2 gaussel grid1 matmult matmult2 ntriangle1
    predict predict2 pwdsl trianglen trisl
    '''):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation but rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
    for mod in Split(pymods):
        env.Install(libdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
        map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsfdoc.py')	

    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)


