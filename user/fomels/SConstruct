import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
abalance agmig angle angle2 approx bandpass cflow chebvc dealias
deblur deriv dijkstra dip diplet dips divn dix dixshape dwt envelope
equal erf exgr explanesignoi expsignoi fern flat flat3 focus freqest
freqlet gaussmooth green heat iphase kron lapfill lpf mandelbrot
matmult max1 mig3 miss2 miss3 monof monof2 nsmooth nsmooth1 ocparcel
octentwt ofilp ofpwd ofpwd2 patch pick pick0 pick2 planemis2 planemis3
planereg2 planereg3 planesignoi pmshape2 pradon predict pwd pwdix
pwpick pwdsigk pwdsmooth2 seislet seisigk shapebin shapebin1 shapesigk
shearer similarity threshold timeshift tomo tree trismooth2 twodip2
twofreq2 velcon warp1 warpadd warpscan ztrace
'''

try:  # distributed version
    Import('env')
    env = env.Copy()
    
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    SConscript('../../filt/lib/SConstruct')
    src = glob.glob('[a-z]*.c')
    env.Append(BUILDERS={'Include':configure.Header,'Place':configure.Place},
               SCANNERS=[configure.Include])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../filt/lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    libs=env.get('LIBS')+[jpeg]
    prog = env.Program('sfbyte2jpg',['_byte2jpg.c','_jpeg.c'],LIBS=libs)
else:
    prog = env.Place('sfbyte2jpg',None,var='JPEG',package='libjpeg-devel')
if root:
    env.Install(bindir,prog)

for prog in Split(
    '''
    gauss2 gaussshape2 matmult ntriangle1 predict predict2 pwdsl triangle2
    trianglen trisl 
    '''):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
#####################################################################

