import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
abalance analytical angle angle2 approx arrival bdix beamform bil1
blur cameron cfftwave1 cdivn cflow chebvc clpf cltft constperm
cosftwave1 cpef dealias dealias2 deblur dijkstra dip dip2 diplet dips
distance divn dix dixshape dpeiko eikonal eikonalvti eno2 erf exgr
explanesignoi expsignoi fft2 fftexp0 fftexp1 fftexp3 fftone ffttest
fftwave1 fftwave2 fftwave3 focus fpow freqest gaussmooth gbeamform
imray interp2 interpt iphase kron locov lpf lsfit mdip median mffit
mig3 miss3 nconv nsmooth nsmooth1 ocparcel octentwt odip2 ofilp ofpwd
ofpwd2 ofsemb opwd2 patch phaserot pick pick3 plane planemis2
planemis3 planereg2 planereg3 planesignoi pmshape2 predict pwd pwcoh
pwdix pwdsigk pwdsmooth2 pwpaint pwpaint2 pwpaint3 pwspray pwspray2
pwspray3 regr rdiv reshape riesz rsin seislet seisigk semblance shape
shapeagc shapesigk shearer shift1 similarity simenv smoothderw
smoothreg taupfit thin timecont timefreq timeshift tomo tree trace2
trismooth2 tristack tristack2 twodip2 twofreq2 velcon velinv vidattr
vofzperm warp1 warpadd warpscan zero zmarch ztrace
'''

ccprogs = 'anisolr2 isolr2 isolr3 permlr1 permlr2 permlr3'

pyprogs = 'cgi fft results zoom'
pymods = 'conjdir conjgrad dottest steepd'

libsrc = 'apfilt dijkstra mask6 predict predk pwd pwdsl repeat2 seislet'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

libs = [env.get('DYNLIB','')+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    libs.insert(0,fftw)

dynlib = ('-static-intel' not in env.get('LINKFLAGS',''))

objects = []
dobjects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

    if os.path.splitext(str(source))[0] in libsrc:
        objects.append(obj)
        includes.append(inc)

        if dynlib:
            obj = env.SharedObject(source)
            env.Depends(obj,inc)
            dobjects.append(obj)
        
##############################################################################
# PLANE-WAVE-DESTRUCTION LIBRARY
##############################################################################
lib = env.StaticLibrary('rsfpwd',objects)
inc = env.Command('rsfpwd.h',includes,Action(bldutil.__merge))

env.Install('../../lib',lib)
env.Install('../../include',inc)

if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)

if dynlib:
    dlib = env.SharedLibrary('rsfpwd',dobjects,SHLIBPREFIX='libd',LIBS=dlibs)
    if root:
        env.Install(libdir,dlib)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,map(lambda x: x + '.o',sources),LIBS=libs)
    if root:
        env.Install(bindir,prog)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']+lapack+libs

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources),LIBS=libsxx)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

jpeg = env.get('JPEG')
if jpeg:
    jpeg_o = env.StaticObject('_jpeg.c')
    env.Depends(jpeg_o,'_jpeg.h')

for conv in ('byte2jpg','jpg2byte'):
    if jpeg:
        prog = env.Program('sf'+conv,['_%s.c' % conv,jpeg_o],LIBS=libs+[jpeg])
    else:
        prog = env.RSF_Place('sf'+conv,None,var='JPEG',
                             package='libjpeg-devel')
    if root:
        env.Install(bindir,prog)

tiff = env.get('TIFF')

for conv in ('byte2tif','tif2byte'):
    if tiff:
        prog = env.Program('sf'+conv,'_%s.c' % conv,LIBS=libs+[tiff])
    else:
        prog = env.RSF_Place('sf'+conv,None,var='TIFF',package='libtiff-devel')
    if root:
        env.Install(bindir,prog)

for prog in Split(
    '''
    agrid allp3 burg cburg gauss2 gaussel grid1 matmult matmult2
    ntriangle1 predict predict2 pwdsl trisl
    '''):
    sources = ['Test' + prog,prog]
    if prog=='matmult2':
        sources.append('gmres')
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x',LIBS=libs)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
    for mod in Split(pymods):
        env.Install(pkgdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) + \
           map(lambda prog: env.Doc(prog,'_' + prog),['byte2jpg','jpg2byte']) + \
           map(lambda prog: env.Doc(prog,'_' + prog),['byte2tif','tif2byte']) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
