import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
off2abs off2abs3
icor xcor2d tcor ucor laps2d
ic sic sic3d lstk
paradd
wigner wdf
srmig3 srmod3 zomig3 camig3 
stack3
hwt3d int3d rrt3d
shift fft3d
randcut
encode shot2grid
boxfilter
awefd lwefd
awefd2d awefd3d ewefd2d ewefd3d
anifd2d
wex
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
