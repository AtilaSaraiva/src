import os, sys, re, string, glob
sys.path.append('../..')
import bldutil, configure

progs = '''
wave1 wave4 wave124 sbd waveab integral rfilter wave2dss wave2domp wavefft waveffte wavefftb
wavefft1 pspi pspig pspi2 pspi2c pspif pspifb1 ffd1 ffdb1  ffdv0b1
                                 fdb1 fd2bs 
                                 pspif2 pspifs2 pspifcos2 pspifscos2 pspifcos2b pspifcos2bs 
                                 ffdcos2 ffdcos2b ffdcos2bc ffdcos2bs ffd2b
                                 ffdan2b ffdan4b ffdantti4b ffdanttic
                                 ffdantti4b_smsr ffd2b_smsr
                                 ffdantti4b_rvr  ffd2b_rvr
trycos lmm laplace
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)


