import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
wave1 wave4 wave124 sbd waveab wave2dss wavefft wavefftb
wavefft1 pspi pspig pspi2 pspi2c pspif pspifb1 ffd1 ffdb1
                                 fdb1 fd2bs
                                 pspif2 pspifs2 pspifcos2 pspifscos2 pspifcos2b pspifcos2bs
                                 ffdcos2 ffdcos2b ffd2b ffdcos2bs
                                 ffdan2b ffdan4b ffdantti4b
                                 ffdantti4b_smsr ffd2_ps
                                 ffdantti4b_rvr  ffd2b_rvr
laplace laplace2
ffd2dehf sp pspifcos2bs_dehf
ofd1 fd1 ofd1_5 fd1_5 ofd2_5 ofd2_7 ofd2_13 ofd2_10 fd2_10 ofd2_20 ofd2_12
ffdtti4
ofd2_25 lfd2_25 lfd2_25b
lffd1_10 lffd2_10 lffd2_4 lffd2_4_c lffd2_an_25
constpermffd constpermkz
vzpermffd vz1
vzpermffd3 permffd3
permf
nxtfftn
'''

mpi_progs = 'tti4rtm'

#constpermffd constpermkz
#vzpermffd vz1
#vzpermffd3 permffd3
#permf

#lfdc1_10
try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

mpicc = env.get('MPICC')

mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
    	prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
    else:
	prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains+mpi_mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

