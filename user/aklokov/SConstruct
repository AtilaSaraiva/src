import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
crssemb diptaper
'''

mpi_progs = ''

ccprogs = 'tmigda'

subs = '''
support sembler
tmigratorBase tmigrator2D tmigrator3D 
curveDefinerBase curveDefinerDipOffset curveDefinerDipOffset3D
'''


try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    env.Prepend(LIBS=[env.get('DYNLIB','')+'rsf++']+lapack)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    prog = env.Program (prog, map (lambda x: x + '.c',sources))
    if root:
        env.Install (bindir, prog)

ccmains = Split(ccprogs)

for prog in ccmains:
    sources = ['M' + prog]+Split(subs)
    if lapack:
        prog = env.Program (prog, map (lambda x: x + '.cc', sources),CCFLAGS='')
    else:
        prog = env.RSF_Place ('sf' + prog, None, var='LAPACK', package='lapack')
    env.Depends(prog,map (lambda x: x + '.hh', Split(subs)))
    if root:
        env.Install(bindir,prog)
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) + \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog),ccmains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
