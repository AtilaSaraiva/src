import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil


try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

#mains = prog
#for prog in mains:
#    sources = []
#    bldutil.depends(env,sources,'M'+prog)
#    prog = env.Program(prog,map(lambda x: x + '.c',sources))
#    if root:
#        env.Install(bindir,prog)

mains = Split('tti4_omp_mpi') 
mpicc = env.get('MPICC')
if mpicc:
    prog = 'tti4_omp_mpi'
    prog = env.Program(prog,'Mtti4_omp_mpi.c',CC=mpicc)
else:
    prog = env.RSF_Place('sftti4_omp_mpi',None,var='MPI')
if root:
   env.Install(bindir,prog[0])
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)


