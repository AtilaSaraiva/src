import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
rwe2d
'''

try:  # distributed version
    Import('env')
    env = env.Clone()
    
    root = env.get('RSFROOT')    
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    dir = string.replace(os.getcwd(),'/build','')
except: # local version
    root = None
    env = configure.Debug()
    SConscript('../../api/f90/SConstruct')

F90 = env.get('F90')
api = env.get('API',[])
 
env.Prepend(F90PATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsff90','rsf'])

mains = Split(progs)

if 'f90' in api and F90:

    F90base =  os.path.basename(F90)

    if F90base[:8] == 'gfortran' or F90base[:3] == 'gfc':
        env.Append(F90FLAGS=' -J${SOURCE.dir}')
    elif F90base == 'ifort':
        env.Append(F90FLAGS=' -module ${SOURCE.dir}')

    for prog in mains:
        sources = ['M' + prog]
        configure.depends90(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.f90',sources),
                           LINK=F90)
        if root:
            env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M'+prog+'.f90',lang='f90'),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)
#####################################################################
