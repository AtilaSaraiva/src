import os, sys, re, string, glob
srcroot = os.environ.get('RSFSRC', '../..')
sys.path.append(srcroot)
import bldutil

# C mains
progs = '''
minmax listminmax clip2 sizes
'''

# Python mains that do not need SWIG+numpy
py_meta = '''
figlist booklist testlist
'''

# Python modules that do not need SWIG+numpy
pylibs_meta = '''
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation but rename

    # Python main programs
    py_mains_meta = Split(py_meta)
    for prog in  Split(py_meta):
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')
        
    # User modules
    rsfuser = os.path.join(libdir,'rsfuser')
    for module in Split(pylibs_meta):
        env.Install(rsfuser,module+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    docs = map(lambda prog: env.Doc(prog,'M'+prog),mains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),
               py_mains_meta)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)
