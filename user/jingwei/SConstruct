import os, sys, string
sys.path.append('../../framework')
import bldutil

# C++ programs
progs = '''
radon2 radon32 radon34 diradon2 diiradon2 adiradon2 diradon32 sum
'''

# C++ programs calling subC programs
sprogs = '''

'''

# subC++ programs
subs = '''
bfio bfio_eval2 bfio_eval3 bfio_apeval2 bfio_eval34 rankoneapprox
'''

# C programs
cprogs = '''
inmo3_ort
'''

try:  # distributed version
    Import('env root bindir pkgdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

ccinc = Glob('[a-z]*.h*')

src = Glob('[a-z]*.c')
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)
    

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    env.Prepend(LIBS=['vecmatop',
                      env.get('DYNLIB','')+'rsf++'])
    if not isinstance(lapack,bool):
        env.Append(LIBS=lapack)

    ccfiles = map(lambda x: x+'.cc',Split(subs))

    lib = env.StaticLibrary('bfio',ccfiles,CCFLAGS='')
    env.Install('../../lib',lib)
    env.Install('../../include',ccinc)

mains = Split(progs)
for prog in mains:
    if lapack:
        prog = env.Program(prog,['M'+prog+'.cc']+[lib])
        env.Depends(prog,ccinc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)
        env.Install(incdir,'bfio.bin')

smains = Split(sprogs)
for sprog in smains:
    if lapack:
        sprog = env.Program(sprog,['M'+sprog+'.cc']+env.Object("cfft2nsps.c")+[lib])
        env.Depends(sprog,ccinc)
    else:
        sprog = env.RSF_Place('sf'+sprog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,sprog)

if root:
    env.Install(incdir,'bfio.bin')


cmains = Split(cprogs)
for prog in cmains:
    sources = ['M' + prog]
    bldutil.depends (env, sources, 'M'+prog)
    prog = env.Program (prog, map (lambda x: x + '.c',sources))
    if root:
        env.Install (bindir, prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),cmains) + \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog, lang='c++'),mains) + \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog, lang='c++'),smains)
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
