import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
absoffdip aliasp avo boxsmooth cascade cmatmult enoint2 grad2 grad3
imospray impl1 impl3 linsincos lpad map2list migsteep3 modrefl ofsemb
pmig pp2psang pveltran radial randrefl reshape ricker shotholes spicks
splinefilter stolt2 swtdenoise
'''

try: # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
 
mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

for prog in Split('cmatmult'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)
