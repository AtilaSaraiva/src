import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
absoffdip ai2refl aliasp avo bin1 boxsmooth cascade canny causint
cmatmult costaper cmp2shot dipfilter enoint2 freqint freqlet grad2
grad3 histogram imospray impl1 impl2 impl3 infill intshow inttest1
inttest2 linsincos lpad map2list migsteep3 modrefl modrefl2 ofsemb
pmig postfilter2 pp2psang pp2psang2 pveltran radial radon randrefl
reshape ricker shot2cmp shotholes shotprop sin smoothder spicks
splinefilter stolt2 swtdenoise tpow
'''

try: # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
 
mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])

for prog in Split('cbanded cmatmult'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)
