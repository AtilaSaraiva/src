import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
afac autocorr burstnoise conflict conv cube decon deburst despike
despike2 despike3 factorn factorm frame frog hconv heat3 helicon hmiss
hole hshape idempatch imospray invbin invbin1 invrec1 kolmog levint
light lint1 lopef losignoi lpef make maskinv misif miss miss1 msmiss
mspef nhelicon npef parcel pef pefdeburst pfactor2 tspline qdome
randline sigmoid signoi splinebank splineplane synmarine syntop tentwt
velcon3 wavemovie wilson
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)


