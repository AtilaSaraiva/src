import os, sys, re, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
edgetaper ctscigadj ctscigder ctshift fftfwi_sparse_2d
firstpick pad2 padzero postrtm2d sgfdewe2d
upsamp1
'''

ccprogs = ''

mpi_progs = '''
mpifdlsrtm mpilrrtm mpilrmodel mpilrrtm_ts mpiprertm2d
mpisglrrtm2
'''

pyprogs = 'fdlsrtm lrrtm'

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

sparsepath = env.get('SPARSEPATH')
sparselibs = env.get('SPARSELIBS')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsfpwd',
				  env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])
    if not isinstance(fftw,bool):
        env.Append(LIBS=['fftw3_threads','fftw3'])

if sparsepath and sparselibs:
    env.Prepend(CPPPATH=sparsepath,
                LIBS=sparselibs)

if not sparsepath or not sparselibs:
    for filec in Split('''
        fdprep fdprep25 fdprep5 fdprep9 fdprep9o fwisparse2d sparsesolver
        '''):
        src.remove(File(filec+'.c'))

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
#    prog = env.Program(prog,map(lambda x: x + '.c',sources))
	
    if sparsepath and sparselibs:
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='SPARSELIBS',
                             package='suitesparse')

    if root:
        env.Install(bindir,prog)

mpicc = env.get('MPICC')

mpi_mains = Split(mpi_progs)
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
    	prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
    else:
	prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)
        
        
######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains+mpi_mains) + \
	       map(lambda prog: env.Doc(prog,'M%s.cc' %prog,lang='c++'),ccmains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
