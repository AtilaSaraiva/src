import os, sys, re, string, glob
rsfsrc=os.getenv('RSFSRC') 
sys.path.append(os.path.join(rsfsrc,'framework'))
import bldutil

progs = '''
zerocross
'''

#pyprogs = 'fft rcat results zoom'
#pymods = 'dottest conjgrad'

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript(os.path.join(rsfsrc,'api/c/SConstruct'))
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=[os.path.join(rsfsrc,'include')],
            LIBPATH=[os.path.join(rsfsrc,'lib')],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

