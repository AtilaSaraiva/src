import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
bspvel2 bspvel3
cram2 cram3
escbsc3 escfgrid2 escnband2 escrt2 escrt3 esctbl2
pcrdata2 pcrdata3 pcrsurv3
rpslow2
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
# OpenMP disables certain optimizations, so disable it (nothing uses it here, anyway)
    cflags = env.get('CFLAGS','')
    if isinstance (cflags, str):
        env['CFLAGS'] = cflags.replace('-openmp','').replace('-D_OPENMP','')
    lflags = env.get('LINKFLAGS','')
    if isinstance (lflags, str):
        env['LINKFLAGS'] = lflags.replace('-openmp','').replace('-fopenmp','')
except: # local version
    env = bldutil.Debug()
    cflags = env.get('CFLAGS','')
    if isinstance (cflags, str):
        env['CFLAGS'] = cflags.replace('-O3','-g').replace('-openmp','').replace('-fopenmp','').replace('-D_OPENMP','')
    lflags = env.get('LINKFLAGS','')
    if isinstance (lflags, str):
        env['LINKFLAGS'] = lflags.replace('-openmp','').replace('-fopenmp','')
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

sse = None
#sse = env.get('SSE')
if string.rfind(env.get('CC'),'icc') >= 0:
    env.Append(CCFLAGS=['-restrict','-wd188'])

if sse:
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=[env.get('DYNLIB','')+'rsf'],
                CCFLAGS=[sse],CPPDEFINES=['HAVE_SSE'])
else:
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    if source.rstr() == 'einspline.c':
        einspl_o = env.StaticObject('einspline.c')
        env.Depends(einspl_o,'einspline.h')
    else:
        inc = env.RSF_Include(source,prefix='')
        obj = env.StaticObject(source)
        env.Depends(obj,inc)

# Regular progams
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
