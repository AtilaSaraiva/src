import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''permwave2d'''
ccprogs = 'permlr2ddti'
#cudaprogs = 'awefd3dgpu'

pyprogs = ''
pymods = ''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

dynpre = env.get('DYNLIB','') 
#extralibs = ['fftw3f','satlas']
#libs = [dynpre+'rsf']+env.get('LIBS',[])+extralibs
libs = [dynpre+'rsf']+env.get('LIBS',[])
dlibs = ['drsf']+env.get('LIBS',[])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

objects = []
dobjects = []
includes = []
for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
        
mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    env.StaticObject('M'+prog+'.c')
    prog = env.Program(prog,map(lambda x: x + '.o',sources),LIBS=libs)
    if root:
        install = env.Install(bindir,prog)

        if dynpre and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                'install_name_tool -change '
                'build/api/c/libdrsf.dylib '
                '%s/libdrsf.dylib %s' % (libdir,install[0]))

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [dynpre+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    libsxx.extend(libs)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources),LIBS=libsxx)
        if root:
            install = env.Install(bindir,prog)
            
            if dynpre and env['PLATFORM'] == 'darwin':
                env.AddPostAction(install,
                'install_name_tool -change '
                'build/api/c/libdrsf.dylib '
                '%s/libdrsf.dylib %s' % (libdir,install[0]))
                env.AddPostAction(install,
                'install_name_tool -change '
                'build/api/c++/libdrsf++.dylib '
                '%s/libdrsf++.dylib %s' % (libdir,install[0]))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
        if root:
            env.Install(bindir,prog)

NVCC = env.get('NVCC')
cudamains = Split(cudaprogs)
for prog in cudamains:
    sources = env.Command(prog+'.c','M'+prog+'.cu','cp $SOURCE $TARGET')
    if NVCC:
        cc = env.get('CC')
        cflags = '-gencode arch=compute_10,code=sm_20 --x=cu'
        ldflags = '' 
        if string.rfind(cc,'icc') >= 0: 
            cflags = cflags + ' -ccbin=%s' % cc 
            ldflags = '-ccbin=%s' % cc 
        prog = env.Program(sources,CC=NVCC,CFLAGS=cflags,LINKFLAGS=ldflags,LIBS=libs)
    else:
        prog = env.RSF_Place('sf'+prog,None,message='''
                            Please ensure CUDA is installed correctly.
                            Rerun Madagascar installation after it has been fixed.
                            ''')

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation, just rename
    pymains = Split(pyprogs)
    exe = env.get('PROGSUFFIX','')
    for prog in pymains:
        env.InstallAs(os.path.join(bindir,'sf'+prog+exe),'M'+prog+'.py')
    for mod in Split(pymods):
        env.Install(pkgdir,mod+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),pymains)
    env.Depends(docs,'#/framework/rsf/doc.py')	

    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
