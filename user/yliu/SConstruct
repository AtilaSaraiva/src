import os, sys, re, string, glob
sys.path.append('../..')
import bldutil, configure

progs = '''
apef atm1 atm2 bilstack difference doeps domf dominantf donf dowmf
duwt dwt97 epsf fkoclet fkoclet3 fourmis2 freqreg freshape initial
kuwahara locorr lpfdenoise1 lpfdenoise2 lrmf lum lum2 lumsmoother
lumsharpener mean mf miss4 mlm mtm mlwm multiple nmult nonloc oclet
pwcsemb pwd2 pwsfault pwsfault3 pwsmooth pwsmooth3 saltpepper sclet
seisavf seishrink seislet97 seismis2 seispocs seisreg2 sharpsimi snr
st svddenoise swell ltft threshold2 tvmf twofreq2mask vconvert
wavemis2 wmf zcwt
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)


