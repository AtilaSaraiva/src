import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
apef apef2 apefsignoi atm1 atm2 bilstack c1coh difference doeps domf
dominantf donf dowmf duwt dwt97 epsf fagrad fkoclet fkoclet3 fourbreg2
fourmis2 freqreg freshape geoconvert groll initial instattr kuwahara
lorenz locorr lpad2 lpfdenoise1 lpfdenoise2 lrmf ltft lum lum2
lumsmoother lumsharpener matchoper mean mf mig2 miss4 miss43 mlm mtm
mlwm multiple nmradon nmult nonloc oclet pwcsemb pwd2 pwsfault
pwsfault3 pwsmooth pwsmooth3 radonoper rtft saltpepper sclet seisavf
seishrink seislet97 seismis2 seispocs seisreg2 sharpsimi snr sphase st
stft svddenoise swell testapef testcasoper testmatch threshold2 tvmf
variogram variogram2 vconvert wavemis2 wmf zcwt
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

