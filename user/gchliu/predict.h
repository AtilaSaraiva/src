/* This file is automatically generated. DO NOT EDIT! */

#ifndef _predict_h
#define _predict_h


#include <rsf.h>


void predict_init (int nx, int ny /* data size */, 
		   float e        /* regularization parameter */,
		   int k          /* radius */);
/*< initialize >*/


void predict_close (void);
/*< free allocated storage >*/


void predict_step(bool adj     /* adjoint flag */,
		  bool forw    /* forward or backward */, 
		  float* trace /* trace */, 
		  float* pp    /* slope */);
/*< prediction step >*/


void predict_set(float **dip1 /* dip field [n2][n1] */);
/*< set the local slopes for applying the linear operator >*/


void predict_lop(bool adj, bool add, int nx, int ny, float *xx, float *yy);
/*< linear operator >*/


void predicter_lop(bool adj, bool add, int nx, int ny, float *xx, float *yy);
/*< linear operator >*/


void subtracter_lop(bool adj, bool add, int nx, int ny, float *xx, float *yy);
/*< linear operator >*/


void subtract_lop(bool adj, bool add, int nx, int ny, float *xx, float *yy);
/*< linear operator >*/


void predict_flat(int i0     /* reference trace number */, 
		  float** d  /* input */, 
		  float** mm /* output */, 
		  float** pp /* slope */);
/*< predictive flattening >*/

#endif
