import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = 'fftwave1dd cfftwave1dd cfftwave1in fftwave2p fftwave3p cfftwave2 cfftwave3 cfftexpmig2 fftexp0test fd2d cfftexp2 cfftexp2test fdtacc wcfftexp2 wcfftexp2adj cfftwave2nsps cfftwave2mix2 wavemixop lrosrtm2 lroslsrtm2 stack2d cstack2d fftexp0test lrlsrtm2mpi imagsrc zolsrtm2 initwave2 correctwave2 lrwave2 cmatrix cfftwave1d zortmgmres claplac psp pspmig premig cfftwave2omp lrtti2de clfd1 clfd2 ofd2_test swnorm pspp passive2d swvarimax ccrsym timerev2d lstri2d cubesrc cfftwave2taper fftwave2taper compensate compensatexf '
#revolve_driver

# pawave2 cpawave2 cpswave2
# cfftwave2dhalfft
# icfftwave2 cfftwave1dtest cfftwave2test
# cfftwave1dinit cfftwave2nspstest
# lriso2de lrelasiso
# cfftwave2tt lasthope cfftwave2one waveadjtest cfftwave2abc fftwave2abc
# pawave2 cpawave2 cpswave2 icfftwave2 cfftwave1dtest

libprop = 'fftwave2omp fftwave3omp eweks3d vweks3d xcor2 xcor3 xcor3d mutter3 ewelr3d ewedc3d ewdlr3d eweks3dsecd ewelr3dgrad ewedc3dgrad'

ccprogs = 'tilr2 ortholr3 cortholr3 cisolr2 cisolr2rev cisolr3 ctilr2 cisolr2grad cisolr2abc cisolr2abc1 cisolr1 canisolr2 canisolr2abc fraclr2 zfraclr2 fraclr2test tilrzone ortholrzone zortholr3 zanisolr2 zanisolr2abc clfdc1 clfdc2 clfdc1-bak zisolr2abc clfdc1frac'
# ewelr3 ewedc3p ewedc3s ewdlr3 ewelr3grad ewedc3pgrad ewedc3sgrad vwelr3

# abclr2 isolr2sta isolr2abc  cfraclr2
# eiktest eiktest2 cisolr1eik eiksol cfraclr2 rfraclr2 cisolr2twostep
# cisolr2hyb icisolr2

mpi_progs = 'mpilsrtm mpiewertm mpirtmop mpilsrtmgmres mpilsrtmcg mpircvrtm mpiqrtm mpipfwi'
# mpiwave2 mpiwave3 mpifftexp1 mpiwave2kiss mpiwave3kiss mpifftexp1kiss

pyprogs = 'fft'
pymods = ''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Ignore(inc,inc)
    env.Depends(obj,inc)

mpicc = env.get('MPICC')
mpi_src = Glob('Q[a-z]*.c')
for source in mpi_src:
    inc = env.RSF_Include(source,prefix='')
    env.Ignore(inc,inc)
    obj = env.StaticObject(source,CC=mpicc)
    env.Depends(obj,inc)

mains = Split(progs+' '+libprop)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

mpi_mains = Split(mpi_progs)
#env.Prepend(LIBS=['fftw3f_mpi'])
for prog in mpi_mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if mpicc:
        env.StaticObject('M'+prog+'.c',CC=mpicc)
        #prog = env.Program(prog,map(lambda x: x + '.o',sources),CC=mpicc,LIBS=env.get('LIBS')+['fftw3f_mpi'])
        prog = env.Program(prog,map(lambda x: x + '.o',sources),CC=mpicc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
    if root:
        env.Install(bindir,prog)


if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    libsxx = [env.get('DYNLIB','')+'rsf++','vecmatop']
    if not isinstance(lapack,bool):
        libsxx.extend(lapack)
    env.Prepend(LIBS=libsxx)

ccmains = Split(ccprogs)
for prog in ccmains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

for prog in Split('cmatmult2'):
    sources = ['Test' + prog,prog]
    if prog=='cmatmult2':
        sources.append('cgmres')
    bldutil.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')

######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains+mpi_mains) +  \
           map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),ccmains) 
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
