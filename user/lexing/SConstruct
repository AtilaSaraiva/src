import os, sys, string, glob
sys.path.append('../../framework')
import bldutil

progs = '''
lrmatrix
'''

subs = '''
vecmatop
'''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    inc = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.h*')))
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c++/SConstruct')
    inc = glob.glob('[a-z]*.h*')

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

if lapack:
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../../lib'],
                LIBS=[env.get('DYNLIB','')+'rsf++',
                      env.get('DYNLIB','')+'rsf']+lapack)
    env['CCFLAGS'] = env.get('CCFLAGS','').replace('-std=gnu99','')

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]+Split(subs)
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources))
        env.Depends(prog,inc)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),
               Split(progs))
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
