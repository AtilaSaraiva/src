import sys, os
sys.path.append('../../framework')
import bldutil

progs = '''
integral1 swapbyte 
'''

mpi_progs = '''
mpirtmiso
'''

place = ''

try:  # distributed version
    Import('env root pkgdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

src = Glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

mpicc = env.get('MPICC')
for source in src:
    inc = env.RSF_Include(source,prefix='')
    if str(source)[:3] != 'mpi':
        obj = env.StaticObject(source)
        env.Depends(obj,inc)

lapack = env.get('LAPACK')
if lapack:
    env.Prepend(LIBS=lapack)
    progs += ' pseudodepth'
elif root:
    place += ' pseudodepth'
    for prog in Split('pseudodepth'):
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')     
        env.Install(bindir,prog)

fftw = env.get('FFTW')
if fftw:
    env.Prepend(LIBS=[fftw])
    progs += ' zomiso zomvti'
elif root:
    place += ' zomiso zomvti'
    for prog in Split('zomiso zomvti'):
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw')
        env.Install(bindir,prog)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

mpicc = env.get('MPICC')
mpi_mains = Split(mpi_progs)
if mpicc and fftw:
    for prog in mpi_mains:
        sources = ['M' + prog]
        bldutil.depends(env,sources,'M'+prog)
    	prog = env.Program(prog,map(lambda x: x + '.c',sources),CC=mpicc)
        if root:
            env.Install(bindir,prog)
else:
    place += mpi_progs
    for prog in mpi_mains:
	prog = env.RSF_Place('sf'+prog,None,var='MPICC',package='mpi')
        if root:
            env.Install(bindir,prog)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),
               mains+mpi_mains+Split(place))
    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
