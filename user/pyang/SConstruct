import os, sys, re, string
sys.path.append('../../framework')
import bldutil

progs = '''
fpocs3dpthresh pocs3dpthresh
'''

ccprogs = '''
'''

try:  # distributed version
    Import('env root pkgdir bindir libdir incdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lexing/SConstruct')

src = Glob('[a-z]*.c')

dynpre = env.get('DYNLIB','') ##
 
libs = [dynpre+'rsf']+env.get('LIBS',[]) ##
dlibs = ['drsf']+env.get('LIBS',[])   ##

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=[env.get('DYNLIB','')+'rsf'])

fftw = env.get('FFTW')
if fftw:
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])

for source in src:
    inc = env.RSF_Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    bldutil.depends(env,sources,'M'+prog)
    if fftw:
        env.StaticObject('M'+prog+'.c')
        prog = env.Program(prog,map(lambda x: x + '.o',sources),
                           LIBS=libs)
    else:
        prog = env.RSF_Place('sf'+prog,None,var='FFTW',package='fftw-devel')

    if root:
        env.Install(bindir,prog)


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) 

    env.Depends(docs,'#/framework/rsf/doc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)

