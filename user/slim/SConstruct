import os, sys, re, string, glob, shutil
sys.path.append('../..')
import configure

progs = 'boolcmp thr sort'
cpp_progs = ''
py_progs = 'fdct killtraces jitter'
py_mods = 'hegilles'

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    src = glob.glob('[a-z]*.c')
    SConscript('../../api/c/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)


######################################################################
# PROGRAMS WHICH NEED SPECIFIC API
######################################################################
api = env.get('API',[])

######################################################################
# C++ PROGRAMS
######################################################################
if 'c++' in api:
    cpp_mains = Split(cpp_progs)
    
    for prog in cpp_mains:
        # compilation
        main = env.Program(prog + '.cc',
                           LIBS=['rsf++']+env.get('LIBS',[]))
        
        if root:
            env.Install(bindir,main[0])
else:
    cpp_mains = [] 

######################################################################
# PYTHON PROGRAMS
######################################################################
if root:
    user = os.path.basename(os.getcwd())
	
    # Python main programs
    py_mains = Split(py_progs)
    for prog in py_mains:
        # no compilation but rename
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')

    # Python modules    
    rsfuser = os.path.join(libdir,'rsfuser')
    for module in Split(py_mods):
        env.Install(rsfuser,module+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains) + \
           map(lambda prog: env.Doc(prog+'.cc'),cpp_mains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),
               py_mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)

