import os, sys, re, string, glob,shutil,sets
sys.path.append('../..')
import configure

progs = '''
thr sort
'''

cpp_progs = ''

py_progs = {'fdct':'numpy pyct',
	    'killtraces':'numpy'}

py_mods = {'hegilles':'numpy'}

try:  # distributed version
    Import('env')
    env = env.Copy()
    root = env.get('RSFROOT')

    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    src = glob.glob('[a-z]*.c')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])
    SConscript('../../filt/lib/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../filt/lib'],LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    mainc = env.Program(prog + '.c')
    if root:
        env.Install(bindir,mainc[0])


######################################################################
# PROGRAMS WHICH NEED SPECIFIC API
######################################################################
api = env.get('API',[])

######################################################################
# C++ PROGRAMS
######################################################################
if 'c++' in api:
    cpp_mains = Split(cpp_progs)
    
    for prog in cpp_mains:
        # compilation
        main = env.Program(prog + '.cc',
                           LIBS=['rsf++']+env.get('LIBS',[]))
        
        if root:
            env.Install(bindir,main[0])
else:
    cpp_mains = [] 

######################################################################
# PYTHON PROGRAMS
######################################################################
if 'python' in api:
    if root:
        user = os.path.basename(os.getcwd())
        pwd = os.path.join(os.getcwd(),'../../../user/',user)

	pymodules = set(env.get('PYMODULES',[]))
	
        # Python main programs
        py_mains = []
        for prog,depts in py_progs.iteritems():
	    depts = set(string.split(depts))
	    if set.intersection(pymodules,depts) == depts:
		py_mains.append(prog)
		# no compilation but rename
		env.InstallAs(os.path.join(bindir,'sf'+prog),os.path.join(pwd,'M'+prog+'.py'))

        # Python modules
        rsfuser = os.path.join(libdir,'rsfuser')
        rsfuser_module_flag = os.path.join(rsfuser, '__init__.py')
        for mod,depts in py_mods.iteritems():
	    depts = set(string.split(depts))
	    if set.intersection(pymodules,depts) == depts:
                if not os.path.isdir(rsfuser):
                    os.mkdir(rsfuser)
                if not os.path.isfile(rsfuser_module_flag):
                    try:
                        os.mknod(rsfuser_module_flag)
                    except: # Python < 2.3
                        open(rsfuser_module_flag, "w").close()
                    os.chmod(rsfuser_module_flag, 0666)
                for module in py_mods.keys():
                    module+='.py'
                    env.InstallAs(os.path.join(rsfuser,module),os.path.join(pwd,module))

else:
    py_mains = []

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog+'.c'),mains) + \
           map(lambda prog: env.Doc(prog+'.cc'),cpp_mains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),py_mains)
    env.Depends(docs,'#/python/rsfdoc.py')

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
#####################################################################

# $Id$
