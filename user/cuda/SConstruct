import os, sys, string
sys.path.append('../..')
import bldutil

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

env.Tool('CudaTool')

progs = '''
gpuktmig
'''

if env['CUDA_TOOLKIT_PATH']:

    env.Append(LIBS=['cuda','cudart'])
    env.Append(CPPPATH=['../../include'],
               NVCCINC=['-I'+os.getcwd(),'-I'+os.getcwd()+'/../../include'],
               NVCCFLAGS=[map(lambda x: '-D'+x,env.get('CPPDEFINES',''))],
               LIBPATH=['../../lib'],
               LIBS=['rsf'])
    if not root:
        env.Append(NVCCFLAGS=['-g'])

mains = Split(progs)
for prog in mains:
    if env['CUDA_TOOLKIT_PATH']:
        sources = ['M' + prog]
        prog = env.Program(prog,map(lambda x: x + '.cu',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,
                             message='\nSCons CudaTool (provided with Madagascar) should detect\n' +
                                     'the existing CUDA installation on this system automatically.\n' +
                                     'Please check if CUDA is not missing and is installed correctly.\n' +
                                     'Rerun Madagascar installation after it has been fixed.\n')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user

    docs = map(lambda prog: env.Doc(prog,'M' + prog+'.cu'),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)

