import os, sys, re, string, glob
srcroot = os.environ.get('RSFSRC', '../..')
sys.path.append(srcroot)
import configure

# C mains
progs = '''
quantile leftsize filedims fileflush create
'''

# Python mains that do not need SWIG+numpy
py_meta = '''
pclip prep4plot wiki2static invalid
'''

# Python modules that do not need SWIG+numpy
pylibs_meta = '''
ivlad
'''

progs_f90 = '''
seekwin
'''

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.{c,f90}')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.{c,f90}')

F90 = env.get('F90')
api = env.get('API',[])
if 'f90' in api and F90:
    mylibs=['rsff90','rsf']
    env.Prepend(F90PATH=['../../include'])
else:
    mylibs=['rsf']

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=mylibs)

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

###############
# Fortran 90
###############

mains_f90 = Split(progs_f90)
if 'f90' in api and F90:
    F90base = os.path.basename(F90)
    if F90base[:8] == 'gfortran' or F90base[:3] == 'gfc':
        env.Append(F90FLAGS=' -J${SOURCE.dir}')
    elif F90base == 'ifort':
        env.Append(F90FLAGS=' -module ${SOURCE.dir}')
    for prog in mains_f90:
        sources = ['M' + prog]
        configure.depends90(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.f90',sources),
                           LINK=F90)
        if root:
            env.Install(bindir,prog)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation but rename

    # Python main programs
    py_mains_meta = Split(py_meta)
    for prog in  Split(py_meta):
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')

    # User modules
    rsfuser = os.path.join(libdir,'rsfuser')
    for module in Split(pylibs_meta):
        env.Install(rsfuser,module+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    docs = map(lambda prog: env.Doc(prog,'M'+prog),mains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),
               py_mains_meta)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.Docmerge(main,docs)
    env.Install(libdir,doc)

