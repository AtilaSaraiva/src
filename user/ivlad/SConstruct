import os, sys, re, string, glob
# The two lines below should not be needed, and rsfconf
# should be imported instead of configure, but there
# is an error when importing it.
srcroot = os.environ.get('RSFSRC', '../..')
sys.path.append(srcroot)
import configure

# C mains
progs = '''
su2rsf segy2rsf quantile leftsize filedims fileflush create
'''

# Python mains that do not need SWIG+numpy
py_meta = '''
pclip prep4plot
'''

# Python modules that do not need SWIG+numpy
pylibs_meta = '''
ivlad
'''

try:  # distributed version
    Import('env')
    env = env.Copy()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options(os.path.join(srcroot,'config.py'))
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    SConscript('../../filt/lib/SConstruct')
    src = glob.glob('[a-z]*.c')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])

rsfroot = os.environ.get('RSFROOT','/usr/local/rsf')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../filt/lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

######################################################################
# PYTHON METAPROGRAMS (python API not needed)
######################################################################

if root: # no compilation but rename

    # Python main programs
    py_mains_meta = Split(py_meta)
    for prog in  Split(py_meta):
        env.InstallAs(os.path.join(bindir,'sf'+prog),'M'+prog+'.py')
        
    # User modules
    rsfuser = os.path.join(libdir,'rsfuser')
    for module in Split(pylibs_meta):
        env.Install(rsfuser,module+'.py')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    docs = map(lambda prog: env.Doc(prog,'M'+prog),mains) + \
           map(lambda prog: env.Doc(prog,'M'+prog+'.py',lang='python'),
               py_mains_meta)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)

#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id: SConstruct 777 2004-09-07 09:40:19Z fomels $
