import os, sys, string
sys.path.append('../..')
import configure

progs = '''
add attr cat cconjgrad cdottest cmplx conjgrad cp cut dd disfil
dottest get headerattr headercut headermath headersort headerwindow in
interleave mask math pad put real reverse rm rotate rtoc scale
segyheader segyread segywrite spike spray stack transp window
'''

try: # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    alias = {'cat':'merge',
             'real':'imag',
             'cp':'mv',
             'segyread':'suread',
             'segywrite':'suwrite'}
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

mains = Split(progs)

docalias = {}
for prog in mains:
    main = env.Program(prog + '.c')
    
    if root:
        env.Install(bindir,main[0])

        if prog in alias.keys():
	       other = string.replace(str(main[0]),prog,alias[prog])
               env.InstallAs(os.path.join(bindir,other),main[0])

               if env['PLATFORM'] == 'cygwin':
                   other = string.replace(other,'.exe','')
               docalias[other] = 'sf'+prog

mpicc = env.get('MPICC')
if mpicc:
    prog = env.Program('sfmpi','mpi.c',CC=mpicc)
else:
    prog = env.Place('sfmpi',None,var='MPI')
if root:
    env.Install(bindir,prog[0])

omp = env.get('OMP')
if omp:
    prog = env.Program('sfomp','omp.c')
else:
    prog = env.Place('sfomp',None,var='OMP')
if root:
    env.Install(bindir,prog[0])

if root:
    env.Install(bindir,'sfunits')

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfmain.py'
    
    docs = map(lambda prog: env.Doc(prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)


