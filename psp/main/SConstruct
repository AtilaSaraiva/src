import os, sys, string
sys.path.append('../../framework')
import bldutil

progs = '''
helmholtz
'''

try:  # distributed version
    Import('env root bindir pkgdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../../api/c++/SConstruct')

SConscript('../clique/src/SConstruct')
SConscript('../elemental/src/SConstruct')
SConscript('../lib/src/SConstruct')

if 'c++' in env.get('API',[]):
    lapack = env.get('LAPACK')
else:
    lapack = None

MPICXX = WhereIs('mpicxx')

if lapack:
    env.Prepend(CPPPATH=['../../include','../lib/include','../clique/include','../elemental/include'],
                LIBPATH=['../../lib'],
                LIBS=['psp','clique','elemental',
                      env.get('DYNLIB','')+'rsf++',
                      env.get('DYNLIB','')+'rsf']+lapack)

mains = Split(progs)
for prog in mains:
    sources = ['M' + prog]
    if lapack:
        prog = env.Program(prog,map(lambda x: x + '.cc',sources),
                           CXX=MPICXX,
                           CPPDEFINES=['RELEASE','BLAS_POST','LAPACK_POST','WITHOUT_PMRRR',
                                       ('RESTRICT','')])
    else:
        prog = env.RSF_Place('sf'+prog,None,var='LAPACK',package='lapack')

    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M%s.cc' % prog,lang='c++'),
               Split(progs))
    env.Depends(docs,'#/framework/rsf/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
#####################################################################
