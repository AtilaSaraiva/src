import os, sys, re, string, glob, types
sys.path.append('../..')
import configure

# for future use
progs = '''
plotrays3 
'''

oglsrc = 'gl2ps trackball'

try:  # distributed version
    Import('env root libdir bindir')
    env = env.Clone()
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../../api/c/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

ogl = env.get('OPENGL')
oglflags = env.get('OPENGLFLAGS')
oglpath = env.get('OPENGLPATH')

if ogl:
    if type(ogl) is not types.ListType:
        ogl = Split(ogl)
    env.Prepend(LIBS=ogl)

if oglflags:
    if type(oglflags) is not types.ListType:
        oglflags = Split(oglflags)
    env.Append(LINKFLAGS=oglflags)

if oglpath:
    if type(oglpath) is not types.ListType:
        oglpath = Split(oglpath)
    env.Append(CPPPATH=oglpath)

# Treat OpenGL sources differently
for source in Split(oglsrc):
    src.remove(source+'.c')

for source in src:
    inc = env.RSF_Include(source,prefix='')
    if ogl:
        obj = env.StaticObject(source)
        env.Depends(obj,inc)

mains = Split(progs)
for prog in mains:
    if ogl or oglflags:
        sources = ['M' + prog]
        configure.depends(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    else:
        prog = env.RSF_Place('sf'+prog,None,var='OPENGL',
                         package='mesa-libGL-devel')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfopengl.py' 
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')	
    doc = env.RSF_Docmerge(main,docs)
    env.Install(libdir,doc)
#####################################################################

