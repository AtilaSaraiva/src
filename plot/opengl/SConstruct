import os, sys, re, string, glob, types
sys.path.append('../..')
import configure

# for future use
progs = '''
plotrays3 
'''

oglsrc = 'gl2ps trackball'

try:  # distributed version
    Import('env')
    env = env.Copy()
    
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    SConscript('../../filt/lib/SConstruct')
    src = glob.glob('[a-z]*.c')
    env.Append(BUILDERS={'Include':configure.Header,'Place':configure.Place},
               SCANNERS=[configure.Include])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../filt/lib'],
            LIBS=['rsf'])

ogl = env.get('OPENGL')
if ogl:
    if type(ogl) is not types.ListType:
        ogl = Split(ogl)
    env.Prepend(LIBS=ogl)

# Treat OpenGL sources differently
for source in Split(oglsrc):
    src.remove(source+'.c')

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)


mains = Split(progs)
for prog in mains:
    if ogl:
        sources = ['M' + prog]
        configure.depends(env,sources,'M'+prog)
        prog = env.Program(prog,map(lambda x: x + '.c',sources))
    else:
        prog = env.Place('sf'+prog,None,var='OPENGL',package='mesa-libGL-devel')
    if root:
        env.Install(bindir,prog)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    user = os.path.basename(os.getcwd())
    main = 'sf%s.py' % user
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains+oglmains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
#####################################################################

