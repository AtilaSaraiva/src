import os, sys, string
sys.path.append('../..')
import bldutil

try: # distribution version
    Import('env root libdir bindir pkgdir')
    env = env.Clone()
except: # local version
    env = bldutil.Debug()
    root = None
    SConscript('../lib/SConstruct')

plplot = env.get('PLPLOT')
plplotlibpath = env.get('PLPLOTLIBPATH','')

##############################################################################
# Loadable PLPLOT driver
##############################################################################

if plplot:
    env.Prepend(CPPPATH=['../../include',env.get('PLPLOTPATH')],
                LIBPATH=['../../lib'],
                LIBS=['drsf','drsfplot',plplot])
    if plplotlibpath:
        env.Prepend(LIBPATH=[plplotlibpath])

    env.RSF_Include('plvpl')
    obj = env.SharedObject('plvpl.c')
    dlib = env.SharedLibrary('plvpl',[obj],
                              SHLIBPREFIX='')
    ilib = env.Install('../../lib',dlib)

    if root:
        install = env.Install(libdir,dlib)
        env.Install(libdir,'plvpl.rc')

        if env['PLATFORM'] == 'darwin':
            env.AddPostAction(install,
                               'install_name_tool -change '
                               'build/api/c/libdrsf.dylib '
                               '%s/libdrsf.dylib %s/%s' % \
                                   (libdir,libdir,dlib[0]))
            env.AddPostAction(install,
                               'install_name_tool -change '
                               'build/api/c/libdrsfplot.dylib '
                               '%s/libdrsfplot.dylib %s/%s' % \
                                   (libdir,libdir,dlib[0]))

##############################################################################
# Plot tools
##############################################################################

progs = 'plsurf'
mains = Split(progs)

for prog in mains:
    if plplot:
        if root:
            main = env.Program(prog,[prog + '.c',install])
        else:
            main = env.Program(prog,[prog + '.c',ilib])
    else:
        main = env.RSF_Place('sf'+prog,None,package='libplplot-dev')
    if root:
        env.Install(bindir,main[0])

if root:
    main = 'sfplplot.py'

    docs = map(lambda prog: env.Doc(prog),mains)
    env.Depends(docs,'#/framework/py_pkg/doc.py')
    doc = env.RSF_Docmerge(main,docs)
    env.Install(pkgdir,doc)
