import os, sys, string
sys.path.append('../..')
import bldutil

try: # distribution version
    Import('env root libdir bindir')
    env = env.Clone()
    lenv = env.Clone()
except: # local version
    env = bldutil.Debug()
    lenv = bldutil.Debug()
    root = None
    SConscript('../../api/c/SConstruct')

plplot = env.get('PLPLOT')

##############################################################################
# Loadable PLPLOT driver
##############################################################################
if plplot:
    lenv.Prepend(CPPPATH=['../../include',lenv.get('PLPLOTPATH')],
                 LIBPATH=['../../lib'],
                 LIBS=['drsf','drsfplot',plplot])

    obj = lenv.SharedObject('plvpl.c')
    dlib = lenv.SharedLibrary('plvpl',[obj],
                              SHLIBPREFIX='')

    if root:
        install = lenv.Install(libdir,[dlib])
        lenv.Install(libdir,'plvpl.rc')

        if lenv['PLATFORM'] == 'darwin':
            lenv.AddPostAction(install,
                               'install_name_tool -change '
                               'build/api/c/libdrsf.dylib '
                               '%s/libdrsf.dylib %s/%s' % \
                                   (libdir,libdir,dlib[0]))
            lenv.AddPostAction(install,
                               'install_name_tool -change '
                               'build/api/c/libdrsfplot.dylib '
                               '%s/libdrsfplot.dylib %s/%s' % \
                                   (libdir,libdir,dlib[0]))

##############################################################################
# Plot tools
##############################################################################

progs = 'plsurf'
mains = Split(progs)

if plplot:
    env.Prepend(CPPPATH=['../../include',env.get('PLPLOTPATH')],
                LIBPATH=['../../lib'],
                LIBS=['drsf','drsfplot',plplot])

    for prog in mains:
        main = env.Program(prog + '.c')
        if root:
             env.Install(bindir,main[0])
    if root:
        main = 'sfplplot.py'

        docs = map(lambda prog: env.Doc(prog),mains)
        env.Depends(docs,'#/framework/rsfdoc.py')
        doc = env.RSF_Docmerge(main,docs)
        env.Install(libdir,doc)
elif root:
    for prog in mains:
        main = env.RSF_Place('sf'+prog,None,package='libplplot-dev')
        env.Install(bindir,main[0])

