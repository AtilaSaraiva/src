import os, sys, string, types
sys.path.append('../..')
import configure

src = 'do  init_  main_ proc_'

try: # distribution version
    Import('env root libdir bindir')
    env = env.Clone()
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../genlib/SConstruct')
    
env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../utilities','../genlib','../../lib'],
            LIBS=['genpen','penutil','rsfplot','rsf'])

env['PROGPREFIX'] = ''

sources = map(lambda x: x+'vplot',Split(src))

objects = []
for source in sources:
    env.Include(source,prefix='pen_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    objects.append(obj)

docalias = {}

# vppen
#######

env.Include('vppen',prefix='pen_')
obj = env.StaticObject('vppen.c')
env.Depends(obj,'vppen.h')
main = env.Program('vppen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])
        
pens = ['vppen']

# xtpen
#######

inc = env.get('XINC')
lib = env.get('XLIBPATH')

if inc and lib:
    env.Include('xtpen',prefix='pen_')
    obj = env.StaticObject('xtpen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,'xtpen.h')
    main = env.Program('xtpen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
    pens.append('xtpen')
else:
    main = env.Place('xtpen',None,
                     var='XINC and XLIBPATH',package='libXaw-devel')

if root:
    env.Install(bindir,main[0])

# x11pen
#######

if inc and lib:
    env.Include('x11pen',prefix='pen_')
    obj = env.StaticObject('x11pen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,'x11pen.h')
    main = env.Program('x11pen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
    pens.append('x11pen')
else:
    main = env.Place('x11pen',None,var='XINC and XLIBPATH')
    
if root:
    env.Install(bindir,main[0])

# pspen
#######

env.Include('pspen',prefix='pen_')
obj = env.StaticObject('pspen.c')
env.Depends(obj,'pspen.h')
main = env.Program('pspen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])

pens.append('pspen')

# raspen
#######

env.Include('raspen',prefix='pen_')
pens.append('raspen')

for pen in ('ppm','tiff','jpeg'):
    cap = pen.upper()
    name = pen+'pen'
    lib = env.get(cap)

    if lib:
        path = env.get(cap+'PATH')
        defines = env.get('CPPDEFINES',[])+['_'+cap]
        if path:    
            obj = env.StaticObject(name+'.o','raspen.c',
                                   CPPPATH=env.get('CPPPATH',[])+[path],
                                   CPPDEFINES=defines)
        else:
            obj = env.StaticObject(name+'.o','raspen.c',
                                   CPPDEFINES=defines)
        env.Depends(obj,'raspen.h')
        main = env.Program(name,[obj,]+objects,
                           LIBS=[lib]+env.get('LIBS',[]))
        docalias['sf'+name]='sfraspen'
    else:
        main = env.Place(name,None,var=cap,
                         package={'ppm':'libnetpbm-devel',
                                  'tiff':'libtiff-devel',
                                  'jpeg':'libjpeg-devel'}[pen])

    if root:
        env.Install(bindir,main[0])

# gdpen
#######

gd = env.get('GD')

if gd:
    env.Include('gdpen',prefix='gd_')

    obj = env.StaticObject('gdpen.c')
    env.Depends(obj,'gdpen.h')
    main = env.Program('gdpen',[obj,]+objects,
                       LIBS=[gd]+env.get('LIBS',[]))
    pens.append('gdpen')
else:
    main = env.Place('gdpen',None,var='GD',package='libgd2-noxpm-dev')
    
if root:
    env.Install(bindir,main[0])

# crpen
#######

env.Include('crpen',prefix='pen_')
pens.append('crpen')
path = env.get('CAIROPATH')

for pen in ('png','pdf','svg'):
    cap = pen.upper()
    name = pen+'pen'
    lib = env.get('CAIRO'+cap)

    if lib:
        defines = env.get('CPPDEFINES',[])+['_'+cap]
        if path:    
            obj = env.StaticObject(name+'.o','crpen.c',
                                   CPPPATH=env.get('CPPPATH',[])+[path],
                                   CPPDEFINES=defines)
        else:
            obj = env.StaticObject(name+'o','crpen.c',
                                   CPPDEFINES=defines)
        env.Depends(obj,'crpen.h')
        main = env.Program(name,[obj,]+objects,
                           LIBS=[lib]+env.get('LIBS',[]))
        docalias['sf'+name]='sfcrpen'
    else:
        main = env.Place(name,None,var='CAIRO-'+cap,pakage='cairo')
    
    if root:
        env.Install(bindir,main[0])

# oglpen
#######

ogl = env.get('OPENGL')
oglflags = env.get('OPENGLFLAGS')

if ogl:
    if type(ogl) is not types.ListType:
        ogl = Split(ogl)
    if oglflags:
        if type(oglflags) is not types.ListType:
            oglflags = Split(oglflags)
    env.Include('oglpen',prefix='ogl_')
    obj = env.StaticObject('oglpen.c')
    env.Depends(obj,'oglpen.h')
    main = env.Program('oglpen',[obj,]+objects,
                       LIBS=[ogl]+env.get('LIBS',[]),
                       LINKFLAGS=[oglflags]+env.get('LINK_FLAGS',[]))
    pens.append('oglpen')
else:
    main = env.Place('oglpen',None,var='OPENGL',package='freeglut-devel')

if root:
    env.Install(bindir,main[0])


######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfpens.py'

    for pen in pens:
        env.Command('M'+pen+'.c',[pen+'.c','init_vplot.c'],
                    'cat $SOURCES > $TARGET')
    
    docs = map(lambda prog: env.Doc(prog,'M'+prog),pens)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)
 
#####################################################################

# 	$Id$	
