import os, sys, string
sys.path.append('../..')
import configure

src = 'do  init_  main_ proc_'

try: # distribution version
    Import('env root libdir bindir')
    env = env.Clone()
except: # local version
    env = configure.Debug()
    root = None
    SConscript('../genlib/SConstruct')
    
env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../utilities','../genlib','../../lib'],
            LIBS=['genpen','penutil','rsfplot','rsf'])

env['PROGPREFIX'] = ''

sources = map(lambda x: x+'vplot',Split(src))

objects = []
for source in sources:
    env.Include(source,prefix='pen_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    objects.append(obj)

docalias = {}

# vppen
#######

env.Include('vppen',prefix='pen_')
obj = env.StaticObject('vppen.c')
env.Depends(obj,'vppen.h')
main = env.Program('vppen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])
        
pens = ['vppen']

# xtpen
#######

inc = env.get('XINC')
lib = env.get('XLIBPATH')

if inc and lib:
    env.Include('xtpen',prefix='pen_')
    obj = env.StaticObject('xtpen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,'xtpen.h')
    main = env.Program('xtpen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
    pens.append('xtpen')
else:
    main = env.Place('xtpen',None,
                     var='XINC and XLIBPATH',package='libXaw-devel')

if root:
    env.Install(bindir,main[0])

# x11pen
#######

if inc and lib:
    env.Include('x11pen',prefix='pen_')
    obj = env.StaticObject('x11pen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,'x11pen.h')
    main = env.Program('x11pen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
    pens.append('x11pen')
else:
    main = env.Place('x11pen',None,var='XINC and XLIBPATH')
    
if root:
    env.Install(bindir,main[0])

# pspen
#######

env.Include('pspen',prefix='pen_')
obj = env.StaticObject('pspen.c')
env.Depends(obj,'pspen.h')
main = env.Program('pspen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])

pens.append('pspen')

# raspen
#######

ppm = env.get('PPM')

if ppm:
    env.Include('raspen',prefix='pen_')
    obj = env.StaticObject('raspen.c')
    env.Depends(obj,'raspen.h')
    main = env.Program('ppmpen',[obj,]+objects,
                       LIBS=[ppm]+env.get('LIBS',[]))
    docalias['sfppmpen']='sfraspen'
    pens.append('raspen')
else:
    main = env.Place('ppmpen',None,var='PPM',package='netpbm-devel')
    
if root:
    env.Install(bindir,main[0])

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfpens.py'

    for pen in pens:
        env.Command('M'+pen+'.c',[pen+'.c','init_vplot.c'],
                    'cat $SOURCES > $TARGET')
    
    docs = map(lambda prog: env.Doc(prog,'M'+prog),pens)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)
 
#####################################################################

# 	$Id$	
