import os, sys, string
sys.path.append('../..')
import configure

src = 'do  init_  main_ proc_'

try: # distribution version
    Import('env')
    env = env.Copy()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')    
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  sys.platform[:5] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-xO2','-g')
    SConscript('../genlib/SConstruct')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../utilities','../genlib','../../plot/lib','../../filt/lib'],
            LIBS=['genpen','util','rsfplot','rsf'])

env['PROGPREFIX'] = ''

sources = map(lambda x: x+'vplot',Split(src))

objects = []
for source in sources:
    env.Include(source,prefix='pen_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    objects.append(obj)

# vppen
#######

env.Include('vppen',prefix='pen_')
obj = env.StaticObject('vppen.c')
env.Depends(obj,'vppen.h')
main = env.Program('vppen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])
        
    # do selfdoc later

# xtpen
#######

inc = env.get('XINC')
lib = env.get('XLIBPATH')

if inc and lib:
    env.Include('xtpen',prefix='pen_')
    obj = env.StaticObject('xtpen.c',CPPPATH=env.get('CPPPATH',[])+inc)
    env.Depends(obj,'xtpen.h')
    main = env.Program('xtpen',[obj,]+objects,
                       LIBPATH=env.get('LIBPATH',[])+lib,
                       LIBS=env.get('XLIBS',[])+env.get('LIBS',[]))
    
    if root:
        env.Install(bindir,main[0])
elif root:
    env.InstallAs(os.path.join(bindir,'xtpen'),'xtpen.py')

# pspen
#######

env.Include('pspen',prefix='pen_')
obj = env.StaticObject('pspen.c')
env.Depends(obj,'pspen.h')
main = env.Program('pspen',[obj,]+objects)

if root:
    env.Install(bindir,main[0])

# raspen
#######

ppm = env.get('PPM')

if ppm:
    env.Include('raspen',prefix='pen_')
    obj = env.StaticObject('raspen.c')
    env.Depends(obj,'raspen.h')
    main = env.Program('ppmpen',[obj,]+objects,
                       LIBS=[ppm]+env.get('LIBS',[]))
    
    if root:
        env.Install(bindir,main[0])
