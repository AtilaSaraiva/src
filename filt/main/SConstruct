import os, sys, string
sys.path.append('../..')
import configure

progs = '''
add attr cat cconjgrad cdottest cmplx conjgrad cp cut dd disfil
dottest get headerattr headercut headermath headersort headerwindow in
interleave mask math pad put real reverse rm rotate rtoc scale
segyread segywrite spike spray stack transp window
'''

try: # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
    alias = {'cat':'merge','real':'imag','cp':'mv'}
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  sys.platform[:5] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-xO2','-g')
    env.Prepend(CPPPATH=['../../include'],
                LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')

mains = Split(progs)

for prog in mains:
    main = env.Program(prog + '.c')
    
    if root:
        env.Install(bindir,main[0])
        if prog in alias.keys():
	       other = string.replace(str(main[0]),prog,alias[prog])
               env.InstallAs(os.path.join(bindir,other),main[0])
	       docmerge = configure.docextra(docmerge,'sf'+prog,other)

######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:    
    main = 'sfmain.py'
    
    docs = map(lambda prog: env.Doc(prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')

    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
 
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

#####################################################################

# 	$Id$

