import os, sys, string
sys.path.append('../..')
import configure

#############################################################################
# MAIN LIBRARY
#############################################################################
src = '''
adjnull alloc bigsolver c99 ccgstep cconjgrad cgstep chain conjgrad conjprec
decart dottest error file files getpar math1 pfafft segy simtab stack
'''

sources  = map(lambda x: x+'.c',Split(src))
includes = map(lambda x: x+'.h',Split(src))

try: # distribution version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    incdir = os.path.join(root,'include')
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')


##############################################################################
# MAIN LIBRARY
##############################################################################
lib = env.StaticLibrary('rsf',sources)
inc = env.Command('rsf.h',includes,Action(configure.merge))
install = env.Install('../../include',inc)
   
if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)
else:
    env.Alias('install',install)

##############################################################################
# TESTING
##############################################################################
libs = ['m']	
if sys.platform[:5] == 'sunos':
    libs.append('nsl')
elif sys.platform[:6] == 'cygwin':
    libs.append('rpc')
for file in ['file','getpar','simtab']:
    test = 'Test' + file + '.c'
    env.Program([test,lib],PROGSUFFIX='.x',PROGPREFIX='',LIBS=libs)

api = string.split(string.lower(env.get('API','')),',')

##############################################################################
# C++ BINDING
##############################################################################
if 'c++' in api:
    libcc = env.StaticLibrary('rsf++','rsf.cc',
                              OBJSUFFIX='++.o',CPPPATH='../../include')
    if root:
        env.Install(libdir,libcc)
        env.Install(incdir,'rsf.hh')

    for file in ['getpar','file']:
        test = 'Test' + file + '.cc'
        
        env.Program([test,libcc,lib],
                    OBJSUFFIX='++.o',CPPPATH='../../include',
                    PROGSUFFIX='.x',PROGPREFIX='',LIBS=libs)
        
##############################################################################
# FORTRAN-77 BINDING
##############################################################################
if 'fortran' in api:
    env.Object('fortran.o','fortran.c',
               CCFLAGS=env.get('CCFLAGS')+' -D$CFORTRAN')
    libf = env.StaticLibrary('rsff','fortran.o')                         
    
    if root:
        env.Install(libdir,libf)
        
    for file in ['getpar','file']:
        test = 'Test' + file + '.f'
        env.Program([test,libf,lib],PROGSUFFIX='.x',PROGPREFIX='',
                    OBJSUFFIX='f.o',
                    LINK=env.get('F77'),LINKFLAGS=env.get('F77FLAGS'))
        
##############################################################################
# FORTRAN-90 BINDING
##############################################################################
if 'fortran-90' in api and env.has_key('F90'):
    import configure
    
    configure.load_f90(env)
    env.Object('fortran90.o','fortran.c',
               CCFLAGS=env.get('CCFLAGS')+' -D$CFORTRAN90')
    env.Object('rsf.o','rsf.f90')
    libf90 = env.StaticLibrary('rsff90',['rsf.o','fortran90.o'])
        
    if root:
        env.Install(libdir,libf90)
        
    for file in ['getpar','file']:
        test = 'Test' + file + '.f90'
        env.Program([test,libf90,lib],PROGSUFFIX='f90.x',PROGPREFIX='',
                    OBJSUFFIX='f90.o',
                    LINK=env.get('F90'),LINKFLAGS=env.get('F90FLAGS'))
            
##############################################################################
# PYTHON BINDING
##############################################################################
if 'python' in api and 'swig' in env.get('TOOLS'):
    # Python includes for SWIG 
    pythinc = []
    for path in sys.path:
        if string.find(path,'python') >= 0:
            dir = string.replace(path,'lib','include')
            if os.path.isdir(dir):
                pythinc.append(dir)

    python = env.SharedLibrary('rsf',['rsf.i']+sources,
                               SWIGFLAGS='-python',
                               CPPPATH=pythinc,
                               SHLIBPREFIX='_c_')

    if root:
        env.Install(libdir,python)
        env.Install(libdir,'c_rsf.py')
        env.Install(libdir,'rsf.py')
        Clean(python,['c_rsf.py','c_rsf.pyc'])
