import os, sys, string
sys.path.append('../..')
import configure

#############################################################################
# MAIN LIBRARY
#############################################################################
src = 'kiss_fft kiss_fftr mt19937ar'

src2 = '''
adjnull alloc axa banded bigsolver c99 causint ccgstep cconjgrad cell
cdstep cgstep chain conjgrad conjprec copy cosft decart dottest edge
eno eno2 error file files freqfilt getpar int1 int2 int3 interp
interp_spline irls komplex llist mask math1 point pqueue prefilter
randn recfilt runge quantile quadratic segy simtab stack tent2
tinysolver triangle triangle1 tridiagonal vector
'''

try: # distribution version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    incdir = os.path.join(root,'include')
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  sys.platform[:5] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-xO2','-g')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])

##############################################################################
# INCLUDES
##############################################################################
sources  = map(lambda x: x+'.c',Split(src))
includes = map(lambda x: x+'.h',Split(src2)+Split(src))

objects = []
for source in Split(src2):
    env.Include(source,prefix='sf_')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    objects.append(obj)

##############################################################################
# MAIN LIBRARY
##############################################################################
lib = env.StaticLibrary('rsf',objects+sources)
inc = env.Command('rsf.h',includes,Action(configure.merge))
install = env.Install('../../include',inc)
   
if root:
    env.Install(libdir,lib)
    env.Install(incdir,inc)
else:
    env.Alias('install',install)
    
##############################################################################
# TESTING
##############################################################################
for file in Split('banded eno2 fft file getpar quantile simtab'):
    test = env.StaticObject('Test' + file + '.c')
    prog = env.Program([test,lib],PROGSUFFIX='.x',PROGPREFIX='')
    env.Depends(test,includes) # remove later 

api = string.split(string.lower(str(env.get('API',''))),',')

##############################################################################
# C++ BINDING
##############################################################################
if 'c++' in api:
    libcc = env.StaticLibrary('rsf++',Split('rsf.cc cub.cc vai.cc'),
                              OBJSUFFIX='++.o',CPPPATH='../../include')
    env.Install('../../include','rsf.hh')

    if root:
        env.Install(libdir,libcc)
        env.Install(incdir,Split('rsf.hh cub.hh vai.hh'))

    for file in ['getpar','file']:
        test = 'Test' + file + '.cc'
        
        env.Program([test,libcc,lib],
                    OBJSUFFIX='++.o',CPPPATH='../../include',
                    PROGSUFFIX='++.x',PROGPREFIX='')
        
##############################################################################
# FORTRAN-77 BINDING
##############################################################################
if 'fortran' in api:
    env.Object('fortran.o','fortran.c',
               CCFLAGS=env.get('CCFLAGS')+' -D$CFORTRAN')
    libf = env.StaticLibrary('rsff','fortran.o')                         
    
    if root:
        env.Install(libdir,libf)
        
    for file in ['getpar','file']:
        test = 'Test' + file + '.f'
        env.Program([test,libf,lib],PROGSUFFIX='f.x',PROGPREFIX='',
                    OBJSUFFIX='f.o',
                    LINK=env.get('F77'),LINKFLAGS=env.get('F77FLAGS'))
        
##############################################################################
# FORTRAN-90 BINDING
##############################################################################
if 'fortran-90' in api or 'fortran90' in api or 'f90' in api:
    if env.has_key('F90'):
        F90 = env.get('F90')
        F90base =  os.path.basename(F90)
        F90flags = env.get('CCFLAGS')+' -D$CFORTRAN90'

        if F90base == 'gfortran':
            F90flags = F90flags + ' -DGFORTRAN'

        env.Object('fortran90.o','fortran.c',CCFLAGS=F90flags)
        env.Object('rsf.o','rsf.f90')
        libf90 = env.StaticLibrary('rsff90',['rsf.o','fortran90.o'])

        modsuffix = env.get('F90MODSUFFIX')
        if modsuffix:
            if 'ifort'==F90base or 'gfortran'==F90base:
                mod = 'rsf'+modsuffix
            else:
                mod = 'RSF'+modsuffix
            if root:
                mod = '#/'+mod
            env.Depends(mod,libf90)

            installf90 = env.Install('../../include',mod)
             
            if root:
                env.Install(incdir,mod)
            else:
                env.Alias('install',installf90)
        
        if root:
            env.Install(libdir,libf90)
            
        for file in ['getpar','file']:
            test = 'Test' + file + '.f90'
            env.Program([test,libf90,lib],PROGSUFFIX='.x',PROGPREFIX='',
                        OBJSUFFIX='f90.o',
                        LINK=F90,LINKFLAGS=env.get('F90FLAGS'))
            
##############################################################################
# PYTHON BINDING
##############################################################################
if 'python' in api and 'swig' in env.get('TOOLS'):
    # Python includes for SWIG 

    pythinc = []
    try:
        import numpy
        numpy_loc = os.path.split(numpy.__file__)[0]
        pythinc.append(os.path.join(numpy_loc,'numarray','numpy'))
        pythinc.append(os.path.join(numpy_loc,'core','include'))
    except:
        for path in sys.path:
            if string.find(path,'python') >= 0:
                dir = os.path.join(string.replace(path,'lib','include'),'numarray')
                if os.path.isdir(dir):
                    pythinc.append(dir)

    for path in sys.path:
        if string.find(path,'python') >= 0:
            dir = string.replace(path,'lib','include')
            if os.path.isdir(dir):
                pythinc.append(dir)                

    objs = []
    for source in Split(src2):
        obj = env.SharedObject(source+'.c')
        env.Depends(obj,source+'.h')
        objs.append(obj)

    python = env.SharedLibrary('rsf',['rsf.i']+sources+objs,
                               SWIGFLAGS='-python',
                               CPPPATH=pythinc,
                               SHLIBPREFIX='_c_')


    if root:
        env.Install(libdir,python)
        env.Install(libdir,'c_rsf.py')
        env.Install(libdir,'rsf.py')
        Clean(python,['c_rsf.py','c_rsf.pyc'])

##############################################################################
# MATLAB BINDING
##############################################################################

mex = WhereIs('mex')

if mex and 'matlab' in api:
    # suffix is different on different platforms
    if sys.platform[:6] == 'darwin':
        suffix = '.mexmac'
    else:
        suffix = '.mexglx'

    for inp in Split('par dim read write create'):
        file = 'rsf_'+inp
        mexfile = env.Command(file+suffix,[file+'.c',lib],
                              "%s CFLAGS='%s %s' "
                              "$SOURCES %s %s -output $TARGET" %
                              (WhereIs('mex'),env['_CPPINCFLAGS'],
                               env['CCFLAGS'],env['_LIBDIRFLAGS'],
                               env['_LIBFLAGS']))
        if root:
            env.Install(libdir,mexfile)   

##############################################################################
# LINT
##############################################################################

env.Command('../lint/lint',map(lambda x: x+'.c',Split(src2)),
            'splint +posixlib $SOURCES')
env.Alias('lint','../lint')


