import os, sys, string
sys.path.append('../..')
import configure

#############################################################################
# MAIN LIBRARY
#############################################################################
src = 'kiss_fft kiss_fftr mt19937ar'

src2 = '''
adjnull alloc axa banded bigsolver blas c99 causint ccdstep ccgstep
cconjgrad cell cdstep cgstep chain clist conjgrad conjprec copy cosft
decart dottest edge eno eno2 error file files freqfilt getpar helicon
helix igrad1 impl2 int1 int2 int3 interp interp_spline irls komplex
llist mask math1 point pqueue prefilter randn recfilt runge quantile
quadratic segy sharpen simtab stack stretch system tent2 tinysolver
triangle triangle1 tridiagonal vector weight
'''

try: # distribution version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    incdir = os.path.join(root,'include')
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    if  sys.platform[:5] == 'sunos':
	env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),
                                        '-xO2','-g')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])

##############################################################################
# INCLUDES
##############################################################################
sources  = map(lambda x: x+'.c',Split(src))
includes = map(lambda x: x+'.h',Split(src2)+Split(src))

sobjs = []
dobjs = []
for source in Split(src2):
    env.Include(source,prefix='sf_')

    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
    sobjs.append(obj)

    obj = env.SharedObject(source+'.c')
    env.Depends(obj,source+'.h')
    dobjs.append(obj)

##############################################################################
# MAIN LIBRARY
##############################################################################
slib = env.StaticLibrary('rsf',sobjs+sources)
dlib = env.SharedLibrary('rsf',dobjs+sources,SHLIBPREFIX='libd')

inc = env.Command('rsf.h',includes,Action(configure.merge))

env.Install('../../lib',[slib,dlib])
env.Install('../../include',inc)

if root:
    env.Install(libdir,[slib,dlib])
    env.Install(incdir,inc)

##############################################################################
# TESTING
##############################################################################
for file in Split('banded eno2 fft file getpar quantile simtab'):
    test = env.StaticObject('Test' + file + '.c')
    prog = env.Program(file,[test,slib],PROGSUFFIX='.x',PROGPREFIX='Test')

api = env.get('API',[])

##############################################################################
# MATLAB BINDING
##############################################################################

if 'matlab' in api:
    mex = env.get('MEX')
    suffix = env.get('MEXSUFFIX')

    for inp in Split('par dim read write create'):
        cfile = 'rsf_' + inp
        mexfile = env.Command(cfile+suffix,[cfile+'.c',sources,objs],
                              "%s CFLAGS='%s %s -fPIC' "
                              "$SOURCES %s %s -output $TARGET" %
                              (mex,env['_CPPINCFLAGS'],env['CCFLAGS'],
                               env['_LIBDIRFLAGS'], env['_LIBFLAGS']))
        if root:
            env.Install(libdir,mexfile)

##############################################################################
# OCTAVE BINDING
##############################################################################

apiforce=False
if root:
    if apiforce or ('octave' in api):
        octdir = os.path.join(libdir,'octave')
        env.Command(octdir,None, Mkdir('$TARGET'))
        env.Clean(libdir,octdir)
        for inp in Split('dim create par'):
            env.Install(octdir, 'rsf_'+inp+'.m')

##############################################################################
# LINT
##############################################################################

env.Command('../lint/lint',map(lambda x: x+'.c',Split(src2)),
            'splint +posixlib $SOURCES')
env.Alias('lint','../lint')


