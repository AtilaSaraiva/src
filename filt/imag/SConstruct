import os, sys, re, string
sys.path.append('../..')
import configure

progs = '''
angle angle2 cell2 constfdmig2 cup dmo dsr eikonal fincon finstack
fkamo fkdmo gazdag green halfint interp2 interp3 interpt kirchnew mutter
ofilp pick0 preconstkirch rays2 reg2tri remap1 s2ofz shoot2 sstep1
trace2 tree tri2reg trirand unif2 voft vofz warpadd ztrace
'''

try:  # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')

# env['SCANNERS'].remove(CScan)
env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

src = 'aastretch acell agrid atela cell'

for source in Split(src):
    env.Include(source,prefix='')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
#    objects.append(obj)

mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

for prog in ['eno2','ctridiagonal']:
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfimag.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))
#####################################################################

env['SCANNERS'].remove(configure.Include)
# env.Append(SCANNERS=CScan)

# 	$Id$

