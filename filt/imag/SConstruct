import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
afdm2d born2d c2r camig cell2 cgscan constfdmig2 cube2list distance
dmo dsr dsr2 eikonal eikonalvti fincon finstack fkamo fkdmo gazdag
halfint hwt2d hwtex interp2 interp3 interpt kirchinv kirchnew kirmod
kirmod3 layer mig45 mutter preconstkirch rays2 rays2a reg2tri remap1
ricker1 rwemete2d rweab rwesrmig rwezomig s2ofz shoot2 slant srsyn
srmod srmig srmig2 srmva sstep2 trace2 trapez tri2reg trirand unif2
unif3 voft vofz zomig zomva
'''

try:  # distributed version
    Import('env')
    env = env.Copy()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])
    SConscript('../lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../lib'],
            LIBS=['rsf'])

src.remove('predicates.c')

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

for prog in ('agrid','ctridiagonal','veltran'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfimag.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))
#####################################################################

# 	$Id$

