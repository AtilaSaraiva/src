import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
afdm2d camig cell2 constfdmig2 distance dmo dsr dsr2 eikonal fft2 fincon finstack
fkamo fkdmo gazdag halfint hwt2d hwtex interp2 interp3 interpt kirchnew kirmod
mig45 mutter preconstkirch rays2 reg2tri remap1 ricker1 rwemete2d s2ofz shoot2
srsyn srmig srmod sstep2 trace2 tri2reg trirand unif2 unif3 voft vofz zomig
cube2list phmig weimc wefic
'''

# exfdm weimc

try:  # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

src.remove('predicates.c')

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)

mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    prog = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,prog)

for prog in ('ctridiagonal','agrid'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
 
######################################################################
# SELF-DOCUMENTATION
######################################################################
if root:
    main = 'sfimag.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')	

    doc = env.Command(main,docs,configure.docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))
#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id$

