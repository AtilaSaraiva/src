import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
absoffdip agc ai2refl aliasp avo bin bin1 boxsmooth cascade canny
causint clip cmatmult costaper cos2ang cmp2shot cosft depth2time dimag
dipfilter enoint2 extract fft1 fft3 fourvc fourvc0 fourvc2 freqint
freqlet grad2 grad3 histogram hslice igrad imospray impl1 impl2 impl3
infill inmo inmo3 intbin intshow inttest1 inttest2 isin2ang itaupmo
iwarp linefit lpad map2list migsteep3 modrefl modrefl2 modrefl3 nmo
noise ofsemb pmig pnmo pnmo3d postfilter2 pp2psang pp2psang2 pp2pstsic
prestolt ptaupmo pveltran radial radon randrefl refer reshape ricker
shot2cmp shot2cmp3 shotholes shotprop sin slice smooth smoothder
spectra spectra2 spicks spline splinefilter stolt stolt2 stoltstretch
stretch taupmo time2depth tlagtoang2d tpow tan2ang tshift vscan velmod
xlagtoang2d zoeppritz
'''

# shot2cmp3

try: # distributed version
    Import('env')
    env = env.Clone()
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g -O0')
    SConscript('../lib/SConstruct')
    src = glob.glob('[a-z]*.c')
    env.Append(BUILDERS={'Include':configure.Header},
               SCANNERS=[configure.Include])

env.Prepend(CPPPATH=['../../include'],
            LIBPATH=['../../lib'],
            LIBS=['rsf'])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
 
mains = Split(progs)

docalias = {}
for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])
	if prog=='stretch':
	    for stretch in ('log','t2','t2cheb','lmo','nmo','rad','dat'):
                copy = string.replace(str(main[0]),'stretch',stretch+'stretch')
                env.InstallAs(os.path.join(bindir,copy),main[0])
		doc = os.path.splitext(copy)[0]
                docalias[doc] = 'sf'+prog

for prog in Split('cbanded cmatmult'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/framework/rsfdoc.py')
    doc = env.Docmerge(main,docs,alias=docalias)
    env.Install(libdir,doc)
  
#####################################################################

# 	$Id$
