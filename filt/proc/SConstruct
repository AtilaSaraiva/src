import os, sys, re, string
sys.path.append('../..')
import configure

progs = '''
agc ai2refl aliasp autocorr bandpass bin bin1 blindpick blindpick2 boxsmooth
byte2rsf burstnoise causint clip conflict conv costaper cmp2shot cosft
dealias dealias2 decon deburst depth2time despike dip dip2 dipfilter dix
envelope explanesignoi expsignoi extract fft1 fft3 fint1 flat fourvc fourvc2
frame helicon hole idempatch igrad imospray impl1 impl2 infill inmo intbin
intshow inttest1 inttest2 invbin1 iphase kolmog lapfill levint light linefit
lopef losignoi lpad lpef make misif miss miss1 miss2 miss3 monof monof2
msmiss mspef nhelicon nmo noise npef ofpwd parcel pef planemis2 planemis3
planesignoi prestolt pwd qdome radial radon randrefl reshape ricker signoi
shapebin shapebin1 shot2cmp shotholes sigmoid slice smooth smoothder
smoothreg smoothreg2 spectra spectra2 spline splinefilter stolt stretch
synmarine taupmo tentwt time2depth tpow trismooth2 twodip2 twofreq2 vscan
velmod warp1 warpscan wilson window1 window2 window3
'''

try: # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')

mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main)
	if prog=='stretch':
	    for stretch in ('log','t2','lmo','nmo','rad'):
                copy = string.replace(str(main),'stretch',stretch+'stretch')
                env.InstallAs(os.path.join(bindir,copy),main)
	        docmerge = configure.docextra(docmerge,'sf'+prog,copy)

for prog in ['banded','cbanded','gauss2','gaussshape2','triangle2','quantile',
             'matmult','cmatmult','cburg','impl2','trisl']:
    build = []
    configure.depends(env,build,'Test'+prog)
    env.Program(prog,['Test'+prog+'.c']+map(lambda x: x + '.o',build),
                PROGPREFIX='Test',PROGSUFFIX='.x')
                
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/rsfdoc.py')
    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

    
#####################################################################

# 	$Id$

