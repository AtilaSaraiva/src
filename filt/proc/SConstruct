import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
abalance agc ai2refl aliasp bandpass bin bin1 blindpick blindpick2 boxsmooth
byte2rsf canny causint clip costaper cmp2shot cosft dealias2 deblur
depth2time deriv dijkstra dip dip2 dipfilter dips dix enoint2 envelope
explanesignoi expsignoi extract fft1 fft3 flat flat3 focus fourvc fourvc2
grad2 igrad imospray impl1 impl2 infill inmo intbin intshow inttest1 inttest2
iphase kolmog lapfill linefit lpad miss2 miss3 modrefl monof monof2 nmo noise
nsmooth nsmooth1 ofpwd ofpwd2 ofsemb ocparcel octentwt patch planemis2
planemis3 planesignoi pmig pnmo postfilter2 pp2psang predict prestolt
pveltran pwd pwdix pwdsigk pwdsmooth2 radial radon randrefl refer reshape
ricker shapebin shapebin1 shapesigk shearer shot2cmp shotholes slice smooth
smoothder smoothreg smoothreg2 spectra spectra2 spline splinefilter stolt
stretch taupmo time2depth tomo tpow trismooth2 tshift twodip2 twofreq2 vscan velmod
warp1 warpscan warpscan2 window1
'''

try: # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g -O0')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

src.remove('mt19937ar.c')

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
 
mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])
	if prog=='stretch':
	    for stretch in ('log','t2','lmo','nmo','rad'):
                copy = string.replace(str(main[0]),'stretch',stretch+'stretch')
                env.InstallAs(os.path.join(bindir,copy),main[0])
		doc = os.path.splitext(copy)[0]
	        docmerge = configure.docextra(docmerge,'sf'+prog,doc)

for prog in Split('''
banded cbanded gauss2 gaussshape2 triangle2
matmult cmatmult impl2 ntriangle1 predict predict2 pwdsl trisl trianglen
'''):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')
    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

    
#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id$
