import os, sys, re, string
sys.path.append('../..')
import configure

progs = '''
abalance agc ai2refl aliasp autocorr bandpass bin bin1 blindpick blindpick2
boxsmooth byte2rsf burstnoise causint clip conflict conv costaper cmp2shot cosft
dealias2 decon deburst depth2time deriv despike dip dip2 dipfilter dips dix
envelope explanesignoi expsignoi extract fft1 fft3 fint1 flat flat3 fourvc
fourvc2 frame helicon hole idempatch igrad imospray impl1 impl2 infill inmo
intbin intshow inttest1 inttest2 invbin1 iphase kolmog lapfill levint light
linefit lopef losignoi lpad lpef make misif miss miss1 miss2 miss3 monof
monof2 msmiss mspef nhelicon nmo noise npef nsmooth1 ofpwd ocparcel octentwt
parcel pef planemis2 planemis3 planesignoi pnmo prestolt pwd qdome radial
radon randrefl refer reshape ricker signoi shapebin shapebin1 shot2cmp
shotholes sigmoid slice smooth smoothder smoothdiv smoothreg smoothreg2 spectra
spectra2 spline splinefilter stolt stretch synmarine taupmo tentwt time2depth
tomo tpow trismooth2 twodip2 twofreq2 vscan velmod warp1 warpscan wilson
window1 window2 window3
'''

try: # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

src2 = '''
allp2 allp3 apfilt autocorr banded bandpass bound box boxfilter burg butter
callp2 causint cbanded cmatmult compress copy cosft createhelix createmshelix
createnhelix ctoeplitz cweight deburst dijkstra dip2 dip3 dips div1 div2 divn
edge expder2 explanesignoi expont2 slinint
'''

for source in Split(src2):
    env.Include(source,prefix='')
    obj = env.StaticObject(source+'.c')
    env.Depends(obj,source+'.h')
 
mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])
	if prog=='stretch':
	    for stretch in ('log','t2','lmo','nmo','rad'):
                copy = string.replace(str(main[0]),'stretch',stretch+'stretch')
                env.InstallAs(os.path.join(bindir,copy),main[0])
		doc = os.path.splitext(copy)[0]
	        docmerge = configure.docextra(docmerge,'sf'+prog,doc)

for prog in ['banded','cbanded','gauss2','gaussshape2','triangle2','quantile',
             'matmult','cmatmult','impl2','trisl','trianglen']:
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')
    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

    
#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id$

