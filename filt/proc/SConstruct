import os, sys, re, string, glob
sys.path.append('../..')
import configure

progs = '''
absoffdip agc ai2refl aliasp avo bin bin1 boxsmooth canny causint clip
cmatmult costaper cmp2shot cosft depth2time dipfilter enoint2 extract
fft1 fft3 fourvc fourvc2 grad2 histogram hslice igrad imospray impl1
impl2 infill inmo intbin intshow inttest1 inttest2 kolmog linefit lpad
modrefl modrefl2 nmo noise ofsemb pmig pnmo postfilter2 pp2psang
pp2psang2 pp2pstsic prestolt pveltran radial radon randrefl refer reshape ricker
shot2cmp shotholes shotprop slice slowft smooth smoothder smoothreg
smoothreg2 spectra spectra2 spicks spline splinefilter stolt stretch
taupmo time2depth tpow tan2ang tshift vscan velmod
'''

try: # distributed version
    Import('env')
    root = env.get('RSFROOT')
    libdir = os.path.join(root,'lib')
    bindir = os.path.join(root,'bin')
    incdir = os.path.join(root,'include')
    docmerge = configure.docmerge
    dir = string.replace(os.getcwd(),'/build','')
    src = map(os.path.basename,glob.glob(os.path.join(dir,'[a-z]*.c')))
except: # local version
    root = None
    env = Environment()
    opts=Options('../../config.py')
    configure.options(opts)
    opts.Update(env)
    env['CCFLAGS'] = string.replace(env.get('CCFLAGS',''),'-O2','-g -O0')
    env.Prepend(CPPPATH=['../../include'],LIBPATH=['../lib'],LIBS=['rsf'])
    SConscript('../lib/SConstruct')
    src = glob.glob('[a-z]*.c')

env.Append(BUILDERS={'Include':configure.Header},
           SCANNERS=[configure.Include])

for source in src:
    inc = env.Include(source,prefix='')
    obj = env.StaticObject(source)
    env.Depends(obj,inc)
 
mains = Split(progs)

for prog in mains:
    sources = ['M' + prog]
    configure.depends(env,sources,'M'+prog)
    main = env.Program(prog,map(lambda x: x + '.c',sources))
    if root:
        env.Install(bindir,main[0])
	if prog=='stretch':
	    for stretch in ('log','t2','t2cheb','lmo','nmo','rad','dat'):
                copy = string.replace(str(main[0]),'stretch',stretch+'stretch')
                env.InstallAs(os.path.join(bindir,copy),main[0])
		doc = os.path.splitext(copy)[0]
	        docmerge = configure.docextra(docmerge,'sf'+prog,doc)

for prog in Split('cbanded cmatmult impl2'):
    sources = ['Test' + prog,prog]
    configure.depends(env,sources,prog)
    sources = map(lambda x: x + '.o',sources)
    env.Object('Test' + prog + '.c')
    env.Program(sources,PROGPREFIX='',PROGSUFFIX='.x')
               
######################################################################
# SELF-DOCUMENTATION
######################################################################

if root:
    main = 'sfproc.py'
    
    docs = map(lambda prog: env.Doc(prog,'M' + prog),mains)
    env.Depends(docs,'#/python/rsfdoc.py')
    doc = env.Command(main,docs,docmerge)
    env.Install(libdir,doc)
    Clean(os.path.join(libdir,main),os.path.join(libdir,main+'c'))

    
#####################################################################

env['SCANNERS'].remove(configure.Include)

# 	$Id$
