#!/usr/bin/env python
import sys, os, string, signal

def cpus(): 
    '''
    Returns the number of CPUs in the system
    '''
    try:
        # Tested on CentOS, Fedora and Cygwin 1.7
        import multiprocessing # module added in Python 2.6
        return multiprocessing.cpu_count()
    except: 
        # Thanks to Lawrence Oluyede on python-list 
        num = 0
        
        if sys.platform == 'win32':
            try:
                num = int(os.environ['NUMBER_OF_PROCESSORS'])
            except (ValueError, KeyError):
                pass
        elif sys.platform == 'darwin':
            try:
                num = int(os.popen('sysctl -n hw.ncpu').read())
            except ValueError:
                pass
        else:
            # A better way: parse /proc/cpuinfo for physical CPUs
            # rather than virtual CPUs from hyperthreading
            
            try:
                num = os.sysconf('SC_NPROCESSORS_ONLN')
            except (ValueError, OSError, AttributeError):
                pass
            
        if num >= 1:
            return num
        else:
            raise NotImplementedError

child = None

def handler(signum, frame):
    'signal handler for abortion [Ctrl-C]'
    global child
    sys.stderr.write('\n[Ctrl-C] Aborting...\n')
    if child:
        os.kill (signal.SIGINT,child)
    sys.exit(-1)

signal.signal(signal.SIGINT,handler) # handle interrupt

cpu = cpus()

threads = int(os.environ.get('RSF_THREADS',cpu))
cluster = os.environ.get('RSF_CLUSTER','localhost %d' % cpu)

args = string.join(sys.argv[1:])
command = 'scons -j %d CLUSTER="%s" %s' % (threads,cluster,args)

sys.stderr.write(command+'\n')

# interruptable system command
child = os.fork()
if child:
    try:
        (pid,exit) = os.waitpid(child,0)
        sys.exit(exit)
    except OSError:
        sys.exit(0)
else:
    os.system(command)
    os._exit(0)

